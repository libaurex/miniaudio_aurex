/* automatically generated by rust-bindgen 0.72.0 */

#![allow(warnings)]

pub const MA_VERSION_MAJOR: u32 = 0;
pub const MA_VERSION_MINOR: u32 = 11;
pub const MA_VERSION_REVISION: u32 = 22;
pub const MA_SIZEOF_PTR: u32 = 8;
pub const MA_TRUE: u32 = 1;
pub const MA_FALSE: u32 = 0;
pub const MA_SIZE_MAX: u32 = 4294967295;
pub const MA_SIMD_ALIGNMENT: u32 = 32;
pub const MA_MIN_CHANNELS: u32 = 1;
pub const MA_MAX_CHANNELS: u32 = 254;
pub const MA_MAX_FILTER_ORDER: u32 = 8;
pub const MA_MAX_LOG_CALLBACKS: u32 = 4;
pub const MA_CHANNEL_INDEX_NULL: u32 = 255;
pub const MA_DATA_SOURCE_SELF_MANAGED_RANGE_AND_LOOP_POINT: u32 = 1;
pub const MA_DATA_FORMAT_FLAG_EXCLUSIVE_MODE: u32 = 2;
pub const MA_MAX_DEVICE_NAME_LENGTH: u32 = 255;
pub const MA_RESOURCE_MANAGER_MAX_JOB_THREAD_COUNT: u32 = 64;
pub const MA_MAX_NODE_BUS_COUNT: u32 = 254;
pub const MA_MAX_NODE_LOCAL_BUS_COUNT: u32 = 2;
pub const MA_NODE_BUS_COUNT_UNKNOWN: u32 = 255;
pub const MA_ENGINE_MAX_LISTENERS: u32 = 4;
pub const MA_SOUND_SOURCE_CHANNEL_COUNT: u32 = 4294967295;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type max_align_t = f64;
pub type ma_int8 = ::std::os::raw::c_schar;
pub type ma_uint8 = ::std::os::raw::c_uchar;
pub type ma_int16 = ::std::os::raw::c_short;
pub type ma_uint16 = ::std::os::raw::c_ushort;
pub type ma_int32 = ::std::os::raw::c_int;
pub type ma_uint32 = ::std::os::raw::c_uint;
pub type ma_int64 = ::std::os::raw::c_longlong;
pub type ma_uint64 = ::std::os::raw::c_ulonglong;
pub type ma_uintptr = ma_uint64;
pub type ma_bool8 = ma_uint8;
pub type ma_bool32 = ma_uint32;
pub type ma_float = f32;
pub type ma_double = f64;
pub type ma_handle = *mut ::std::os::raw::c_void;
pub type ma_ptr = *mut ::std::os::raw::c_void;
pub type ma_proc = *mut ::std::os::raw::c_void;
pub type ma_wchar_win32 = wchar_t;
pub const ma_log_level_MA_LOG_LEVEL_DEBUG: ma_log_level = 4;
pub const ma_log_level_MA_LOG_LEVEL_INFO: ma_log_level = 3;
pub const ma_log_level_MA_LOG_LEVEL_WARNING: ma_log_level = 2;
pub const ma_log_level_MA_LOG_LEVEL_ERROR: ma_log_level = 1;
pub type ma_log_level = ::std::os::raw::c_int;
pub type ma_channel = ma_uint8;
pub const _ma_channel_position_MA_CHANNEL_NONE: _ma_channel_position = 0;
pub const _ma_channel_position_MA_CHANNEL_MONO: _ma_channel_position = 1;
pub const _ma_channel_position_MA_CHANNEL_FRONT_LEFT: _ma_channel_position = 2;
pub const _ma_channel_position_MA_CHANNEL_FRONT_RIGHT: _ma_channel_position = 3;
pub const _ma_channel_position_MA_CHANNEL_FRONT_CENTER: _ma_channel_position = 4;
pub const _ma_channel_position_MA_CHANNEL_LFE: _ma_channel_position = 5;
pub const _ma_channel_position_MA_CHANNEL_BACK_LEFT: _ma_channel_position = 6;
pub const _ma_channel_position_MA_CHANNEL_BACK_RIGHT: _ma_channel_position = 7;
pub const _ma_channel_position_MA_CHANNEL_FRONT_LEFT_CENTER: _ma_channel_position = 8;
pub const _ma_channel_position_MA_CHANNEL_FRONT_RIGHT_CENTER: _ma_channel_position = 9;
pub const _ma_channel_position_MA_CHANNEL_BACK_CENTER: _ma_channel_position = 10;
pub const _ma_channel_position_MA_CHANNEL_SIDE_LEFT: _ma_channel_position = 11;
pub const _ma_channel_position_MA_CHANNEL_SIDE_RIGHT: _ma_channel_position = 12;
pub const _ma_channel_position_MA_CHANNEL_TOP_CENTER: _ma_channel_position = 13;
pub const _ma_channel_position_MA_CHANNEL_TOP_FRONT_LEFT: _ma_channel_position = 14;
pub const _ma_channel_position_MA_CHANNEL_TOP_FRONT_CENTER: _ma_channel_position = 15;
pub const _ma_channel_position_MA_CHANNEL_TOP_FRONT_RIGHT: _ma_channel_position = 16;
pub const _ma_channel_position_MA_CHANNEL_TOP_BACK_LEFT: _ma_channel_position = 17;
pub const _ma_channel_position_MA_CHANNEL_TOP_BACK_CENTER: _ma_channel_position = 18;
pub const _ma_channel_position_MA_CHANNEL_TOP_BACK_RIGHT: _ma_channel_position = 19;
pub const _ma_channel_position_MA_CHANNEL_AUX_0: _ma_channel_position = 20;
pub const _ma_channel_position_MA_CHANNEL_AUX_1: _ma_channel_position = 21;
pub const _ma_channel_position_MA_CHANNEL_AUX_2: _ma_channel_position = 22;
pub const _ma_channel_position_MA_CHANNEL_AUX_3: _ma_channel_position = 23;
pub const _ma_channel_position_MA_CHANNEL_AUX_4: _ma_channel_position = 24;
pub const _ma_channel_position_MA_CHANNEL_AUX_5: _ma_channel_position = 25;
pub const _ma_channel_position_MA_CHANNEL_AUX_6: _ma_channel_position = 26;
pub const _ma_channel_position_MA_CHANNEL_AUX_7: _ma_channel_position = 27;
pub const _ma_channel_position_MA_CHANNEL_AUX_8: _ma_channel_position = 28;
pub const _ma_channel_position_MA_CHANNEL_AUX_9: _ma_channel_position = 29;
pub const _ma_channel_position_MA_CHANNEL_AUX_10: _ma_channel_position = 30;
pub const _ma_channel_position_MA_CHANNEL_AUX_11: _ma_channel_position = 31;
pub const _ma_channel_position_MA_CHANNEL_AUX_12: _ma_channel_position = 32;
pub const _ma_channel_position_MA_CHANNEL_AUX_13: _ma_channel_position = 33;
pub const _ma_channel_position_MA_CHANNEL_AUX_14: _ma_channel_position = 34;
pub const _ma_channel_position_MA_CHANNEL_AUX_15: _ma_channel_position = 35;
pub const _ma_channel_position_MA_CHANNEL_AUX_16: _ma_channel_position = 36;
pub const _ma_channel_position_MA_CHANNEL_AUX_17: _ma_channel_position = 37;
pub const _ma_channel_position_MA_CHANNEL_AUX_18: _ma_channel_position = 38;
pub const _ma_channel_position_MA_CHANNEL_AUX_19: _ma_channel_position = 39;
pub const _ma_channel_position_MA_CHANNEL_AUX_20: _ma_channel_position = 40;
pub const _ma_channel_position_MA_CHANNEL_AUX_21: _ma_channel_position = 41;
pub const _ma_channel_position_MA_CHANNEL_AUX_22: _ma_channel_position = 42;
pub const _ma_channel_position_MA_CHANNEL_AUX_23: _ma_channel_position = 43;
pub const _ma_channel_position_MA_CHANNEL_AUX_24: _ma_channel_position = 44;
pub const _ma_channel_position_MA_CHANNEL_AUX_25: _ma_channel_position = 45;
pub const _ma_channel_position_MA_CHANNEL_AUX_26: _ma_channel_position = 46;
pub const _ma_channel_position_MA_CHANNEL_AUX_27: _ma_channel_position = 47;
pub const _ma_channel_position_MA_CHANNEL_AUX_28: _ma_channel_position = 48;
pub const _ma_channel_position_MA_CHANNEL_AUX_29: _ma_channel_position = 49;
pub const _ma_channel_position_MA_CHANNEL_AUX_30: _ma_channel_position = 50;
pub const _ma_channel_position_MA_CHANNEL_AUX_31: _ma_channel_position = 51;
pub const _ma_channel_position_MA_CHANNEL_LEFT: _ma_channel_position = 2;
pub const _ma_channel_position_MA_CHANNEL_RIGHT: _ma_channel_position = 3;
pub const _ma_channel_position_MA_CHANNEL_POSITION_COUNT: _ma_channel_position = 52;
pub type _ma_channel_position = ::std::os::raw::c_int;
pub const ma_result_MA_SUCCESS: ma_result = 0;
pub const ma_result_MA_ERROR: ma_result = -1;
pub const ma_result_MA_INVALID_ARGS: ma_result = -2;
pub const ma_result_MA_INVALID_OPERATION: ma_result = -3;
pub const ma_result_MA_OUT_OF_MEMORY: ma_result = -4;
pub const ma_result_MA_OUT_OF_RANGE: ma_result = -5;
pub const ma_result_MA_ACCESS_DENIED: ma_result = -6;
pub const ma_result_MA_DOES_NOT_EXIST: ma_result = -7;
pub const ma_result_MA_ALREADY_EXISTS: ma_result = -8;
pub const ma_result_MA_TOO_MANY_OPEN_FILES: ma_result = -9;
pub const ma_result_MA_INVALID_FILE: ma_result = -10;
pub const ma_result_MA_TOO_BIG: ma_result = -11;
pub const ma_result_MA_PATH_TOO_LONG: ma_result = -12;
pub const ma_result_MA_NAME_TOO_LONG: ma_result = -13;
pub const ma_result_MA_NOT_DIRECTORY: ma_result = -14;
pub const ma_result_MA_IS_DIRECTORY: ma_result = -15;
pub const ma_result_MA_DIRECTORY_NOT_EMPTY: ma_result = -16;
pub const ma_result_MA_AT_END: ma_result = -17;
pub const ma_result_MA_NO_SPACE: ma_result = -18;
pub const ma_result_MA_BUSY: ma_result = -19;
pub const ma_result_MA_IO_ERROR: ma_result = -20;
pub const ma_result_MA_INTERRUPT: ma_result = -21;
pub const ma_result_MA_UNAVAILABLE: ma_result = -22;
pub const ma_result_MA_ALREADY_IN_USE: ma_result = -23;
pub const ma_result_MA_BAD_ADDRESS: ma_result = -24;
pub const ma_result_MA_BAD_SEEK: ma_result = -25;
pub const ma_result_MA_BAD_PIPE: ma_result = -26;
pub const ma_result_MA_DEADLOCK: ma_result = -27;
pub const ma_result_MA_TOO_MANY_LINKS: ma_result = -28;
pub const ma_result_MA_NOT_IMPLEMENTED: ma_result = -29;
pub const ma_result_MA_NO_MESSAGE: ma_result = -30;
pub const ma_result_MA_BAD_MESSAGE: ma_result = -31;
pub const ma_result_MA_NO_DATA_AVAILABLE: ma_result = -32;
pub const ma_result_MA_INVALID_DATA: ma_result = -33;
pub const ma_result_MA_TIMEOUT: ma_result = -34;
pub const ma_result_MA_NO_NETWORK: ma_result = -35;
pub const ma_result_MA_NOT_UNIQUE: ma_result = -36;
pub const ma_result_MA_NOT_SOCKET: ma_result = -37;
pub const ma_result_MA_NO_ADDRESS: ma_result = -38;
pub const ma_result_MA_BAD_PROTOCOL: ma_result = -39;
pub const ma_result_MA_PROTOCOL_UNAVAILABLE: ma_result = -40;
pub const ma_result_MA_PROTOCOL_NOT_SUPPORTED: ma_result = -41;
pub const ma_result_MA_PROTOCOL_FAMILY_NOT_SUPPORTED: ma_result = -42;
pub const ma_result_MA_ADDRESS_FAMILY_NOT_SUPPORTED: ma_result = -43;
pub const ma_result_MA_SOCKET_NOT_SUPPORTED: ma_result = -44;
pub const ma_result_MA_CONNECTION_RESET: ma_result = -45;
pub const ma_result_MA_ALREADY_CONNECTED: ma_result = -46;
pub const ma_result_MA_NOT_CONNECTED: ma_result = -47;
pub const ma_result_MA_CONNECTION_REFUSED: ma_result = -48;
pub const ma_result_MA_NO_HOST: ma_result = -49;
pub const ma_result_MA_IN_PROGRESS: ma_result = -50;
pub const ma_result_MA_CANCELLED: ma_result = -51;
pub const ma_result_MA_MEMORY_ALREADY_MAPPED: ma_result = -52;
pub const ma_result_MA_CRC_MISMATCH: ma_result = -100;
pub const ma_result_MA_FORMAT_NOT_SUPPORTED: ma_result = -200;
pub const ma_result_MA_DEVICE_TYPE_NOT_SUPPORTED: ma_result = -201;
pub const ma_result_MA_SHARE_MODE_NOT_SUPPORTED: ma_result = -202;
pub const ma_result_MA_NO_BACKEND: ma_result = -203;
pub const ma_result_MA_NO_DEVICE: ma_result = -204;
pub const ma_result_MA_API_NOT_FOUND: ma_result = -205;
pub const ma_result_MA_INVALID_DEVICE_CONFIG: ma_result = -206;
pub const ma_result_MA_LOOP: ma_result = -207;
pub const ma_result_MA_BACKEND_NOT_ENABLED: ma_result = -208;
pub const ma_result_MA_DEVICE_NOT_INITIALIZED: ma_result = -300;
pub const ma_result_MA_DEVICE_ALREADY_INITIALIZED: ma_result = -301;
pub const ma_result_MA_DEVICE_NOT_STARTED: ma_result = -302;
pub const ma_result_MA_DEVICE_NOT_STOPPED: ma_result = -303;
pub const ma_result_MA_FAILED_TO_INIT_BACKEND: ma_result = -400;
pub const ma_result_MA_FAILED_TO_OPEN_BACKEND_DEVICE: ma_result = -401;
pub const ma_result_MA_FAILED_TO_START_BACKEND_DEVICE: ma_result = -402;
pub const ma_result_MA_FAILED_TO_STOP_BACKEND_DEVICE: ma_result = -403;
pub type ma_result = ::std::os::raw::c_int;
pub const ma_stream_format_ma_stream_format_pcm: ma_stream_format = 0;
pub type ma_stream_format = ::std::os::raw::c_int;
pub const ma_stream_layout_ma_stream_layout_interleaved: ma_stream_layout = 0;
pub const ma_stream_layout_ma_stream_layout_deinterleaved: ma_stream_layout = 1;
pub type ma_stream_layout = ::std::os::raw::c_int;
pub const ma_dither_mode_ma_dither_mode_none: ma_dither_mode = 0;
pub const ma_dither_mode_ma_dither_mode_rectangle: ma_dither_mode = 1;
pub const ma_dither_mode_ma_dither_mode_triangle: ma_dither_mode = 2;
pub type ma_dither_mode = ::std::os::raw::c_int;
pub const ma_format_ma_format_unknown: ma_format = 0;
pub const ma_format_ma_format_u8: ma_format = 1;
pub const ma_format_ma_format_s16: ma_format = 2;
pub const ma_format_ma_format_s24: ma_format = 3;
pub const ma_format_ma_format_s32: ma_format = 4;
pub const ma_format_ma_format_f32: ma_format = 5;
pub const ma_format_ma_format_count: ma_format = 6;
pub type ma_format = ::std::os::raw::c_int;
pub const ma_standard_sample_rate_ma_standard_sample_rate_48000: ma_standard_sample_rate = 48000;
pub const ma_standard_sample_rate_ma_standard_sample_rate_44100: ma_standard_sample_rate = 44100;
pub const ma_standard_sample_rate_ma_standard_sample_rate_32000: ma_standard_sample_rate = 32000;
pub const ma_standard_sample_rate_ma_standard_sample_rate_24000: ma_standard_sample_rate = 24000;
pub const ma_standard_sample_rate_ma_standard_sample_rate_22050: ma_standard_sample_rate = 22050;
pub const ma_standard_sample_rate_ma_standard_sample_rate_88200: ma_standard_sample_rate = 88200;
pub const ma_standard_sample_rate_ma_standard_sample_rate_96000: ma_standard_sample_rate = 96000;
pub const ma_standard_sample_rate_ma_standard_sample_rate_176400: ma_standard_sample_rate = 176400;
pub const ma_standard_sample_rate_ma_standard_sample_rate_192000: ma_standard_sample_rate = 192000;
pub const ma_standard_sample_rate_ma_standard_sample_rate_16000: ma_standard_sample_rate = 16000;
pub const ma_standard_sample_rate_ma_standard_sample_rate_11025: ma_standard_sample_rate = 11025;
pub const ma_standard_sample_rate_ma_standard_sample_rate_8000: ma_standard_sample_rate = 8000;
pub const ma_standard_sample_rate_ma_standard_sample_rate_352800: ma_standard_sample_rate = 352800;
pub const ma_standard_sample_rate_ma_standard_sample_rate_384000: ma_standard_sample_rate = 384000;
pub const ma_standard_sample_rate_ma_standard_sample_rate_min: ma_standard_sample_rate = 8000;
pub const ma_standard_sample_rate_ma_standard_sample_rate_max: ma_standard_sample_rate = 384000;
pub const ma_standard_sample_rate_ma_standard_sample_rate_count: ma_standard_sample_rate = 14;
pub type ma_standard_sample_rate = ::std::os::raw::c_int;
pub const ma_channel_mix_mode_ma_channel_mix_mode_rectangular: ma_channel_mix_mode = 0;
pub const ma_channel_mix_mode_ma_channel_mix_mode_simple: ma_channel_mix_mode = 1;
pub const ma_channel_mix_mode_ma_channel_mix_mode_custom_weights: ma_channel_mix_mode = 2;
pub const ma_channel_mix_mode_ma_channel_mix_mode_default: ma_channel_mix_mode = 0;
pub type ma_channel_mix_mode = ::std::os::raw::c_int;
pub const ma_standard_channel_map_ma_standard_channel_map_microsoft: ma_standard_channel_map = 0;
pub const ma_standard_channel_map_ma_standard_channel_map_alsa: ma_standard_channel_map = 1;
pub const ma_standard_channel_map_ma_standard_channel_map_rfc3551: ma_standard_channel_map = 2;
pub const ma_standard_channel_map_ma_standard_channel_map_flac: ma_standard_channel_map = 3;
pub const ma_standard_channel_map_ma_standard_channel_map_vorbis: ma_standard_channel_map = 4;
pub const ma_standard_channel_map_ma_standard_channel_map_sound4: ma_standard_channel_map = 5;
pub const ma_standard_channel_map_ma_standard_channel_map_sndio: ma_standard_channel_map = 6;
pub const ma_standard_channel_map_ma_standard_channel_map_webaudio: ma_standard_channel_map = 3;
pub const ma_standard_channel_map_ma_standard_channel_map_default: ma_standard_channel_map = 0;
pub type ma_standard_channel_map = ::std::os::raw::c_int;
pub const ma_performance_profile_ma_performance_profile_low_latency: ma_performance_profile = 0;
pub const ma_performance_profile_ma_performance_profile_conservative: ma_performance_profile = 1;
pub type ma_performance_profile = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_allocation_callbacks {
    pub pUserData: *mut ::std::os::raw::c_void,
    pub onMalloc: ::std::option::Option<
        unsafe extern "C" fn(
            sz: usize,
            pUserData: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub onRealloc: ::std::option::Option<
        unsafe extern "C" fn(
            p: *mut ::std::os::raw::c_void,
            sz: usize,
            pUserData: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub onFree: ::std::option::Option<
        unsafe extern "C" fn(
            p: *mut ::std::os::raw::c_void,
            pUserData: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_allocation_callbacks"][::std::mem::size_of::<ma_allocation_callbacks>() - 32usize];
    ["Alignment of ma_allocation_callbacks"]
        [::std::mem::align_of::<ma_allocation_callbacks>() - 8usize];
    ["Offset of field: ma_allocation_callbacks::pUserData"]
        [::std::mem::offset_of!(ma_allocation_callbacks, pUserData) - 0usize];
    ["Offset of field: ma_allocation_callbacks::onMalloc"]
        [::std::mem::offset_of!(ma_allocation_callbacks, onMalloc) - 8usize];
    ["Offset of field: ma_allocation_callbacks::onRealloc"]
        [::std::mem::offset_of!(ma_allocation_callbacks, onRealloc) - 16usize];
    ["Offset of field: ma_allocation_callbacks::onFree"]
        [::std::mem::offset_of!(ma_allocation_callbacks, onFree) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_lcg {
    pub state: ma_int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_lcg"][::std::mem::size_of::<ma_lcg>() - 4usize];
    ["Alignment of ma_lcg"][::std::mem::align_of::<ma_lcg>() - 4usize];
    ["Offset of field: ma_lcg::state"][::std::mem::offset_of!(ma_lcg, state) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_atomic_uint32 {
    pub value: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_atomic_uint32"][::std::mem::size_of::<ma_atomic_uint32>() - 4usize];
    ["Alignment of ma_atomic_uint32"][::std::mem::align_of::<ma_atomic_uint32>() - 4usize];
    ["Offset of field: ma_atomic_uint32::value"]
        [::std::mem::offset_of!(ma_atomic_uint32, value) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_atomic_int32 {
    pub value: ma_int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_atomic_int32"][::std::mem::size_of::<ma_atomic_int32>() - 4usize];
    ["Alignment of ma_atomic_int32"][::std::mem::align_of::<ma_atomic_int32>() - 4usize];
    ["Offset of field: ma_atomic_int32::value"]
        [::std::mem::offset_of!(ma_atomic_int32, value) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_atomic_uint64 {
    pub value: ma_uint64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_atomic_uint64"][::std::mem::size_of::<ma_atomic_uint64>() - 8usize];
    ["Alignment of ma_atomic_uint64"][::std::mem::align_of::<ma_atomic_uint64>() - 8usize];
    ["Offset of field: ma_atomic_uint64::value"]
        [::std::mem::offset_of!(ma_atomic_uint64, value) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_atomic_float {
    pub value: ma_float,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_atomic_float"][::std::mem::size_of::<ma_atomic_float>() - 4usize];
    ["Alignment of ma_atomic_float"][::std::mem::align_of::<ma_atomic_float>() - 4usize];
    ["Offset of field: ma_atomic_float::value"]
        [::std::mem::offset_of!(ma_atomic_float, value) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_atomic_bool32 {
    pub value: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_atomic_bool32"][::std::mem::size_of::<ma_atomic_bool32>() - 4usize];
    ["Alignment of ma_atomic_bool32"][::std::mem::align_of::<ma_atomic_bool32>() - 4usize];
    ["Offset of field: ma_atomic_bool32::value"]
        [::std::mem::offset_of!(ma_atomic_bool32, value) - 0usize];
};
pub type ma_spinlock = ma_uint32;
pub const ma_thread_priority_ma_thread_priority_idle: ma_thread_priority = -5;
pub const ma_thread_priority_ma_thread_priority_lowest: ma_thread_priority = -4;
pub const ma_thread_priority_ma_thread_priority_low: ma_thread_priority = -3;
pub const ma_thread_priority_ma_thread_priority_normal: ma_thread_priority = -2;
pub const ma_thread_priority_ma_thread_priority_high: ma_thread_priority = -1;
pub const ma_thread_priority_ma_thread_priority_highest: ma_thread_priority = 0;
pub const ma_thread_priority_ma_thread_priority_realtime: ma_thread_priority = 1;
pub const ma_thread_priority_ma_thread_priority_default: ma_thread_priority = 0;
pub type ma_thread_priority = ::std::os::raw::c_int;
pub type ma_thread = ma_handle;
pub type ma_mutex = ma_handle;
pub type ma_event = ma_handle;
pub type ma_semaphore = ma_handle;
unsafe extern "C" {
    pub fn ma_version(pMajor: *mut ma_uint32, pMinor: *mut ma_uint32, pRevision: *mut ma_uint32);
}
unsafe extern "C" {
    pub fn ma_version_string() -> *const ::std::os::raw::c_char;
}
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __builtin_va_list;
pub type ma_log_callback_proc = ::std::option::Option<
    unsafe extern "C" fn(
        pUserData: *mut ::std::os::raw::c_void,
        level: ma_uint32,
        pMessage: *const ::std::os::raw::c_char,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_log_callback {
    pub onLog: ma_log_callback_proc,
    pub pUserData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_log_callback"][::std::mem::size_of::<ma_log_callback>() - 16usize];
    ["Alignment of ma_log_callback"][::std::mem::align_of::<ma_log_callback>() - 8usize];
    ["Offset of field: ma_log_callback::onLog"]
        [::std::mem::offset_of!(ma_log_callback, onLog) - 0usize];
    ["Offset of field: ma_log_callback::pUserData"]
        [::std::mem::offset_of!(ma_log_callback, pUserData) - 8usize];
};
unsafe extern "C" {
    pub fn ma_log_callback_init(
        onLog: ma_log_callback_proc,
        pUserData: *mut ::std::os::raw::c_void,
    ) -> ma_log_callback;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_log {
    pub callbacks: [ma_log_callback; 4usize],
    pub callbackCount: ma_uint32,
    pub allocationCallbacks: ma_allocation_callbacks,
    pub lock: ma_mutex,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_log"][::std::mem::size_of::<ma_log>() - 112usize];
    ["Alignment of ma_log"][::std::mem::align_of::<ma_log>() - 8usize];
    ["Offset of field: ma_log::callbacks"][::std::mem::offset_of!(ma_log, callbacks) - 0usize];
    ["Offset of field: ma_log::callbackCount"]
        [::std::mem::offset_of!(ma_log, callbackCount) - 64usize];
    ["Offset of field: ma_log::allocationCallbacks"]
        [::std::mem::offset_of!(ma_log, allocationCallbacks) - 72usize];
    ["Offset of field: ma_log::lock"][::std::mem::offset_of!(ma_log, lock) - 104usize];
};
unsafe extern "C" {
    pub fn ma_log_init(
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pLog: *mut ma_log,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_log_uninit(pLog: *mut ma_log);
}
unsafe extern "C" {
    pub fn ma_log_register_callback(pLog: *mut ma_log, callback: ma_log_callback) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_log_unregister_callback(pLog: *mut ma_log, callback: ma_log_callback) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_log_post(
        pLog: *mut ma_log,
        level: ma_uint32,
        pMessage: *const ::std::os::raw::c_char,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_log_postv(
        pLog: *mut ma_log,
        level: ma_uint32,
        pFormat: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_log_postf(
        pLog: *mut ma_log,
        level: ma_uint32,
        pFormat: *const ::std::os::raw::c_char,
        ...
    ) -> ma_result;
}
#[doc = "Biquad Filtering"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_biquad_coefficient {
    pub f32_: f32,
    pub s32: ma_int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_biquad_coefficient"][::std::mem::size_of::<ma_biquad_coefficient>() - 4usize];
    ["Alignment of ma_biquad_coefficient"]
        [::std::mem::align_of::<ma_biquad_coefficient>() - 4usize];
    ["Offset of field: ma_biquad_coefficient::f32_"]
        [::std::mem::offset_of!(ma_biquad_coefficient, f32_) - 0usize];
    ["Offset of field: ma_biquad_coefficient::s32"]
        [::std::mem::offset_of!(ma_biquad_coefficient, s32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_biquad_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub b0: f64,
    pub b1: f64,
    pub b2: f64,
    pub a0: f64,
    pub a1: f64,
    pub a2: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_biquad_config"][::std::mem::size_of::<ma_biquad_config>() - 56usize];
    ["Alignment of ma_biquad_config"][::std::mem::align_of::<ma_biquad_config>() - 8usize];
    ["Offset of field: ma_biquad_config::format"]
        [::std::mem::offset_of!(ma_biquad_config, format) - 0usize];
    ["Offset of field: ma_biquad_config::channels"]
        [::std::mem::offset_of!(ma_biquad_config, channels) - 4usize];
    ["Offset of field: ma_biquad_config::b0"]
        [::std::mem::offset_of!(ma_biquad_config, b0) - 8usize];
    ["Offset of field: ma_biquad_config::b1"]
        [::std::mem::offset_of!(ma_biquad_config, b1) - 16usize];
    ["Offset of field: ma_biquad_config::b2"]
        [::std::mem::offset_of!(ma_biquad_config, b2) - 24usize];
    ["Offset of field: ma_biquad_config::a0"]
        [::std::mem::offset_of!(ma_biquad_config, a0) - 32usize];
    ["Offset of field: ma_biquad_config::a1"]
        [::std::mem::offset_of!(ma_biquad_config, a1) - 40usize];
    ["Offset of field: ma_biquad_config::a2"]
        [::std::mem::offset_of!(ma_biquad_config, a2) - 48usize];
};
unsafe extern "C" {
    pub fn ma_biquad_config_init(
        format: ma_format,
        channels: ma_uint32,
        b0: f64,
        b1: f64,
        b2: f64,
        a0: f64,
        a1: f64,
        a2: f64,
    ) -> ma_biquad_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_biquad {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub b0: ma_biquad_coefficient,
    pub b1: ma_biquad_coefficient,
    pub b2: ma_biquad_coefficient,
    pub a1: ma_biquad_coefficient,
    pub a2: ma_biquad_coefficient,
    pub pR1: *mut ma_biquad_coefficient,
    pub pR2: *mut ma_biquad_coefficient,
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_biquad"][::std::mem::size_of::<ma_biquad>() - 64usize];
    ["Alignment of ma_biquad"][::std::mem::align_of::<ma_biquad>() - 8usize];
    ["Offset of field: ma_biquad::format"][::std::mem::offset_of!(ma_biquad, format) - 0usize];
    ["Offset of field: ma_biquad::channels"][::std::mem::offset_of!(ma_biquad, channels) - 4usize];
    ["Offset of field: ma_biquad::b0"][::std::mem::offset_of!(ma_biquad, b0) - 8usize];
    ["Offset of field: ma_biquad::b1"][::std::mem::offset_of!(ma_biquad, b1) - 12usize];
    ["Offset of field: ma_biquad::b2"][::std::mem::offset_of!(ma_biquad, b2) - 16usize];
    ["Offset of field: ma_biquad::a1"][::std::mem::offset_of!(ma_biquad, a1) - 20usize];
    ["Offset of field: ma_biquad::a2"][::std::mem::offset_of!(ma_biquad, a2) - 24usize];
    ["Offset of field: ma_biquad::pR1"][::std::mem::offset_of!(ma_biquad, pR1) - 32usize];
    ["Offset of field: ma_biquad::pR2"][::std::mem::offset_of!(ma_biquad, pR2) - 40usize];
    ["Offset of field: ma_biquad::_pHeap"][::std::mem::offset_of!(ma_biquad, _pHeap) - 48usize];
    ["Offset of field: ma_biquad::_ownsHeap"]
        [::std::mem::offset_of!(ma_biquad, _ownsHeap) - 56usize];
};
unsafe extern "C" {
    pub fn ma_biquad_get_heap_size(
        pConfig: *const ma_biquad_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_biquad_init_preallocated(
        pConfig: *const ma_biquad_config,
        pHeap: *mut ::std::os::raw::c_void,
        pBQ: *mut ma_biquad,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_biquad_init(
        pConfig: *const ma_biquad_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pBQ: *mut ma_biquad,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_biquad_uninit(
        pBQ: *mut ma_biquad,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
unsafe extern "C" {
    pub fn ma_biquad_reinit(pConfig: *const ma_biquad_config, pBQ: *mut ma_biquad) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_biquad_clear_cache(pBQ: *mut ma_biquad) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_biquad_process_pcm_frames(
        pBQ: *mut ma_biquad,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_biquad_get_latency(pBQ: *const ma_biquad) -> ma_uint32;
}
#[doc = "Low-Pass Filtering"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_lpf1_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub cutoffFrequency: f64,
    pub q: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_lpf1_config"][::std::mem::size_of::<ma_lpf1_config>() - 32usize];
    ["Alignment of ma_lpf1_config"][::std::mem::align_of::<ma_lpf1_config>() - 8usize];
    ["Offset of field: ma_lpf1_config::format"]
        [::std::mem::offset_of!(ma_lpf1_config, format) - 0usize];
    ["Offset of field: ma_lpf1_config::channels"]
        [::std::mem::offset_of!(ma_lpf1_config, channels) - 4usize];
    ["Offset of field: ma_lpf1_config::sampleRate"]
        [::std::mem::offset_of!(ma_lpf1_config, sampleRate) - 8usize];
    ["Offset of field: ma_lpf1_config::cutoffFrequency"]
        [::std::mem::offset_of!(ma_lpf1_config, cutoffFrequency) - 16usize];
    ["Offset of field: ma_lpf1_config::q"][::std::mem::offset_of!(ma_lpf1_config, q) - 24usize];
};
#[doc = "Low-Pass Filtering"]
pub type ma_lpf2_config = ma_lpf1_config;
unsafe extern "C" {
    pub fn ma_lpf1_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
    ) -> ma_lpf1_config;
}
unsafe extern "C" {
    pub fn ma_lpf2_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
        q: f64,
    ) -> ma_lpf2_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_lpf1 {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub a: ma_biquad_coefficient,
    pub pR1: *mut ma_biquad_coefficient,
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_lpf1"][::std::mem::size_of::<ma_lpf1>() - 40usize];
    ["Alignment of ma_lpf1"][::std::mem::align_of::<ma_lpf1>() - 8usize];
    ["Offset of field: ma_lpf1::format"][::std::mem::offset_of!(ma_lpf1, format) - 0usize];
    ["Offset of field: ma_lpf1::channels"][::std::mem::offset_of!(ma_lpf1, channels) - 4usize];
    ["Offset of field: ma_lpf1::a"][::std::mem::offset_of!(ma_lpf1, a) - 8usize];
    ["Offset of field: ma_lpf1::pR1"][::std::mem::offset_of!(ma_lpf1, pR1) - 16usize];
    ["Offset of field: ma_lpf1::_pHeap"][::std::mem::offset_of!(ma_lpf1, _pHeap) - 24usize];
    ["Offset of field: ma_lpf1::_ownsHeap"][::std::mem::offset_of!(ma_lpf1, _ownsHeap) - 32usize];
};
unsafe extern "C" {
    pub fn ma_lpf1_get_heap_size(
        pConfig: *const ma_lpf1_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_lpf1_init_preallocated(
        pConfig: *const ma_lpf1_config,
        pHeap: *mut ::std::os::raw::c_void,
        pLPF: *mut ma_lpf1,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_lpf1_init(
        pConfig: *const ma_lpf1_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pLPF: *mut ma_lpf1,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_lpf1_uninit(pLPF: *mut ma_lpf1, pAllocationCallbacks: *const ma_allocation_callbacks);
}
unsafe extern "C" {
    pub fn ma_lpf1_reinit(pConfig: *const ma_lpf1_config, pLPF: *mut ma_lpf1) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_lpf1_clear_cache(pLPF: *mut ma_lpf1) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_lpf1_process_pcm_frames(
        pLPF: *mut ma_lpf1,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_lpf1_get_latency(pLPF: *const ma_lpf1) -> ma_uint32;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_lpf2 {
    pub bq: ma_biquad,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_lpf2"][::std::mem::size_of::<ma_lpf2>() - 64usize];
    ["Alignment of ma_lpf2"][::std::mem::align_of::<ma_lpf2>() - 8usize];
    ["Offset of field: ma_lpf2::bq"][::std::mem::offset_of!(ma_lpf2, bq) - 0usize];
};
unsafe extern "C" {
    pub fn ma_lpf2_get_heap_size(
        pConfig: *const ma_lpf2_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_lpf2_init_preallocated(
        pConfig: *const ma_lpf2_config,
        pHeap: *mut ::std::os::raw::c_void,
        pHPF: *mut ma_lpf2,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_lpf2_init(
        pConfig: *const ma_lpf2_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pLPF: *mut ma_lpf2,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_lpf2_uninit(pLPF: *mut ma_lpf2, pAllocationCallbacks: *const ma_allocation_callbacks);
}
unsafe extern "C" {
    pub fn ma_lpf2_reinit(pConfig: *const ma_lpf2_config, pLPF: *mut ma_lpf2) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_lpf2_clear_cache(pLPF: *mut ma_lpf2) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_lpf2_process_pcm_frames(
        pLPF: *mut ma_lpf2,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_lpf2_get_latency(pLPF: *const ma_lpf2) -> ma_uint32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_lpf_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub cutoffFrequency: f64,
    pub order: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_lpf_config"][::std::mem::size_of::<ma_lpf_config>() - 32usize];
    ["Alignment of ma_lpf_config"][::std::mem::align_of::<ma_lpf_config>() - 8usize];
    ["Offset of field: ma_lpf_config::format"]
        [::std::mem::offset_of!(ma_lpf_config, format) - 0usize];
    ["Offset of field: ma_lpf_config::channels"]
        [::std::mem::offset_of!(ma_lpf_config, channels) - 4usize];
    ["Offset of field: ma_lpf_config::sampleRate"]
        [::std::mem::offset_of!(ma_lpf_config, sampleRate) - 8usize];
    ["Offset of field: ma_lpf_config::cutoffFrequency"]
        [::std::mem::offset_of!(ma_lpf_config, cutoffFrequency) - 16usize];
    ["Offset of field: ma_lpf_config::order"]
        [::std::mem::offset_of!(ma_lpf_config, order) - 24usize];
};
unsafe extern "C" {
    pub fn ma_lpf_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
        order: ma_uint32,
    ) -> ma_lpf_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_lpf {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub lpf1Count: ma_uint32,
    pub lpf2Count: ma_uint32,
    pub pLPF1: *mut ma_lpf1,
    pub pLPF2: *mut ma_lpf2,
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_lpf"][::std::mem::size_of::<ma_lpf>() - 56usize];
    ["Alignment of ma_lpf"][::std::mem::align_of::<ma_lpf>() - 8usize];
    ["Offset of field: ma_lpf::format"][::std::mem::offset_of!(ma_lpf, format) - 0usize];
    ["Offset of field: ma_lpf::channels"][::std::mem::offset_of!(ma_lpf, channels) - 4usize];
    ["Offset of field: ma_lpf::sampleRate"][::std::mem::offset_of!(ma_lpf, sampleRate) - 8usize];
    ["Offset of field: ma_lpf::lpf1Count"][::std::mem::offset_of!(ma_lpf, lpf1Count) - 12usize];
    ["Offset of field: ma_lpf::lpf2Count"][::std::mem::offset_of!(ma_lpf, lpf2Count) - 16usize];
    ["Offset of field: ma_lpf::pLPF1"][::std::mem::offset_of!(ma_lpf, pLPF1) - 24usize];
    ["Offset of field: ma_lpf::pLPF2"][::std::mem::offset_of!(ma_lpf, pLPF2) - 32usize];
    ["Offset of field: ma_lpf::_pHeap"][::std::mem::offset_of!(ma_lpf, _pHeap) - 40usize];
    ["Offset of field: ma_lpf::_ownsHeap"][::std::mem::offset_of!(ma_lpf, _ownsHeap) - 48usize];
};
unsafe extern "C" {
    pub fn ma_lpf_get_heap_size(
        pConfig: *const ma_lpf_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_lpf_init_preallocated(
        pConfig: *const ma_lpf_config,
        pHeap: *mut ::std::os::raw::c_void,
        pLPF: *mut ma_lpf,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_lpf_init(
        pConfig: *const ma_lpf_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pLPF: *mut ma_lpf,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_lpf_uninit(pLPF: *mut ma_lpf, pAllocationCallbacks: *const ma_allocation_callbacks);
}
unsafe extern "C" {
    pub fn ma_lpf_reinit(pConfig: *const ma_lpf_config, pLPF: *mut ma_lpf) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_lpf_clear_cache(pLPF: *mut ma_lpf) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_lpf_process_pcm_frames(
        pLPF: *mut ma_lpf,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_lpf_get_latency(pLPF: *const ma_lpf) -> ma_uint32;
}
#[doc = "High-Pass Filtering"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_hpf1_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub cutoffFrequency: f64,
    pub q: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_hpf1_config"][::std::mem::size_of::<ma_hpf1_config>() - 32usize];
    ["Alignment of ma_hpf1_config"][::std::mem::align_of::<ma_hpf1_config>() - 8usize];
    ["Offset of field: ma_hpf1_config::format"]
        [::std::mem::offset_of!(ma_hpf1_config, format) - 0usize];
    ["Offset of field: ma_hpf1_config::channels"]
        [::std::mem::offset_of!(ma_hpf1_config, channels) - 4usize];
    ["Offset of field: ma_hpf1_config::sampleRate"]
        [::std::mem::offset_of!(ma_hpf1_config, sampleRate) - 8usize];
    ["Offset of field: ma_hpf1_config::cutoffFrequency"]
        [::std::mem::offset_of!(ma_hpf1_config, cutoffFrequency) - 16usize];
    ["Offset of field: ma_hpf1_config::q"][::std::mem::offset_of!(ma_hpf1_config, q) - 24usize];
};
#[doc = "High-Pass Filtering"]
pub type ma_hpf2_config = ma_hpf1_config;
unsafe extern "C" {
    pub fn ma_hpf1_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
    ) -> ma_hpf1_config;
}
unsafe extern "C" {
    pub fn ma_hpf2_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
        q: f64,
    ) -> ma_hpf2_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_hpf1 {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub a: ma_biquad_coefficient,
    pub pR1: *mut ma_biquad_coefficient,
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_hpf1"][::std::mem::size_of::<ma_hpf1>() - 40usize];
    ["Alignment of ma_hpf1"][::std::mem::align_of::<ma_hpf1>() - 8usize];
    ["Offset of field: ma_hpf1::format"][::std::mem::offset_of!(ma_hpf1, format) - 0usize];
    ["Offset of field: ma_hpf1::channels"][::std::mem::offset_of!(ma_hpf1, channels) - 4usize];
    ["Offset of field: ma_hpf1::a"][::std::mem::offset_of!(ma_hpf1, a) - 8usize];
    ["Offset of field: ma_hpf1::pR1"][::std::mem::offset_of!(ma_hpf1, pR1) - 16usize];
    ["Offset of field: ma_hpf1::_pHeap"][::std::mem::offset_of!(ma_hpf1, _pHeap) - 24usize];
    ["Offset of field: ma_hpf1::_ownsHeap"][::std::mem::offset_of!(ma_hpf1, _ownsHeap) - 32usize];
};
unsafe extern "C" {
    pub fn ma_hpf1_get_heap_size(
        pConfig: *const ma_hpf1_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_hpf1_init_preallocated(
        pConfig: *const ma_hpf1_config,
        pHeap: *mut ::std::os::raw::c_void,
        pLPF: *mut ma_hpf1,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_hpf1_init(
        pConfig: *const ma_hpf1_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pHPF: *mut ma_hpf1,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_hpf1_uninit(pHPF: *mut ma_hpf1, pAllocationCallbacks: *const ma_allocation_callbacks);
}
unsafe extern "C" {
    pub fn ma_hpf1_reinit(pConfig: *const ma_hpf1_config, pHPF: *mut ma_hpf1) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_hpf1_process_pcm_frames(
        pHPF: *mut ma_hpf1,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_hpf1_get_latency(pHPF: *const ma_hpf1) -> ma_uint32;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_hpf2 {
    pub bq: ma_biquad,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_hpf2"][::std::mem::size_of::<ma_hpf2>() - 64usize];
    ["Alignment of ma_hpf2"][::std::mem::align_of::<ma_hpf2>() - 8usize];
    ["Offset of field: ma_hpf2::bq"][::std::mem::offset_of!(ma_hpf2, bq) - 0usize];
};
unsafe extern "C" {
    pub fn ma_hpf2_get_heap_size(
        pConfig: *const ma_hpf2_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_hpf2_init_preallocated(
        pConfig: *const ma_hpf2_config,
        pHeap: *mut ::std::os::raw::c_void,
        pHPF: *mut ma_hpf2,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_hpf2_init(
        pConfig: *const ma_hpf2_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pHPF: *mut ma_hpf2,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_hpf2_uninit(pHPF: *mut ma_hpf2, pAllocationCallbacks: *const ma_allocation_callbacks);
}
unsafe extern "C" {
    pub fn ma_hpf2_reinit(pConfig: *const ma_hpf2_config, pHPF: *mut ma_hpf2) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_hpf2_process_pcm_frames(
        pHPF: *mut ma_hpf2,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_hpf2_get_latency(pHPF: *const ma_hpf2) -> ma_uint32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_hpf_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub cutoffFrequency: f64,
    pub order: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_hpf_config"][::std::mem::size_of::<ma_hpf_config>() - 32usize];
    ["Alignment of ma_hpf_config"][::std::mem::align_of::<ma_hpf_config>() - 8usize];
    ["Offset of field: ma_hpf_config::format"]
        [::std::mem::offset_of!(ma_hpf_config, format) - 0usize];
    ["Offset of field: ma_hpf_config::channels"]
        [::std::mem::offset_of!(ma_hpf_config, channels) - 4usize];
    ["Offset of field: ma_hpf_config::sampleRate"]
        [::std::mem::offset_of!(ma_hpf_config, sampleRate) - 8usize];
    ["Offset of field: ma_hpf_config::cutoffFrequency"]
        [::std::mem::offset_of!(ma_hpf_config, cutoffFrequency) - 16usize];
    ["Offset of field: ma_hpf_config::order"]
        [::std::mem::offset_of!(ma_hpf_config, order) - 24usize];
};
unsafe extern "C" {
    pub fn ma_hpf_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
        order: ma_uint32,
    ) -> ma_hpf_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_hpf {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub hpf1Count: ma_uint32,
    pub hpf2Count: ma_uint32,
    pub pHPF1: *mut ma_hpf1,
    pub pHPF2: *mut ma_hpf2,
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_hpf"][::std::mem::size_of::<ma_hpf>() - 56usize];
    ["Alignment of ma_hpf"][::std::mem::align_of::<ma_hpf>() - 8usize];
    ["Offset of field: ma_hpf::format"][::std::mem::offset_of!(ma_hpf, format) - 0usize];
    ["Offset of field: ma_hpf::channels"][::std::mem::offset_of!(ma_hpf, channels) - 4usize];
    ["Offset of field: ma_hpf::sampleRate"][::std::mem::offset_of!(ma_hpf, sampleRate) - 8usize];
    ["Offset of field: ma_hpf::hpf1Count"][::std::mem::offset_of!(ma_hpf, hpf1Count) - 12usize];
    ["Offset of field: ma_hpf::hpf2Count"][::std::mem::offset_of!(ma_hpf, hpf2Count) - 16usize];
    ["Offset of field: ma_hpf::pHPF1"][::std::mem::offset_of!(ma_hpf, pHPF1) - 24usize];
    ["Offset of field: ma_hpf::pHPF2"][::std::mem::offset_of!(ma_hpf, pHPF2) - 32usize];
    ["Offset of field: ma_hpf::_pHeap"][::std::mem::offset_of!(ma_hpf, _pHeap) - 40usize];
    ["Offset of field: ma_hpf::_ownsHeap"][::std::mem::offset_of!(ma_hpf, _ownsHeap) - 48usize];
};
unsafe extern "C" {
    pub fn ma_hpf_get_heap_size(
        pConfig: *const ma_hpf_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_hpf_init_preallocated(
        pConfig: *const ma_hpf_config,
        pHeap: *mut ::std::os::raw::c_void,
        pLPF: *mut ma_hpf,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_hpf_init(
        pConfig: *const ma_hpf_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pHPF: *mut ma_hpf,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_hpf_uninit(pHPF: *mut ma_hpf, pAllocationCallbacks: *const ma_allocation_callbacks);
}
unsafe extern "C" {
    pub fn ma_hpf_reinit(pConfig: *const ma_hpf_config, pHPF: *mut ma_hpf) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_hpf_process_pcm_frames(
        pHPF: *mut ma_hpf,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_hpf_get_latency(pHPF: *const ma_hpf) -> ma_uint32;
}
#[doc = "Band-Pass Filtering"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_bpf2_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub cutoffFrequency: f64,
    pub q: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_bpf2_config"][::std::mem::size_of::<ma_bpf2_config>() - 32usize];
    ["Alignment of ma_bpf2_config"][::std::mem::align_of::<ma_bpf2_config>() - 8usize];
    ["Offset of field: ma_bpf2_config::format"]
        [::std::mem::offset_of!(ma_bpf2_config, format) - 0usize];
    ["Offset of field: ma_bpf2_config::channels"]
        [::std::mem::offset_of!(ma_bpf2_config, channels) - 4usize];
    ["Offset of field: ma_bpf2_config::sampleRate"]
        [::std::mem::offset_of!(ma_bpf2_config, sampleRate) - 8usize];
    ["Offset of field: ma_bpf2_config::cutoffFrequency"]
        [::std::mem::offset_of!(ma_bpf2_config, cutoffFrequency) - 16usize];
    ["Offset of field: ma_bpf2_config::q"][::std::mem::offset_of!(ma_bpf2_config, q) - 24usize];
};
unsafe extern "C" {
    pub fn ma_bpf2_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
        q: f64,
    ) -> ma_bpf2_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_bpf2 {
    pub bq: ma_biquad,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_bpf2"][::std::mem::size_of::<ma_bpf2>() - 64usize];
    ["Alignment of ma_bpf2"][::std::mem::align_of::<ma_bpf2>() - 8usize];
    ["Offset of field: ma_bpf2::bq"][::std::mem::offset_of!(ma_bpf2, bq) - 0usize];
};
unsafe extern "C" {
    pub fn ma_bpf2_get_heap_size(
        pConfig: *const ma_bpf2_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_bpf2_init_preallocated(
        pConfig: *const ma_bpf2_config,
        pHeap: *mut ::std::os::raw::c_void,
        pBPF: *mut ma_bpf2,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_bpf2_init(
        pConfig: *const ma_bpf2_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pBPF: *mut ma_bpf2,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_bpf2_uninit(pBPF: *mut ma_bpf2, pAllocationCallbacks: *const ma_allocation_callbacks);
}
unsafe extern "C" {
    pub fn ma_bpf2_reinit(pConfig: *const ma_bpf2_config, pBPF: *mut ma_bpf2) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_bpf2_process_pcm_frames(
        pBPF: *mut ma_bpf2,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_bpf2_get_latency(pBPF: *const ma_bpf2) -> ma_uint32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_bpf_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub cutoffFrequency: f64,
    pub order: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_bpf_config"][::std::mem::size_of::<ma_bpf_config>() - 32usize];
    ["Alignment of ma_bpf_config"][::std::mem::align_of::<ma_bpf_config>() - 8usize];
    ["Offset of field: ma_bpf_config::format"]
        [::std::mem::offset_of!(ma_bpf_config, format) - 0usize];
    ["Offset of field: ma_bpf_config::channels"]
        [::std::mem::offset_of!(ma_bpf_config, channels) - 4usize];
    ["Offset of field: ma_bpf_config::sampleRate"]
        [::std::mem::offset_of!(ma_bpf_config, sampleRate) - 8usize];
    ["Offset of field: ma_bpf_config::cutoffFrequency"]
        [::std::mem::offset_of!(ma_bpf_config, cutoffFrequency) - 16usize];
    ["Offset of field: ma_bpf_config::order"]
        [::std::mem::offset_of!(ma_bpf_config, order) - 24usize];
};
unsafe extern "C" {
    pub fn ma_bpf_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
        order: ma_uint32,
    ) -> ma_bpf_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_bpf {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub bpf2Count: ma_uint32,
    pub pBPF2: *mut ma_bpf2,
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_bpf"][::std::mem::size_of::<ma_bpf>() - 40usize];
    ["Alignment of ma_bpf"][::std::mem::align_of::<ma_bpf>() - 8usize];
    ["Offset of field: ma_bpf::format"][::std::mem::offset_of!(ma_bpf, format) - 0usize];
    ["Offset of field: ma_bpf::channels"][::std::mem::offset_of!(ma_bpf, channels) - 4usize];
    ["Offset of field: ma_bpf::bpf2Count"][::std::mem::offset_of!(ma_bpf, bpf2Count) - 8usize];
    ["Offset of field: ma_bpf::pBPF2"][::std::mem::offset_of!(ma_bpf, pBPF2) - 16usize];
    ["Offset of field: ma_bpf::_pHeap"][::std::mem::offset_of!(ma_bpf, _pHeap) - 24usize];
    ["Offset of field: ma_bpf::_ownsHeap"][::std::mem::offset_of!(ma_bpf, _ownsHeap) - 32usize];
};
unsafe extern "C" {
    pub fn ma_bpf_get_heap_size(
        pConfig: *const ma_bpf_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_bpf_init_preallocated(
        pConfig: *const ma_bpf_config,
        pHeap: *mut ::std::os::raw::c_void,
        pBPF: *mut ma_bpf,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_bpf_init(
        pConfig: *const ma_bpf_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pBPF: *mut ma_bpf,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_bpf_uninit(pBPF: *mut ma_bpf, pAllocationCallbacks: *const ma_allocation_callbacks);
}
unsafe extern "C" {
    pub fn ma_bpf_reinit(pConfig: *const ma_bpf_config, pBPF: *mut ma_bpf) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_bpf_process_pcm_frames(
        pBPF: *mut ma_bpf,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_bpf_get_latency(pBPF: *const ma_bpf) -> ma_uint32;
}
#[doc = "Notching Filter"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_notch2_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub q: f64,
    pub frequency: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_notch2_config"][::std::mem::size_of::<ma_notch2_config>() - 32usize];
    ["Alignment of ma_notch2_config"][::std::mem::align_of::<ma_notch2_config>() - 8usize];
    ["Offset of field: ma_notch2_config::format"]
        [::std::mem::offset_of!(ma_notch2_config, format) - 0usize];
    ["Offset of field: ma_notch2_config::channels"]
        [::std::mem::offset_of!(ma_notch2_config, channels) - 4usize];
    ["Offset of field: ma_notch2_config::sampleRate"]
        [::std::mem::offset_of!(ma_notch2_config, sampleRate) - 8usize];
    ["Offset of field: ma_notch2_config::q"][::std::mem::offset_of!(ma_notch2_config, q) - 16usize];
    ["Offset of field: ma_notch2_config::frequency"]
        [::std::mem::offset_of!(ma_notch2_config, frequency) - 24usize];
};
#[doc = "Notching Filter"]
pub type ma_notch_config = ma_notch2_config;
unsafe extern "C" {
    pub fn ma_notch2_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        q: f64,
        frequency: f64,
    ) -> ma_notch2_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_notch2 {
    pub bq: ma_biquad,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_notch2"][::std::mem::size_of::<ma_notch2>() - 64usize];
    ["Alignment of ma_notch2"][::std::mem::align_of::<ma_notch2>() - 8usize];
    ["Offset of field: ma_notch2::bq"][::std::mem::offset_of!(ma_notch2, bq) - 0usize];
};
unsafe extern "C" {
    pub fn ma_notch2_get_heap_size(
        pConfig: *const ma_notch2_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_notch2_init_preallocated(
        pConfig: *const ma_notch2_config,
        pHeap: *mut ::std::os::raw::c_void,
        pFilter: *mut ma_notch2,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_notch2_init(
        pConfig: *const ma_notch2_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pFilter: *mut ma_notch2,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_notch2_uninit(
        pFilter: *mut ma_notch2,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
unsafe extern "C" {
    pub fn ma_notch2_reinit(pConfig: *const ma_notch2_config, pFilter: *mut ma_notch2)
        -> ma_result;
}
unsafe extern "C" {
    pub fn ma_notch2_process_pcm_frames(
        pFilter: *mut ma_notch2,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_notch2_get_latency(pFilter: *const ma_notch2) -> ma_uint32;
}
#[doc = "Peaking EQ Filter"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_peak2_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub gainDB: f64,
    pub q: f64,
    pub frequency: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_peak2_config"][::std::mem::size_of::<ma_peak2_config>() - 40usize];
    ["Alignment of ma_peak2_config"][::std::mem::align_of::<ma_peak2_config>() - 8usize];
    ["Offset of field: ma_peak2_config::format"]
        [::std::mem::offset_of!(ma_peak2_config, format) - 0usize];
    ["Offset of field: ma_peak2_config::channels"]
        [::std::mem::offset_of!(ma_peak2_config, channels) - 4usize];
    ["Offset of field: ma_peak2_config::sampleRate"]
        [::std::mem::offset_of!(ma_peak2_config, sampleRate) - 8usize];
    ["Offset of field: ma_peak2_config::gainDB"]
        [::std::mem::offset_of!(ma_peak2_config, gainDB) - 16usize];
    ["Offset of field: ma_peak2_config::q"][::std::mem::offset_of!(ma_peak2_config, q) - 24usize];
    ["Offset of field: ma_peak2_config::frequency"]
        [::std::mem::offset_of!(ma_peak2_config, frequency) - 32usize];
};
#[doc = "Peaking EQ Filter"]
pub type ma_peak_config = ma_peak2_config;
unsafe extern "C" {
    pub fn ma_peak2_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        gainDB: f64,
        q: f64,
        frequency: f64,
    ) -> ma_peak2_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_peak2 {
    pub bq: ma_biquad,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_peak2"][::std::mem::size_of::<ma_peak2>() - 64usize];
    ["Alignment of ma_peak2"][::std::mem::align_of::<ma_peak2>() - 8usize];
    ["Offset of field: ma_peak2::bq"][::std::mem::offset_of!(ma_peak2, bq) - 0usize];
};
unsafe extern "C" {
    pub fn ma_peak2_get_heap_size(
        pConfig: *const ma_peak2_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_peak2_init_preallocated(
        pConfig: *const ma_peak2_config,
        pHeap: *mut ::std::os::raw::c_void,
        pFilter: *mut ma_peak2,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_peak2_init(
        pConfig: *const ma_peak2_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pFilter: *mut ma_peak2,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_peak2_uninit(
        pFilter: *mut ma_peak2,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
unsafe extern "C" {
    pub fn ma_peak2_reinit(pConfig: *const ma_peak2_config, pFilter: *mut ma_peak2) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_peak2_process_pcm_frames(
        pFilter: *mut ma_peak2,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_peak2_get_latency(pFilter: *const ma_peak2) -> ma_uint32;
}
#[doc = "Low Shelf Filter"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_loshelf2_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub gainDB: f64,
    pub shelfSlope: f64,
    pub frequency: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_loshelf2_config"][::std::mem::size_of::<ma_loshelf2_config>() - 40usize];
    ["Alignment of ma_loshelf2_config"][::std::mem::align_of::<ma_loshelf2_config>() - 8usize];
    ["Offset of field: ma_loshelf2_config::format"]
        [::std::mem::offset_of!(ma_loshelf2_config, format) - 0usize];
    ["Offset of field: ma_loshelf2_config::channels"]
        [::std::mem::offset_of!(ma_loshelf2_config, channels) - 4usize];
    ["Offset of field: ma_loshelf2_config::sampleRate"]
        [::std::mem::offset_of!(ma_loshelf2_config, sampleRate) - 8usize];
    ["Offset of field: ma_loshelf2_config::gainDB"]
        [::std::mem::offset_of!(ma_loshelf2_config, gainDB) - 16usize];
    ["Offset of field: ma_loshelf2_config::shelfSlope"]
        [::std::mem::offset_of!(ma_loshelf2_config, shelfSlope) - 24usize];
    ["Offset of field: ma_loshelf2_config::frequency"]
        [::std::mem::offset_of!(ma_loshelf2_config, frequency) - 32usize];
};
#[doc = "Low Shelf Filter"]
pub type ma_loshelf_config = ma_loshelf2_config;
unsafe extern "C" {
    pub fn ma_loshelf2_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        gainDB: f64,
        shelfSlope: f64,
        frequency: f64,
    ) -> ma_loshelf2_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_loshelf2 {
    pub bq: ma_biquad,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_loshelf2"][::std::mem::size_of::<ma_loshelf2>() - 64usize];
    ["Alignment of ma_loshelf2"][::std::mem::align_of::<ma_loshelf2>() - 8usize];
    ["Offset of field: ma_loshelf2::bq"][::std::mem::offset_of!(ma_loshelf2, bq) - 0usize];
};
unsafe extern "C" {
    pub fn ma_loshelf2_get_heap_size(
        pConfig: *const ma_loshelf2_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_loshelf2_init_preallocated(
        pConfig: *const ma_loshelf2_config,
        pHeap: *mut ::std::os::raw::c_void,
        pFilter: *mut ma_loshelf2,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_loshelf2_init(
        pConfig: *const ma_loshelf2_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pFilter: *mut ma_loshelf2,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_loshelf2_uninit(
        pFilter: *mut ma_loshelf2,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
unsafe extern "C" {
    pub fn ma_loshelf2_reinit(
        pConfig: *const ma_loshelf2_config,
        pFilter: *mut ma_loshelf2,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_loshelf2_process_pcm_frames(
        pFilter: *mut ma_loshelf2,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_loshelf2_get_latency(pFilter: *const ma_loshelf2) -> ma_uint32;
}
#[doc = "High Shelf Filter"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_hishelf2_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub gainDB: f64,
    pub shelfSlope: f64,
    pub frequency: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_hishelf2_config"][::std::mem::size_of::<ma_hishelf2_config>() - 40usize];
    ["Alignment of ma_hishelf2_config"][::std::mem::align_of::<ma_hishelf2_config>() - 8usize];
    ["Offset of field: ma_hishelf2_config::format"]
        [::std::mem::offset_of!(ma_hishelf2_config, format) - 0usize];
    ["Offset of field: ma_hishelf2_config::channels"]
        [::std::mem::offset_of!(ma_hishelf2_config, channels) - 4usize];
    ["Offset of field: ma_hishelf2_config::sampleRate"]
        [::std::mem::offset_of!(ma_hishelf2_config, sampleRate) - 8usize];
    ["Offset of field: ma_hishelf2_config::gainDB"]
        [::std::mem::offset_of!(ma_hishelf2_config, gainDB) - 16usize];
    ["Offset of field: ma_hishelf2_config::shelfSlope"]
        [::std::mem::offset_of!(ma_hishelf2_config, shelfSlope) - 24usize];
    ["Offset of field: ma_hishelf2_config::frequency"]
        [::std::mem::offset_of!(ma_hishelf2_config, frequency) - 32usize];
};
#[doc = "High Shelf Filter"]
pub type ma_hishelf_config = ma_hishelf2_config;
unsafe extern "C" {
    pub fn ma_hishelf2_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        gainDB: f64,
        shelfSlope: f64,
        frequency: f64,
    ) -> ma_hishelf2_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_hishelf2 {
    pub bq: ma_biquad,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_hishelf2"][::std::mem::size_of::<ma_hishelf2>() - 64usize];
    ["Alignment of ma_hishelf2"][::std::mem::align_of::<ma_hishelf2>() - 8usize];
    ["Offset of field: ma_hishelf2::bq"][::std::mem::offset_of!(ma_hishelf2, bq) - 0usize];
};
unsafe extern "C" {
    pub fn ma_hishelf2_get_heap_size(
        pConfig: *const ma_hishelf2_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_hishelf2_init_preallocated(
        pConfig: *const ma_hishelf2_config,
        pHeap: *mut ::std::os::raw::c_void,
        pFilter: *mut ma_hishelf2,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_hishelf2_init(
        pConfig: *const ma_hishelf2_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pFilter: *mut ma_hishelf2,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_hishelf2_uninit(
        pFilter: *mut ma_hishelf2,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
unsafe extern "C" {
    pub fn ma_hishelf2_reinit(
        pConfig: *const ma_hishelf2_config,
        pFilter: *mut ma_hishelf2,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_hishelf2_process_pcm_frames(
        pFilter: *mut ma_hishelf2,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_hishelf2_get_latency(pFilter: *const ma_hishelf2) -> ma_uint32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_delay_config {
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub delayInFrames: ma_uint32,
    pub delayStart: ma_bool32,
    pub wet: f32,
    pub dry: f32,
    pub decay: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_delay_config"][::std::mem::size_of::<ma_delay_config>() - 28usize];
    ["Alignment of ma_delay_config"][::std::mem::align_of::<ma_delay_config>() - 4usize];
    ["Offset of field: ma_delay_config::channels"]
        [::std::mem::offset_of!(ma_delay_config, channels) - 0usize];
    ["Offset of field: ma_delay_config::sampleRate"]
        [::std::mem::offset_of!(ma_delay_config, sampleRate) - 4usize];
    ["Offset of field: ma_delay_config::delayInFrames"]
        [::std::mem::offset_of!(ma_delay_config, delayInFrames) - 8usize];
    ["Offset of field: ma_delay_config::delayStart"]
        [::std::mem::offset_of!(ma_delay_config, delayStart) - 12usize];
    ["Offset of field: ma_delay_config::wet"]
        [::std::mem::offset_of!(ma_delay_config, wet) - 16usize];
    ["Offset of field: ma_delay_config::dry"]
        [::std::mem::offset_of!(ma_delay_config, dry) - 20usize];
    ["Offset of field: ma_delay_config::decay"]
        [::std::mem::offset_of!(ma_delay_config, decay) - 24usize];
};
unsafe extern "C" {
    pub fn ma_delay_config_init(
        channels: ma_uint32,
        sampleRate: ma_uint32,
        delayInFrames: ma_uint32,
        decay: f32,
    ) -> ma_delay_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_delay {
    pub config: ma_delay_config,
    pub cursor: ma_uint32,
    pub bufferSizeInFrames: ma_uint32,
    pub pBuffer: *mut f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_delay"][::std::mem::size_of::<ma_delay>() - 48usize];
    ["Alignment of ma_delay"][::std::mem::align_of::<ma_delay>() - 8usize];
    ["Offset of field: ma_delay::config"][::std::mem::offset_of!(ma_delay, config) - 0usize];
    ["Offset of field: ma_delay::cursor"][::std::mem::offset_of!(ma_delay, cursor) - 28usize];
    ["Offset of field: ma_delay::bufferSizeInFrames"]
        [::std::mem::offset_of!(ma_delay, bufferSizeInFrames) - 32usize];
    ["Offset of field: ma_delay::pBuffer"][::std::mem::offset_of!(ma_delay, pBuffer) - 40usize];
};
unsafe extern "C" {
    pub fn ma_delay_init(
        pConfig: *const ma_delay_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pDelay: *mut ma_delay,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_delay_uninit(
        pDelay: *mut ma_delay,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
unsafe extern "C" {
    pub fn ma_delay_process_pcm_frames(
        pDelay: *mut ma_delay,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_delay_set_wet(pDelay: *mut ma_delay, value: f32);
}
unsafe extern "C" {
    pub fn ma_delay_get_wet(pDelay: *const ma_delay) -> f32;
}
unsafe extern "C" {
    pub fn ma_delay_set_dry(pDelay: *mut ma_delay, value: f32);
}
unsafe extern "C" {
    pub fn ma_delay_get_dry(pDelay: *const ma_delay) -> f32;
}
unsafe extern "C" {
    pub fn ma_delay_set_decay(pDelay: *mut ma_delay, value: f32);
}
unsafe extern "C" {
    pub fn ma_delay_get_decay(pDelay: *const ma_delay) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_gainer_config {
    pub channels: ma_uint32,
    pub smoothTimeInFrames: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_gainer_config"][::std::mem::size_of::<ma_gainer_config>() - 8usize];
    ["Alignment of ma_gainer_config"][::std::mem::align_of::<ma_gainer_config>() - 4usize];
    ["Offset of field: ma_gainer_config::channels"]
        [::std::mem::offset_of!(ma_gainer_config, channels) - 0usize];
    ["Offset of field: ma_gainer_config::smoothTimeInFrames"]
        [::std::mem::offset_of!(ma_gainer_config, smoothTimeInFrames) - 4usize];
};
unsafe extern "C" {
    pub fn ma_gainer_config_init(
        channels: ma_uint32,
        smoothTimeInFrames: ma_uint32,
    ) -> ma_gainer_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_gainer {
    pub config: ma_gainer_config,
    pub t: ma_uint32,
    pub masterVolume: f32,
    pub pOldGains: *mut f32,
    pub pNewGains: *mut f32,
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_gainer"][::std::mem::size_of::<ma_gainer>() - 48usize];
    ["Alignment of ma_gainer"][::std::mem::align_of::<ma_gainer>() - 8usize];
    ["Offset of field: ma_gainer::config"][::std::mem::offset_of!(ma_gainer, config) - 0usize];
    ["Offset of field: ma_gainer::t"][::std::mem::offset_of!(ma_gainer, t) - 8usize];
    ["Offset of field: ma_gainer::masterVolume"]
        [::std::mem::offset_of!(ma_gainer, masterVolume) - 12usize];
    ["Offset of field: ma_gainer::pOldGains"]
        [::std::mem::offset_of!(ma_gainer, pOldGains) - 16usize];
    ["Offset of field: ma_gainer::pNewGains"]
        [::std::mem::offset_of!(ma_gainer, pNewGains) - 24usize];
    ["Offset of field: ma_gainer::_pHeap"][::std::mem::offset_of!(ma_gainer, _pHeap) - 32usize];
    ["Offset of field: ma_gainer::_ownsHeap"]
        [::std::mem::offset_of!(ma_gainer, _ownsHeap) - 40usize];
};
unsafe extern "C" {
    pub fn ma_gainer_get_heap_size(
        pConfig: *const ma_gainer_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_gainer_init_preallocated(
        pConfig: *const ma_gainer_config,
        pHeap: *mut ::std::os::raw::c_void,
        pGainer: *mut ma_gainer,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_gainer_init(
        pConfig: *const ma_gainer_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pGainer: *mut ma_gainer,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_gainer_uninit(
        pGainer: *mut ma_gainer,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
unsafe extern "C" {
    pub fn ma_gainer_process_pcm_frames(
        pGainer: *mut ma_gainer,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_gainer_set_gain(pGainer: *mut ma_gainer, newGain: f32) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_gainer_set_gains(pGainer: *mut ma_gainer, pNewGains: *mut f32) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_gainer_set_master_volume(pGainer: *mut ma_gainer, volume: f32) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_gainer_get_master_volume(pGainer: *const ma_gainer, pVolume: *mut f32) -> ma_result;
}
pub const ma_pan_mode_ma_pan_mode_balance: ma_pan_mode = 0;
pub const ma_pan_mode_ma_pan_mode_pan: ma_pan_mode = 1;
pub type ma_pan_mode = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_panner_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub mode: ma_pan_mode,
    pub pan: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_panner_config"][::std::mem::size_of::<ma_panner_config>() - 16usize];
    ["Alignment of ma_panner_config"][::std::mem::align_of::<ma_panner_config>() - 4usize];
    ["Offset of field: ma_panner_config::format"]
        [::std::mem::offset_of!(ma_panner_config, format) - 0usize];
    ["Offset of field: ma_panner_config::channels"]
        [::std::mem::offset_of!(ma_panner_config, channels) - 4usize];
    ["Offset of field: ma_panner_config::mode"]
        [::std::mem::offset_of!(ma_panner_config, mode) - 8usize];
    ["Offset of field: ma_panner_config::pan"]
        [::std::mem::offset_of!(ma_panner_config, pan) - 12usize];
};
unsafe extern "C" {
    pub fn ma_panner_config_init(format: ma_format, channels: ma_uint32) -> ma_panner_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_panner {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub mode: ma_pan_mode,
    pub pan: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_panner"][::std::mem::size_of::<ma_panner>() - 16usize];
    ["Alignment of ma_panner"][::std::mem::align_of::<ma_panner>() - 4usize];
    ["Offset of field: ma_panner::format"][::std::mem::offset_of!(ma_panner, format) - 0usize];
    ["Offset of field: ma_panner::channels"][::std::mem::offset_of!(ma_panner, channels) - 4usize];
    ["Offset of field: ma_panner::mode"][::std::mem::offset_of!(ma_panner, mode) - 8usize];
    ["Offset of field: ma_panner::pan"][::std::mem::offset_of!(ma_panner, pan) - 12usize];
};
unsafe extern "C" {
    pub fn ma_panner_init(pConfig: *const ma_panner_config, pPanner: *mut ma_panner) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_panner_process_pcm_frames(
        pPanner: *mut ma_panner,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_panner_set_mode(pPanner: *mut ma_panner, mode: ma_pan_mode);
}
unsafe extern "C" {
    pub fn ma_panner_get_mode(pPanner: *const ma_panner) -> ma_pan_mode;
}
unsafe extern "C" {
    pub fn ma_panner_set_pan(pPanner: *mut ma_panner, pan: f32);
}
unsafe extern "C" {
    pub fn ma_panner_get_pan(pPanner: *const ma_panner) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_fader_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_fader_config"][::std::mem::size_of::<ma_fader_config>() - 12usize];
    ["Alignment of ma_fader_config"][::std::mem::align_of::<ma_fader_config>() - 4usize];
    ["Offset of field: ma_fader_config::format"]
        [::std::mem::offset_of!(ma_fader_config, format) - 0usize];
    ["Offset of field: ma_fader_config::channels"]
        [::std::mem::offset_of!(ma_fader_config, channels) - 4usize];
    ["Offset of field: ma_fader_config::sampleRate"]
        [::std::mem::offset_of!(ma_fader_config, sampleRate) - 8usize];
};
unsafe extern "C" {
    pub fn ma_fader_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
    ) -> ma_fader_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_fader {
    pub config: ma_fader_config,
    pub volumeBeg: f32,
    pub volumeEnd: f32,
    pub lengthInFrames: ma_uint64,
    pub cursorInFrames: ma_int64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_fader"][::std::mem::size_of::<ma_fader>() - 40usize];
    ["Alignment of ma_fader"][::std::mem::align_of::<ma_fader>() - 8usize];
    ["Offset of field: ma_fader::config"][::std::mem::offset_of!(ma_fader, config) - 0usize];
    ["Offset of field: ma_fader::volumeBeg"][::std::mem::offset_of!(ma_fader, volumeBeg) - 12usize];
    ["Offset of field: ma_fader::volumeEnd"][::std::mem::offset_of!(ma_fader, volumeEnd) - 16usize];
    ["Offset of field: ma_fader::lengthInFrames"]
        [::std::mem::offset_of!(ma_fader, lengthInFrames) - 24usize];
    ["Offset of field: ma_fader::cursorInFrames"]
        [::std::mem::offset_of!(ma_fader, cursorInFrames) - 32usize];
};
unsafe extern "C" {
    pub fn ma_fader_init(pConfig: *const ma_fader_config, pFader: *mut ma_fader) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_fader_process_pcm_frames(
        pFader: *mut ma_fader,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_fader_get_data_format(
        pFader: *const ma_fader,
        pFormat: *mut ma_format,
        pChannels: *mut ma_uint32,
        pSampleRate: *mut ma_uint32,
    );
}
unsafe extern "C" {
    pub fn ma_fader_set_fade(
        pFader: *mut ma_fader,
        volumeBeg: f32,
        volumeEnd: f32,
        lengthInFrames: ma_uint64,
    );
}
unsafe extern "C" {
    pub fn ma_fader_set_fade_ex(
        pFader: *mut ma_fader,
        volumeBeg: f32,
        volumeEnd: f32,
        lengthInFrames: ma_uint64,
        startOffsetInFrames: ma_int64,
    );
}
unsafe extern "C" {
    pub fn ma_fader_get_current_volume(pFader: *const ma_fader) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_vec3f {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_vec3f"][::std::mem::size_of::<ma_vec3f>() - 12usize];
    ["Alignment of ma_vec3f"][::std::mem::align_of::<ma_vec3f>() - 4usize];
    ["Offset of field: ma_vec3f::x"][::std::mem::offset_of!(ma_vec3f, x) - 0usize];
    ["Offset of field: ma_vec3f::y"][::std::mem::offset_of!(ma_vec3f, y) - 4usize];
    ["Offset of field: ma_vec3f::z"][::std::mem::offset_of!(ma_vec3f, z) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_atomic_vec3f {
    pub v: ma_vec3f,
    pub lock: ma_spinlock,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_atomic_vec3f"][::std::mem::size_of::<ma_atomic_vec3f>() - 16usize];
    ["Alignment of ma_atomic_vec3f"][::std::mem::align_of::<ma_atomic_vec3f>() - 4usize];
    ["Offset of field: ma_atomic_vec3f::v"][::std::mem::offset_of!(ma_atomic_vec3f, v) - 0usize];
    ["Offset of field: ma_atomic_vec3f::lock"]
        [::std::mem::offset_of!(ma_atomic_vec3f, lock) - 12usize];
};
pub const ma_attenuation_model_ma_attenuation_model_none: ma_attenuation_model = 0;
pub const ma_attenuation_model_ma_attenuation_model_inverse: ma_attenuation_model = 1;
pub const ma_attenuation_model_ma_attenuation_model_linear: ma_attenuation_model = 2;
pub const ma_attenuation_model_ma_attenuation_model_exponential: ma_attenuation_model = 3;
pub type ma_attenuation_model = ::std::os::raw::c_int;
pub const ma_positioning_ma_positioning_absolute: ma_positioning = 0;
pub const ma_positioning_ma_positioning_relative: ma_positioning = 1;
pub type ma_positioning = ::std::os::raw::c_int;
pub const ma_handedness_ma_handedness_right: ma_handedness = 0;
pub const ma_handedness_ma_handedness_left: ma_handedness = 1;
pub type ma_handedness = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_spatializer_listener_config {
    pub channelsOut: ma_uint32,
    pub pChannelMapOut: *mut ma_channel,
    pub handedness: ma_handedness,
    pub coneInnerAngleInRadians: f32,
    pub coneOuterAngleInRadians: f32,
    pub coneOuterGain: f32,
    pub speedOfSound: f32,
    pub worldUp: ma_vec3f,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_spatializer_listener_config"]
        [::std::mem::size_of::<ma_spatializer_listener_config>() - 48usize];
    ["Alignment of ma_spatializer_listener_config"]
        [::std::mem::align_of::<ma_spatializer_listener_config>() - 8usize];
    ["Offset of field: ma_spatializer_listener_config::channelsOut"]
        [::std::mem::offset_of!(ma_spatializer_listener_config, channelsOut) - 0usize];
    ["Offset of field: ma_spatializer_listener_config::pChannelMapOut"]
        [::std::mem::offset_of!(ma_spatializer_listener_config, pChannelMapOut) - 8usize];
    ["Offset of field: ma_spatializer_listener_config::handedness"]
        [::std::mem::offset_of!(ma_spatializer_listener_config, handedness) - 16usize];
    ["Offset of field: ma_spatializer_listener_config::coneInnerAngleInRadians"]
        [::std::mem::offset_of!(ma_spatializer_listener_config, coneInnerAngleInRadians) - 20usize];
    ["Offset of field: ma_spatializer_listener_config::coneOuterAngleInRadians"]
        [::std::mem::offset_of!(ma_spatializer_listener_config, coneOuterAngleInRadians) - 24usize];
    ["Offset of field: ma_spatializer_listener_config::coneOuterGain"]
        [::std::mem::offset_of!(ma_spatializer_listener_config, coneOuterGain) - 28usize];
    ["Offset of field: ma_spatializer_listener_config::speedOfSound"]
        [::std::mem::offset_of!(ma_spatializer_listener_config, speedOfSound) - 32usize];
    ["Offset of field: ma_spatializer_listener_config::worldUp"]
        [::std::mem::offset_of!(ma_spatializer_listener_config, worldUp) - 36usize];
};
unsafe extern "C" {
    pub fn ma_spatializer_listener_config_init(
        channelsOut: ma_uint32,
    ) -> ma_spatializer_listener_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_spatializer_listener {
    pub config: ma_spatializer_listener_config,
    pub position: ma_atomic_vec3f,
    pub direction: ma_atomic_vec3f,
    pub velocity: ma_atomic_vec3f,
    pub isEnabled: ma_bool32,
    pub _ownsHeap: ma_bool32,
    pub _pHeap: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_spatializer_listener"]
        [::std::mem::size_of::<ma_spatializer_listener>() - 112usize];
    ["Alignment of ma_spatializer_listener"]
        [::std::mem::align_of::<ma_spatializer_listener>() - 8usize];
    ["Offset of field: ma_spatializer_listener::config"]
        [::std::mem::offset_of!(ma_spatializer_listener, config) - 0usize];
    ["Offset of field: ma_spatializer_listener::position"]
        [::std::mem::offset_of!(ma_spatializer_listener, position) - 48usize];
    ["Offset of field: ma_spatializer_listener::direction"]
        [::std::mem::offset_of!(ma_spatializer_listener, direction) - 64usize];
    ["Offset of field: ma_spatializer_listener::velocity"]
        [::std::mem::offset_of!(ma_spatializer_listener, velocity) - 80usize];
    ["Offset of field: ma_spatializer_listener::isEnabled"]
        [::std::mem::offset_of!(ma_spatializer_listener, isEnabled) - 96usize];
    ["Offset of field: ma_spatializer_listener::_ownsHeap"]
        [::std::mem::offset_of!(ma_spatializer_listener, _ownsHeap) - 100usize];
    ["Offset of field: ma_spatializer_listener::_pHeap"]
        [::std::mem::offset_of!(ma_spatializer_listener, _pHeap) - 104usize];
};
unsafe extern "C" {
    pub fn ma_spatializer_listener_get_heap_size(
        pConfig: *const ma_spatializer_listener_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_spatializer_listener_init_preallocated(
        pConfig: *const ma_spatializer_listener_config,
        pHeap: *mut ::std::os::raw::c_void,
        pListener: *mut ma_spatializer_listener,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_spatializer_listener_init(
        pConfig: *const ma_spatializer_listener_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pListener: *mut ma_spatializer_listener,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_spatializer_listener_uninit(
        pListener: *mut ma_spatializer_listener,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
unsafe extern "C" {
    pub fn ma_spatializer_listener_get_channel_map(
        pListener: *mut ma_spatializer_listener,
    ) -> *mut ma_channel;
}
unsafe extern "C" {
    pub fn ma_spatializer_listener_set_cone(
        pListener: *mut ma_spatializer_listener,
        innerAngleInRadians: f32,
        outerAngleInRadians: f32,
        outerGain: f32,
    );
}
unsafe extern "C" {
    pub fn ma_spatializer_listener_get_cone(
        pListener: *const ma_spatializer_listener,
        pInnerAngleInRadians: *mut f32,
        pOuterAngleInRadians: *mut f32,
        pOuterGain: *mut f32,
    );
}
unsafe extern "C" {
    pub fn ma_spatializer_listener_set_position(
        pListener: *mut ma_spatializer_listener,
        x: f32,
        y: f32,
        z: f32,
    );
}
unsafe extern "C" {
    pub fn ma_spatializer_listener_get_position(
        pListener: *const ma_spatializer_listener,
    ) -> ma_vec3f;
}
unsafe extern "C" {
    pub fn ma_spatializer_listener_set_direction(
        pListener: *mut ma_spatializer_listener,
        x: f32,
        y: f32,
        z: f32,
    );
}
unsafe extern "C" {
    pub fn ma_spatializer_listener_get_direction(
        pListener: *const ma_spatializer_listener,
    ) -> ma_vec3f;
}
unsafe extern "C" {
    pub fn ma_spatializer_listener_set_velocity(
        pListener: *mut ma_spatializer_listener,
        x: f32,
        y: f32,
        z: f32,
    );
}
unsafe extern "C" {
    pub fn ma_spatializer_listener_get_velocity(
        pListener: *const ma_spatializer_listener,
    ) -> ma_vec3f;
}
unsafe extern "C" {
    pub fn ma_spatializer_listener_set_speed_of_sound(
        pListener: *mut ma_spatializer_listener,
        speedOfSound: f32,
    );
}
unsafe extern "C" {
    pub fn ma_spatializer_listener_get_speed_of_sound(
        pListener: *const ma_spatializer_listener,
    ) -> f32;
}
unsafe extern "C" {
    pub fn ma_spatializer_listener_set_world_up(
        pListener: *mut ma_spatializer_listener,
        x: f32,
        y: f32,
        z: f32,
    );
}
unsafe extern "C" {
    pub fn ma_spatializer_listener_get_world_up(
        pListener: *const ma_spatializer_listener,
    ) -> ma_vec3f;
}
unsafe extern "C" {
    pub fn ma_spatializer_listener_set_enabled(
        pListener: *mut ma_spatializer_listener,
        isEnabled: ma_bool32,
    );
}
unsafe extern "C" {
    pub fn ma_spatializer_listener_is_enabled(
        pListener: *const ma_spatializer_listener,
    ) -> ma_bool32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_spatializer_config {
    pub channelsIn: ma_uint32,
    pub channelsOut: ma_uint32,
    pub pChannelMapIn: *mut ma_channel,
    pub attenuationModel: ma_attenuation_model,
    pub positioning: ma_positioning,
    pub handedness: ma_handedness,
    pub minGain: f32,
    pub maxGain: f32,
    pub minDistance: f32,
    pub maxDistance: f32,
    pub rolloff: f32,
    pub coneInnerAngleInRadians: f32,
    pub coneOuterAngleInRadians: f32,
    pub coneOuterGain: f32,
    pub dopplerFactor: f32,
    pub directionalAttenuationFactor: f32,
    pub minSpatializationChannelGain: f32,
    pub gainSmoothTimeInFrames: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_spatializer_config"][::std::mem::size_of::<ma_spatializer_config>() - 80usize];
    ["Alignment of ma_spatializer_config"]
        [::std::mem::align_of::<ma_spatializer_config>() - 8usize];
    ["Offset of field: ma_spatializer_config::channelsIn"]
        [::std::mem::offset_of!(ma_spatializer_config, channelsIn) - 0usize];
    ["Offset of field: ma_spatializer_config::channelsOut"]
        [::std::mem::offset_of!(ma_spatializer_config, channelsOut) - 4usize];
    ["Offset of field: ma_spatializer_config::pChannelMapIn"]
        [::std::mem::offset_of!(ma_spatializer_config, pChannelMapIn) - 8usize];
    ["Offset of field: ma_spatializer_config::attenuationModel"]
        [::std::mem::offset_of!(ma_spatializer_config, attenuationModel) - 16usize];
    ["Offset of field: ma_spatializer_config::positioning"]
        [::std::mem::offset_of!(ma_spatializer_config, positioning) - 20usize];
    ["Offset of field: ma_spatializer_config::handedness"]
        [::std::mem::offset_of!(ma_spatializer_config, handedness) - 24usize];
    ["Offset of field: ma_spatializer_config::minGain"]
        [::std::mem::offset_of!(ma_spatializer_config, minGain) - 28usize];
    ["Offset of field: ma_spatializer_config::maxGain"]
        [::std::mem::offset_of!(ma_spatializer_config, maxGain) - 32usize];
    ["Offset of field: ma_spatializer_config::minDistance"]
        [::std::mem::offset_of!(ma_spatializer_config, minDistance) - 36usize];
    ["Offset of field: ma_spatializer_config::maxDistance"]
        [::std::mem::offset_of!(ma_spatializer_config, maxDistance) - 40usize];
    ["Offset of field: ma_spatializer_config::rolloff"]
        [::std::mem::offset_of!(ma_spatializer_config, rolloff) - 44usize];
    ["Offset of field: ma_spatializer_config::coneInnerAngleInRadians"]
        [::std::mem::offset_of!(ma_spatializer_config, coneInnerAngleInRadians) - 48usize];
    ["Offset of field: ma_spatializer_config::coneOuterAngleInRadians"]
        [::std::mem::offset_of!(ma_spatializer_config, coneOuterAngleInRadians) - 52usize];
    ["Offset of field: ma_spatializer_config::coneOuterGain"]
        [::std::mem::offset_of!(ma_spatializer_config, coneOuterGain) - 56usize];
    ["Offset of field: ma_spatializer_config::dopplerFactor"]
        [::std::mem::offset_of!(ma_spatializer_config, dopplerFactor) - 60usize];
    ["Offset of field: ma_spatializer_config::directionalAttenuationFactor"]
        [::std::mem::offset_of!(ma_spatializer_config, directionalAttenuationFactor) - 64usize];
    ["Offset of field: ma_spatializer_config::minSpatializationChannelGain"]
        [::std::mem::offset_of!(ma_spatializer_config, minSpatializationChannelGain) - 68usize];
    ["Offset of field: ma_spatializer_config::gainSmoothTimeInFrames"]
        [::std::mem::offset_of!(ma_spatializer_config, gainSmoothTimeInFrames) - 72usize];
};
unsafe extern "C" {
    pub fn ma_spatializer_config_init(
        channelsIn: ma_uint32,
        channelsOut: ma_uint32,
    ) -> ma_spatializer_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_spatializer {
    pub channelsIn: ma_uint32,
    pub channelsOut: ma_uint32,
    pub pChannelMapIn: *mut ma_channel,
    pub attenuationModel: ma_attenuation_model,
    pub positioning: ma_positioning,
    pub handedness: ma_handedness,
    pub minGain: f32,
    pub maxGain: f32,
    pub minDistance: f32,
    pub maxDistance: f32,
    pub rolloff: f32,
    pub coneInnerAngleInRadians: f32,
    pub coneOuterAngleInRadians: f32,
    pub coneOuterGain: f32,
    pub dopplerFactor: f32,
    pub directionalAttenuationFactor: f32,
    pub gainSmoothTimeInFrames: ma_uint32,
    pub position: ma_atomic_vec3f,
    pub direction: ma_atomic_vec3f,
    pub velocity: ma_atomic_vec3f,
    pub dopplerPitch: f32,
    pub minSpatializationChannelGain: f32,
    pub gainer: ma_gainer,
    pub pNewChannelGainsOut: *mut f32,
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_spatializer"][::std::mem::size_of::<ma_spatializer>() - 200usize];
    ["Alignment of ma_spatializer"][::std::mem::align_of::<ma_spatializer>() - 8usize];
    ["Offset of field: ma_spatializer::channelsIn"]
        [::std::mem::offset_of!(ma_spatializer, channelsIn) - 0usize];
    ["Offset of field: ma_spatializer::channelsOut"]
        [::std::mem::offset_of!(ma_spatializer, channelsOut) - 4usize];
    ["Offset of field: ma_spatializer::pChannelMapIn"]
        [::std::mem::offset_of!(ma_spatializer, pChannelMapIn) - 8usize];
    ["Offset of field: ma_spatializer::attenuationModel"]
        [::std::mem::offset_of!(ma_spatializer, attenuationModel) - 16usize];
    ["Offset of field: ma_spatializer::positioning"]
        [::std::mem::offset_of!(ma_spatializer, positioning) - 20usize];
    ["Offset of field: ma_spatializer::handedness"]
        [::std::mem::offset_of!(ma_spatializer, handedness) - 24usize];
    ["Offset of field: ma_spatializer::minGain"]
        [::std::mem::offset_of!(ma_spatializer, minGain) - 28usize];
    ["Offset of field: ma_spatializer::maxGain"]
        [::std::mem::offset_of!(ma_spatializer, maxGain) - 32usize];
    ["Offset of field: ma_spatializer::minDistance"]
        [::std::mem::offset_of!(ma_spatializer, minDistance) - 36usize];
    ["Offset of field: ma_spatializer::maxDistance"]
        [::std::mem::offset_of!(ma_spatializer, maxDistance) - 40usize];
    ["Offset of field: ma_spatializer::rolloff"]
        [::std::mem::offset_of!(ma_spatializer, rolloff) - 44usize];
    ["Offset of field: ma_spatializer::coneInnerAngleInRadians"]
        [::std::mem::offset_of!(ma_spatializer, coneInnerAngleInRadians) - 48usize];
    ["Offset of field: ma_spatializer::coneOuterAngleInRadians"]
        [::std::mem::offset_of!(ma_spatializer, coneOuterAngleInRadians) - 52usize];
    ["Offset of field: ma_spatializer::coneOuterGain"]
        [::std::mem::offset_of!(ma_spatializer, coneOuterGain) - 56usize];
    ["Offset of field: ma_spatializer::dopplerFactor"]
        [::std::mem::offset_of!(ma_spatializer, dopplerFactor) - 60usize];
    ["Offset of field: ma_spatializer::directionalAttenuationFactor"]
        [::std::mem::offset_of!(ma_spatializer, directionalAttenuationFactor) - 64usize];
    ["Offset of field: ma_spatializer::gainSmoothTimeInFrames"]
        [::std::mem::offset_of!(ma_spatializer, gainSmoothTimeInFrames) - 68usize];
    ["Offset of field: ma_spatializer::position"]
        [::std::mem::offset_of!(ma_spatializer, position) - 72usize];
    ["Offset of field: ma_spatializer::direction"]
        [::std::mem::offset_of!(ma_spatializer, direction) - 88usize];
    ["Offset of field: ma_spatializer::velocity"]
        [::std::mem::offset_of!(ma_spatializer, velocity) - 104usize];
    ["Offset of field: ma_spatializer::dopplerPitch"]
        [::std::mem::offset_of!(ma_spatializer, dopplerPitch) - 120usize];
    ["Offset of field: ma_spatializer::minSpatializationChannelGain"]
        [::std::mem::offset_of!(ma_spatializer, minSpatializationChannelGain) - 124usize];
    ["Offset of field: ma_spatializer::gainer"]
        [::std::mem::offset_of!(ma_spatializer, gainer) - 128usize];
    ["Offset of field: ma_spatializer::pNewChannelGainsOut"]
        [::std::mem::offset_of!(ma_spatializer, pNewChannelGainsOut) - 176usize];
    ["Offset of field: ma_spatializer::_pHeap"]
        [::std::mem::offset_of!(ma_spatializer, _pHeap) - 184usize];
    ["Offset of field: ma_spatializer::_ownsHeap"]
        [::std::mem::offset_of!(ma_spatializer, _ownsHeap) - 192usize];
};
unsafe extern "C" {
    pub fn ma_spatializer_get_heap_size(
        pConfig: *const ma_spatializer_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_spatializer_init_preallocated(
        pConfig: *const ma_spatializer_config,
        pHeap: *mut ::std::os::raw::c_void,
        pSpatializer: *mut ma_spatializer,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_spatializer_init(
        pConfig: *const ma_spatializer_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pSpatializer: *mut ma_spatializer,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_spatializer_uninit(
        pSpatializer: *mut ma_spatializer,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
unsafe extern "C" {
    pub fn ma_spatializer_process_pcm_frames(
        pSpatializer: *mut ma_spatializer,
        pListener: *mut ma_spatializer_listener,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_spatializer_set_master_volume(
        pSpatializer: *mut ma_spatializer,
        volume: f32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_spatializer_get_master_volume(
        pSpatializer: *const ma_spatializer,
        pVolume: *mut f32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_spatializer_get_input_channels(pSpatializer: *const ma_spatializer) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_spatializer_get_output_channels(pSpatializer: *const ma_spatializer) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_spatializer_set_attenuation_model(
        pSpatializer: *mut ma_spatializer,
        attenuationModel: ma_attenuation_model,
    );
}
unsafe extern "C" {
    pub fn ma_spatializer_get_attenuation_model(
        pSpatializer: *const ma_spatializer,
    ) -> ma_attenuation_model;
}
unsafe extern "C" {
    pub fn ma_spatializer_set_positioning(
        pSpatializer: *mut ma_spatializer,
        positioning: ma_positioning,
    );
}
unsafe extern "C" {
    pub fn ma_spatializer_get_positioning(pSpatializer: *const ma_spatializer) -> ma_positioning;
}
unsafe extern "C" {
    pub fn ma_spatializer_set_rolloff(pSpatializer: *mut ma_spatializer, rolloff: f32);
}
unsafe extern "C" {
    pub fn ma_spatializer_get_rolloff(pSpatializer: *const ma_spatializer) -> f32;
}
unsafe extern "C" {
    pub fn ma_spatializer_set_min_gain(pSpatializer: *mut ma_spatializer, minGain: f32);
}
unsafe extern "C" {
    pub fn ma_spatializer_get_min_gain(pSpatializer: *const ma_spatializer) -> f32;
}
unsafe extern "C" {
    pub fn ma_spatializer_set_max_gain(pSpatializer: *mut ma_spatializer, maxGain: f32);
}
unsafe extern "C" {
    pub fn ma_spatializer_get_max_gain(pSpatializer: *const ma_spatializer) -> f32;
}
unsafe extern "C" {
    pub fn ma_spatializer_set_min_distance(pSpatializer: *mut ma_spatializer, minDistance: f32);
}
unsafe extern "C" {
    pub fn ma_spatializer_get_min_distance(pSpatializer: *const ma_spatializer) -> f32;
}
unsafe extern "C" {
    pub fn ma_spatializer_set_max_distance(pSpatializer: *mut ma_spatializer, maxDistance: f32);
}
unsafe extern "C" {
    pub fn ma_spatializer_get_max_distance(pSpatializer: *const ma_spatializer) -> f32;
}
unsafe extern "C" {
    pub fn ma_spatializer_set_cone(
        pSpatializer: *mut ma_spatializer,
        innerAngleInRadians: f32,
        outerAngleInRadians: f32,
        outerGain: f32,
    );
}
unsafe extern "C" {
    pub fn ma_spatializer_get_cone(
        pSpatializer: *const ma_spatializer,
        pInnerAngleInRadians: *mut f32,
        pOuterAngleInRadians: *mut f32,
        pOuterGain: *mut f32,
    );
}
unsafe extern "C" {
    pub fn ma_spatializer_set_doppler_factor(pSpatializer: *mut ma_spatializer, dopplerFactor: f32);
}
unsafe extern "C" {
    pub fn ma_spatializer_get_doppler_factor(pSpatializer: *const ma_spatializer) -> f32;
}
unsafe extern "C" {
    pub fn ma_spatializer_set_directional_attenuation_factor(
        pSpatializer: *mut ma_spatializer,
        directionalAttenuationFactor: f32,
    );
}
unsafe extern "C" {
    pub fn ma_spatializer_get_directional_attenuation_factor(
        pSpatializer: *const ma_spatializer,
    ) -> f32;
}
unsafe extern "C" {
    pub fn ma_spatializer_set_position(pSpatializer: *mut ma_spatializer, x: f32, y: f32, z: f32);
}
unsafe extern "C" {
    pub fn ma_spatializer_get_position(pSpatializer: *const ma_spatializer) -> ma_vec3f;
}
unsafe extern "C" {
    pub fn ma_spatializer_set_direction(pSpatializer: *mut ma_spatializer, x: f32, y: f32, z: f32);
}
unsafe extern "C" {
    pub fn ma_spatializer_get_direction(pSpatializer: *const ma_spatializer) -> ma_vec3f;
}
unsafe extern "C" {
    pub fn ma_spatializer_set_velocity(pSpatializer: *mut ma_spatializer, x: f32, y: f32, z: f32);
}
unsafe extern "C" {
    pub fn ma_spatializer_get_velocity(pSpatializer: *const ma_spatializer) -> ma_vec3f;
}
unsafe extern "C" {
    pub fn ma_spatializer_get_relative_position_and_direction(
        pSpatializer: *const ma_spatializer,
        pListener: *const ma_spatializer_listener,
        pRelativePos: *mut ma_vec3f,
        pRelativeDir: *mut ma_vec3f,
    );
}
#[doc = "Resampling"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_linear_resampler_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRateIn: ma_uint32,
    pub sampleRateOut: ma_uint32,
    pub lpfOrder: ma_uint32,
    pub lpfNyquistFactor: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_linear_resampler_config"]
        [::std::mem::size_of::<ma_linear_resampler_config>() - 32usize];
    ["Alignment of ma_linear_resampler_config"]
        [::std::mem::align_of::<ma_linear_resampler_config>() - 8usize];
    ["Offset of field: ma_linear_resampler_config::format"]
        [::std::mem::offset_of!(ma_linear_resampler_config, format) - 0usize];
    ["Offset of field: ma_linear_resampler_config::channels"]
        [::std::mem::offset_of!(ma_linear_resampler_config, channels) - 4usize];
    ["Offset of field: ma_linear_resampler_config::sampleRateIn"]
        [::std::mem::offset_of!(ma_linear_resampler_config, sampleRateIn) - 8usize];
    ["Offset of field: ma_linear_resampler_config::sampleRateOut"]
        [::std::mem::offset_of!(ma_linear_resampler_config, sampleRateOut) - 12usize];
    ["Offset of field: ma_linear_resampler_config::lpfOrder"]
        [::std::mem::offset_of!(ma_linear_resampler_config, lpfOrder) - 16usize];
    ["Offset of field: ma_linear_resampler_config::lpfNyquistFactor"]
        [::std::mem::offset_of!(ma_linear_resampler_config, lpfNyquistFactor) - 24usize];
};
unsafe extern "C" {
    pub fn ma_linear_resampler_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRateIn: ma_uint32,
        sampleRateOut: ma_uint32,
    ) -> ma_linear_resampler_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_linear_resampler {
    pub config: ma_linear_resampler_config,
    pub inAdvanceInt: ma_uint32,
    pub inAdvanceFrac: ma_uint32,
    pub inTimeInt: ma_uint32,
    pub inTimeFrac: ma_uint32,
    pub x0: ma_linear_resampler__bindgen_ty_1,
    pub x1: ma_linear_resampler__bindgen_ty_2,
    pub lpf: ma_lpf,
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_linear_resampler__bindgen_ty_1 {
    pub f32_: *mut f32,
    pub s16: *mut ma_int16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_linear_resampler__bindgen_ty_1"]
        [::std::mem::size_of::<ma_linear_resampler__bindgen_ty_1>() - 8usize];
    ["Alignment of ma_linear_resampler__bindgen_ty_1"]
        [::std::mem::align_of::<ma_linear_resampler__bindgen_ty_1>() - 8usize];
    ["Offset of field: ma_linear_resampler__bindgen_ty_1::f32_"]
        [::std::mem::offset_of!(ma_linear_resampler__bindgen_ty_1, f32_) - 0usize];
    ["Offset of field: ma_linear_resampler__bindgen_ty_1::s16"]
        [::std::mem::offset_of!(ma_linear_resampler__bindgen_ty_1, s16) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_linear_resampler__bindgen_ty_2 {
    pub f32_: *mut f32,
    pub s16: *mut ma_int16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_linear_resampler__bindgen_ty_2"]
        [::std::mem::size_of::<ma_linear_resampler__bindgen_ty_2>() - 8usize];
    ["Alignment of ma_linear_resampler__bindgen_ty_2"]
        [::std::mem::align_of::<ma_linear_resampler__bindgen_ty_2>() - 8usize];
    ["Offset of field: ma_linear_resampler__bindgen_ty_2::f32_"]
        [::std::mem::offset_of!(ma_linear_resampler__bindgen_ty_2, f32_) - 0usize];
    ["Offset of field: ma_linear_resampler__bindgen_ty_2::s16"]
        [::std::mem::offset_of!(ma_linear_resampler__bindgen_ty_2, s16) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_linear_resampler"][::std::mem::size_of::<ma_linear_resampler>() - 136usize];
    ["Alignment of ma_linear_resampler"][::std::mem::align_of::<ma_linear_resampler>() - 8usize];
    ["Offset of field: ma_linear_resampler::config"]
        [::std::mem::offset_of!(ma_linear_resampler, config) - 0usize];
    ["Offset of field: ma_linear_resampler::inAdvanceInt"]
        [::std::mem::offset_of!(ma_linear_resampler, inAdvanceInt) - 32usize];
    ["Offset of field: ma_linear_resampler::inAdvanceFrac"]
        [::std::mem::offset_of!(ma_linear_resampler, inAdvanceFrac) - 36usize];
    ["Offset of field: ma_linear_resampler::inTimeInt"]
        [::std::mem::offset_of!(ma_linear_resampler, inTimeInt) - 40usize];
    ["Offset of field: ma_linear_resampler::inTimeFrac"]
        [::std::mem::offset_of!(ma_linear_resampler, inTimeFrac) - 44usize];
    ["Offset of field: ma_linear_resampler::x0"]
        [::std::mem::offset_of!(ma_linear_resampler, x0) - 48usize];
    ["Offset of field: ma_linear_resampler::x1"]
        [::std::mem::offset_of!(ma_linear_resampler, x1) - 56usize];
    ["Offset of field: ma_linear_resampler::lpf"]
        [::std::mem::offset_of!(ma_linear_resampler, lpf) - 64usize];
    ["Offset of field: ma_linear_resampler::_pHeap"]
        [::std::mem::offset_of!(ma_linear_resampler, _pHeap) - 120usize];
    ["Offset of field: ma_linear_resampler::_ownsHeap"]
        [::std::mem::offset_of!(ma_linear_resampler, _ownsHeap) - 128usize];
};
unsafe extern "C" {
    pub fn ma_linear_resampler_get_heap_size(
        pConfig: *const ma_linear_resampler_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_linear_resampler_init_preallocated(
        pConfig: *const ma_linear_resampler_config,
        pHeap: *mut ::std::os::raw::c_void,
        pResampler: *mut ma_linear_resampler,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_linear_resampler_init(
        pConfig: *const ma_linear_resampler_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pResampler: *mut ma_linear_resampler,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_linear_resampler_uninit(
        pResampler: *mut ma_linear_resampler,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
unsafe extern "C" {
    pub fn ma_linear_resampler_process_pcm_frames(
        pResampler: *mut ma_linear_resampler,
        pFramesIn: *const ::std::os::raw::c_void,
        pFrameCountIn: *mut ma_uint64,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFrameCountOut: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_linear_resampler_set_rate(
        pResampler: *mut ma_linear_resampler,
        sampleRateIn: ma_uint32,
        sampleRateOut: ma_uint32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_linear_resampler_set_rate_ratio(
        pResampler: *mut ma_linear_resampler,
        ratioInOut: f32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_linear_resampler_get_input_latency(
        pResampler: *const ma_linear_resampler,
    ) -> ma_uint64;
}
unsafe extern "C" {
    pub fn ma_linear_resampler_get_output_latency(
        pResampler: *const ma_linear_resampler,
    ) -> ma_uint64;
}
unsafe extern "C" {
    pub fn ma_linear_resampler_get_required_input_frame_count(
        pResampler: *const ma_linear_resampler,
        outputFrameCount: ma_uint64,
        pInputFrameCount: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_linear_resampler_get_expected_output_frame_count(
        pResampler: *const ma_linear_resampler,
        inputFrameCount: ma_uint64,
        pOutputFrameCount: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_linear_resampler_reset(pResampler: *mut ma_linear_resampler) -> ma_result;
}
pub type ma_resampling_backend = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_resampling_backend_vtable {
    pub onGetHeapSize: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pConfig: *const ma_resampler_config,
            pHeapSizeInBytes: *mut usize,
        ) -> ma_result,
    >,
    pub onInit: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pConfig: *const ma_resampler_config,
            pHeap: *mut ::std::os::raw::c_void,
            ppBackend: *mut *mut ma_resampling_backend,
        ) -> ma_result,
    >,
    pub onUninit: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pBackend: *mut ma_resampling_backend,
            pAllocationCallbacks: *const ma_allocation_callbacks,
        ),
    >,
    pub onProcess: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pBackend: *mut ma_resampling_backend,
            pFramesIn: *const ::std::os::raw::c_void,
            pFrameCountIn: *mut ma_uint64,
            pFramesOut: *mut ::std::os::raw::c_void,
            pFrameCountOut: *mut ma_uint64,
        ) -> ma_result,
    >,
    pub onSetRate: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pBackend: *mut ma_resampling_backend,
            sampleRateIn: ma_uint32,
            sampleRateOut: ma_uint32,
        ) -> ma_result,
    >,
    pub onGetInputLatency: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pBackend: *const ma_resampling_backend,
        ) -> ma_uint64,
    >,
    pub onGetOutputLatency: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pBackend: *const ma_resampling_backend,
        ) -> ma_uint64,
    >,
    pub onGetRequiredInputFrameCount: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pBackend: *const ma_resampling_backend,
            outputFrameCount: ma_uint64,
            pInputFrameCount: *mut ma_uint64,
        ) -> ma_result,
    >,
    pub onGetExpectedOutputFrameCount: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pBackend: *const ma_resampling_backend,
            inputFrameCount: ma_uint64,
            pOutputFrameCount: *mut ma_uint64,
        ) -> ma_result,
    >,
    pub onReset: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pBackend: *mut ma_resampling_backend,
        ) -> ma_result,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_resampling_backend_vtable"]
        [::std::mem::size_of::<ma_resampling_backend_vtable>() - 80usize];
    ["Alignment of ma_resampling_backend_vtable"]
        [::std::mem::align_of::<ma_resampling_backend_vtable>() - 8usize];
    ["Offset of field: ma_resampling_backend_vtable::onGetHeapSize"]
        [::std::mem::offset_of!(ma_resampling_backend_vtable, onGetHeapSize) - 0usize];
    ["Offset of field: ma_resampling_backend_vtable::onInit"]
        [::std::mem::offset_of!(ma_resampling_backend_vtable, onInit) - 8usize];
    ["Offset of field: ma_resampling_backend_vtable::onUninit"]
        [::std::mem::offset_of!(ma_resampling_backend_vtable, onUninit) - 16usize];
    ["Offset of field: ma_resampling_backend_vtable::onProcess"]
        [::std::mem::offset_of!(ma_resampling_backend_vtable, onProcess) - 24usize];
    ["Offset of field: ma_resampling_backend_vtable::onSetRate"]
        [::std::mem::offset_of!(ma_resampling_backend_vtable, onSetRate) - 32usize];
    ["Offset of field: ma_resampling_backend_vtable::onGetInputLatency"]
        [::std::mem::offset_of!(ma_resampling_backend_vtable, onGetInputLatency) - 40usize];
    ["Offset of field: ma_resampling_backend_vtable::onGetOutputLatency"]
        [::std::mem::offset_of!(ma_resampling_backend_vtable, onGetOutputLatency) - 48usize];
    ["Offset of field: ma_resampling_backend_vtable::onGetRequiredInputFrameCount"][::std::mem::offset_of!(
        ma_resampling_backend_vtable,
        onGetRequiredInputFrameCount
    ) - 56usize];
    ["Offset of field: ma_resampling_backend_vtable::onGetExpectedOutputFrameCount"][::std::mem::offset_of!(
        ma_resampling_backend_vtable,
        onGetExpectedOutputFrameCount
    ) - 64usize];
    ["Offset of field: ma_resampling_backend_vtable::onReset"]
        [::std::mem::offset_of!(ma_resampling_backend_vtable, onReset) - 72usize];
};
pub const ma_resample_algorithm_ma_resample_algorithm_linear: ma_resample_algorithm = 0;
pub const ma_resample_algorithm_ma_resample_algorithm_custom: ma_resample_algorithm = 1;
pub type ma_resample_algorithm = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_resampler_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRateIn: ma_uint32,
    pub sampleRateOut: ma_uint32,
    pub algorithm: ma_resample_algorithm,
    pub pBackendVTable: *mut ma_resampling_backend_vtable,
    pub pBackendUserData: *mut ::std::os::raw::c_void,
    pub linear: ma_resampler_config__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_resampler_config__bindgen_ty_1 {
    pub lpfOrder: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_resampler_config__bindgen_ty_1"]
        [::std::mem::size_of::<ma_resampler_config__bindgen_ty_1>() - 4usize];
    ["Alignment of ma_resampler_config__bindgen_ty_1"]
        [::std::mem::align_of::<ma_resampler_config__bindgen_ty_1>() - 4usize];
    ["Offset of field: ma_resampler_config__bindgen_ty_1::lpfOrder"]
        [::std::mem::offset_of!(ma_resampler_config__bindgen_ty_1, lpfOrder) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_resampler_config"][::std::mem::size_of::<ma_resampler_config>() - 48usize];
    ["Alignment of ma_resampler_config"][::std::mem::align_of::<ma_resampler_config>() - 8usize];
    ["Offset of field: ma_resampler_config::format"]
        [::std::mem::offset_of!(ma_resampler_config, format) - 0usize];
    ["Offset of field: ma_resampler_config::channels"]
        [::std::mem::offset_of!(ma_resampler_config, channels) - 4usize];
    ["Offset of field: ma_resampler_config::sampleRateIn"]
        [::std::mem::offset_of!(ma_resampler_config, sampleRateIn) - 8usize];
    ["Offset of field: ma_resampler_config::sampleRateOut"]
        [::std::mem::offset_of!(ma_resampler_config, sampleRateOut) - 12usize];
    ["Offset of field: ma_resampler_config::algorithm"]
        [::std::mem::offset_of!(ma_resampler_config, algorithm) - 16usize];
    ["Offset of field: ma_resampler_config::pBackendVTable"]
        [::std::mem::offset_of!(ma_resampler_config, pBackendVTable) - 24usize];
    ["Offset of field: ma_resampler_config::pBackendUserData"]
        [::std::mem::offset_of!(ma_resampler_config, pBackendUserData) - 32usize];
    ["Offset of field: ma_resampler_config::linear"]
        [::std::mem::offset_of!(ma_resampler_config, linear) - 40usize];
};
unsafe extern "C" {
    pub fn ma_resampler_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRateIn: ma_uint32,
        sampleRateOut: ma_uint32,
        algorithm: ma_resample_algorithm,
    ) -> ma_resampler_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_resampler {
    pub pBackend: *mut ma_resampling_backend,
    pub pBackendVTable: *mut ma_resampling_backend_vtable,
    pub pBackendUserData: *mut ::std::os::raw::c_void,
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRateIn: ma_uint32,
    pub sampleRateOut: ma_uint32,
    pub state: ma_resampler__bindgen_ty_1,
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_resampler__bindgen_ty_1 {
    pub linear: ma_linear_resampler,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_resampler__bindgen_ty_1"]
        [::std::mem::size_of::<ma_resampler__bindgen_ty_1>() - 136usize];
    ["Alignment of ma_resampler__bindgen_ty_1"]
        [::std::mem::align_of::<ma_resampler__bindgen_ty_1>() - 8usize];
    ["Offset of field: ma_resampler__bindgen_ty_1::linear"]
        [::std::mem::offset_of!(ma_resampler__bindgen_ty_1, linear) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_resampler"][::std::mem::size_of::<ma_resampler>() - 192usize];
    ["Alignment of ma_resampler"][::std::mem::align_of::<ma_resampler>() - 8usize];
    ["Offset of field: ma_resampler::pBackend"]
        [::std::mem::offset_of!(ma_resampler, pBackend) - 0usize];
    ["Offset of field: ma_resampler::pBackendVTable"]
        [::std::mem::offset_of!(ma_resampler, pBackendVTable) - 8usize];
    ["Offset of field: ma_resampler::pBackendUserData"]
        [::std::mem::offset_of!(ma_resampler, pBackendUserData) - 16usize];
    ["Offset of field: ma_resampler::format"]
        [::std::mem::offset_of!(ma_resampler, format) - 24usize];
    ["Offset of field: ma_resampler::channels"]
        [::std::mem::offset_of!(ma_resampler, channels) - 28usize];
    ["Offset of field: ma_resampler::sampleRateIn"]
        [::std::mem::offset_of!(ma_resampler, sampleRateIn) - 32usize];
    ["Offset of field: ma_resampler::sampleRateOut"]
        [::std::mem::offset_of!(ma_resampler, sampleRateOut) - 36usize];
    ["Offset of field: ma_resampler::state"][::std::mem::offset_of!(ma_resampler, state) - 40usize];
    ["Offset of field: ma_resampler::_pHeap"]
        [::std::mem::offset_of!(ma_resampler, _pHeap) - 176usize];
    ["Offset of field: ma_resampler::_ownsHeap"]
        [::std::mem::offset_of!(ma_resampler, _ownsHeap) - 184usize];
};
unsafe extern "C" {
    pub fn ma_resampler_get_heap_size(
        pConfig: *const ma_resampler_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resampler_init_preallocated(
        pConfig: *const ma_resampler_config,
        pHeap: *mut ::std::os::raw::c_void,
        pResampler: *mut ma_resampler,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resampler_init(
        pConfig: *const ma_resampler_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pResampler: *mut ma_resampler,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resampler_uninit(
        pResampler: *mut ma_resampler,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
unsafe extern "C" {
    pub fn ma_resampler_process_pcm_frames(
        pResampler: *mut ma_resampler,
        pFramesIn: *const ::std::os::raw::c_void,
        pFrameCountIn: *mut ma_uint64,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFrameCountOut: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resampler_set_rate(
        pResampler: *mut ma_resampler,
        sampleRateIn: ma_uint32,
        sampleRateOut: ma_uint32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resampler_set_rate_ratio(pResampler: *mut ma_resampler, ratio: f32) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resampler_get_input_latency(pResampler: *const ma_resampler) -> ma_uint64;
}
unsafe extern "C" {
    pub fn ma_resampler_get_output_latency(pResampler: *const ma_resampler) -> ma_uint64;
}
unsafe extern "C" {
    pub fn ma_resampler_get_required_input_frame_count(
        pResampler: *const ma_resampler,
        outputFrameCount: ma_uint64,
        pInputFrameCount: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resampler_get_expected_output_frame_count(
        pResampler: *const ma_resampler,
        inputFrameCount: ma_uint64,
        pOutputFrameCount: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resampler_reset(pResampler: *mut ma_resampler) -> ma_result;
}
pub const ma_channel_conversion_path_ma_channel_conversion_path_unknown:
    ma_channel_conversion_path = 0;
pub const ma_channel_conversion_path_ma_channel_conversion_path_passthrough:
    ma_channel_conversion_path = 1;
pub const ma_channel_conversion_path_ma_channel_conversion_path_mono_out:
    ma_channel_conversion_path = 2;
pub const ma_channel_conversion_path_ma_channel_conversion_path_mono_in:
    ma_channel_conversion_path = 3;
pub const ma_channel_conversion_path_ma_channel_conversion_path_shuffle:
    ma_channel_conversion_path = 4;
pub const ma_channel_conversion_path_ma_channel_conversion_path_weights:
    ma_channel_conversion_path = 5;
#[doc = "Channel Conversion"]
pub type ma_channel_conversion_path = ::std::os::raw::c_int;
pub const ma_mono_expansion_mode_ma_mono_expansion_mode_duplicate: ma_mono_expansion_mode = 0;
pub const ma_mono_expansion_mode_ma_mono_expansion_mode_average: ma_mono_expansion_mode = 1;
pub const ma_mono_expansion_mode_ma_mono_expansion_mode_stereo_only: ma_mono_expansion_mode = 2;
pub const ma_mono_expansion_mode_ma_mono_expansion_mode_default: ma_mono_expansion_mode = 0;
pub type ma_mono_expansion_mode = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_channel_converter_config {
    pub format: ma_format,
    pub channelsIn: ma_uint32,
    pub channelsOut: ma_uint32,
    pub pChannelMapIn: *const ma_channel,
    pub pChannelMapOut: *const ma_channel,
    pub mixingMode: ma_channel_mix_mode,
    pub calculateLFEFromSpatialChannels: ma_bool32,
    pub ppWeights: *mut *mut f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_channel_converter_config"]
        [::std::mem::size_of::<ma_channel_converter_config>() - 48usize];
    ["Alignment of ma_channel_converter_config"]
        [::std::mem::align_of::<ma_channel_converter_config>() - 8usize];
    ["Offset of field: ma_channel_converter_config::format"]
        [::std::mem::offset_of!(ma_channel_converter_config, format) - 0usize];
    ["Offset of field: ma_channel_converter_config::channelsIn"]
        [::std::mem::offset_of!(ma_channel_converter_config, channelsIn) - 4usize];
    ["Offset of field: ma_channel_converter_config::channelsOut"]
        [::std::mem::offset_of!(ma_channel_converter_config, channelsOut) - 8usize];
    ["Offset of field: ma_channel_converter_config::pChannelMapIn"]
        [::std::mem::offset_of!(ma_channel_converter_config, pChannelMapIn) - 16usize];
    ["Offset of field: ma_channel_converter_config::pChannelMapOut"]
        [::std::mem::offset_of!(ma_channel_converter_config, pChannelMapOut) - 24usize];
    ["Offset of field: ma_channel_converter_config::mixingMode"]
        [::std::mem::offset_of!(ma_channel_converter_config, mixingMode) - 32usize];
    ["Offset of field: ma_channel_converter_config::calculateLFEFromSpatialChannels"][::std::mem::offset_of!(
        ma_channel_converter_config,
        calculateLFEFromSpatialChannels
    ) - 36usize];
    ["Offset of field: ma_channel_converter_config::ppWeights"]
        [::std::mem::offset_of!(ma_channel_converter_config, ppWeights) - 40usize];
};
unsafe extern "C" {
    pub fn ma_channel_converter_config_init(
        format: ma_format,
        channelsIn: ma_uint32,
        pChannelMapIn: *const ma_channel,
        channelsOut: ma_uint32,
        pChannelMapOut: *const ma_channel,
        mixingMode: ma_channel_mix_mode,
    ) -> ma_channel_converter_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_channel_converter {
    pub format: ma_format,
    pub channelsIn: ma_uint32,
    pub channelsOut: ma_uint32,
    pub mixingMode: ma_channel_mix_mode,
    pub conversionPath: ma_channel_conversion_path,
    pub pChannelMapIn: *mut ma_channel,
    pub pChannelMapOut: *mut ma_channel,
    pub pShuffleTable: *mut ma_uint8,
    pub weights: ma_channel_converter__bindgen_ty_1,
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_channel_converter__bindgen_ty_1 {
    pub f32_: *mut *mut f32,
    pub s16: *mut *mut ma_int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_channel_converter__bindgen_ty_1"]
        [::std::mem::size_of::<ma_channel_converter__bindgen_ty_1>() - 8usize];
    ["Alignment of ma_channel_converter__bindgen_ty_1"]
        [::std::mem::align_of::<ma_channel_converter__bindgen_ty_1>() - 8usize];
    ["Offset of field: ma_channel_converter__bindgen_ty_1::f32_"]
        [::std::mem::offset_of!(ma_channel_converter__bindgen_ty_1, f32_) - 0usize];
    ["Offset of field: ma_channel_converter__bindgen_ty_1::s16"]
        [::std::mem::offset_of!(ma_channel_converter__bindgen_ty_1, s16) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_channel_converter"][::std::mem::size_of::<ma_channel_converter>() - 72usize];
    ["Alignment of ma_channel_converter"][::std::mem::align_of::<ma_channel_converter>() - 8usize];
    ["Offset of field: ma_channel_converter::format"]
        [::std::mem::offset_of!(ma_channel_converter, format) - 0usize];
    ["Offset of field: ma_channel_converter::channelsIn"]
        [::std::mem::offset_of!(ma_channel_converter, channelsIn) - 4usize];
    ["Offset of field: ma_channel_converter::channelsOut"]
        [::std::mem::offset_of!(ma_channel_converter, channelsOut) - 8usize];
    ["Offset of field: ma_channel_converter::mixingMode"]
        [::std::mem::offset_of!(ma_channel_converter, mixingMode) - 12usize];
    ["Offset of field: ma_channel_converter::conversionPath"]
        [::std::mem::offset_of!(ma_channel_converter, conversionPath) - 16usize];
    ["Offset of field: ma_channel_converter::pChannelMapIn"]
        [::std::mem::offset_of!(ma_channel_converter, pChannelMapIn) - 24usize];
    ["Offset of field: ma_channel_converter::pChannelMapOut"]
        [::std::mem::offset_of!(ma_channel_converter, pChannelMapOut) - 32usize];
    ["Offset of field: ma_channel_converter::pShuffleTable"]
        [::std::mem::offset_of!(ma_channel_converter, pShuffleTable) - 40usize];
    ["Offset of field: ma_channel_converter::weights"]
        [::std::mem::offset_of!(ma_channel_converter, weights) - 48usize];
    ["Offset of field: ma_channel_converter::_pHeap"]
        [::std::mem::offset_of!(ma_channel_converter, _pHeap) - 56usize];
    ["Offset of field: ma_channel_converter::_ownsHeap"]
        [::std::mem::offset_of!(ma_channel_converter, _ownsHeap) - 64usize];
};
unsafe extern "C" {
    pub fn ma_channel_converter_get_heap_size(
        pConfig: *const ma_channel_converter_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_channel_converter_init_preallocated(
        pConfig: *const ma_channel_converter_config,
        pHeap: *mut ::std::os::raw::c_void,
        pConverter: *mut ma_channel_converter,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_channel_converter_init(
        pConfig: *const ma_channel_converter_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pConverter: *mut ma_channel_converter,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_channel_converter_uninit(
        pConverter: *mut ma_channel_converter,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
unsafe extern "C" {
    pub fn ma_channel_converter_process_pcm_frames(
        pConverter: *mut ma_channel_converter,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_channel_converter_get_input_channel_map(
        pConverter: *const ma_channel_converter,
        pChannelMap: *mut ma_channel,
        channelMapCap: usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_channel_converter_get_output_channel_map(
        pConverter: *const ma_channel_converter,
        pChannelMap: *mut ma_channel,
        channelMapCap: usize,
    ) -> ma_result;
}
#[doc = "Data Conversion"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_data_converter_config {
    pub formatIn: ma_format,
    pub formatOut: ma_format,
    pub channelsIn: ma_uint32,
    pub channelsOut: ma_uint32,
    pub sampleRateIn: ma_uint32,
    pub sampleRateOut: ma_uint32,
    pub pChannelMapIn: *mut ma_channel,
    pub pChannelMapOut: *mut ma_channel,
    pub ditherMode: ma_dither_mode,
    pub channelMixMode: ma_channel_mix_mode,
    pub calculateLFEFromSpatialChannels: ma_bool32,
    pub ppChannelWeights: *mut *mut f32,
    pub allowDynamicSampleRate: ma_bool32,
    pub resampling: ma_resampler_config,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_data_converter_config"]
        [::std::mem::size_of::<ma_data_converter_config>() - 120usize];
    ["Alignment of ma_data_converter_config"]
        [::std::mem::align_of::<ma_data_converter_config>() - 8usize];
    ["Offset of field: ma_data_converter_config::formatIn"]
        [::std::mem::offset_of!(ma_data_converter_config, formatIn) - 0usize];
    ["Offset of field: ma_data_converter_config::formatOut"]
        [::std::mem::offset_of!(ma_data_converter_config, formatOut) - 4usize];
    ["Offset of field: ma_data_converter_config::channelsIn"]
        [::std::mem::offset_of!(ma_data_converter_config, channelsIn) - 8usize];
    ["Offset of field: ma_data_converter_config::channelsOut"]
        [::std::mem::offset_of!(ma_data_converter_config, channelsOut) - 12usize];
    ["Offset of field: ma_data_converter_config::sampleRateIn"]
        [::std::mem::offset_of!(ma_data_converter_config, sampleRateIn) - 16usize];
    ["Offset of field: ma_data_converter_config::sampleRateOut"]
        [::std::mem::offset_of!(ma_data_converter_config, sampleRateOut) - 20usize];
    ["Offset of field: ma_data_converter_config::pChannelMapIn"]
        [::std::mem::offset_of!(ma_data_converter_config, pChannelMapIn) - 24usize];
    ["Offset of field: ma_data_converter_config::pChannelMapOut"]
        [::std::mem::offset_of!(ma_data_converter_config, pChannelMapOut) - 32usize];
    ["Offset of field: ma_data_converter_config::ditherMode"]
        [::std::mem::offset_of!(ma_data_converter_config, ditherMode) - 40usize];
    ["Offset of field: ma_data_converter_config::channelMixMode"]
        [::std::mem::offset_of!(ma_data_converter_config, channelMixMode) - 44usize];
    ["Offset of field: ma_data_converter_config::calculateLFEFromSpatialChannels"][::std::mem::offset_of!(
        ma_data_converter_config,
        calculateLFEFromSpatialChannels
    ) - 48usize];
    ["Offset of field: ma_data_converter_config::ppChannelWeights"]
        [::std::mem::offset_of!(ma_data_converter_config, ppChannelWeights) - 56usize];
    ["Offset of field: ma_data_converter_config::allowDynamicSampleRate"]
        [::std::mem::offset_of!(ma_data_converter_config, allowDynamicSampleRate) - 64usize];
    ["Offset of field: ma_data_converter_config::resampling"]
        [::std::mem::offset_of!(ma_data_converter_config, resampling) - 72usize];
};
unsafe extern "C" {
    pub fn ma_data_converter_config_init_default() -> ma_data_converter_config;
}
unsafe extern "C" {
    pub fn ma_data_converter_config_init(
        formatIn: ma_format,
        formatOut: ma_format,
        channelsIn: ma_uint32,
        channelsOut: ma_uint32,
        sampleRateIn: ma_uint32,
        sampleRateOut: ma_uint32,
    ) -> ma_data_converter_config;
}
pub const ma_data_converter_execution_path_ma_data_converter_execution_path_passthrough:
    ma_data_converter_execution_path = 0;
pub const ma_data_converter_execution_path_ma_data_converter_execution_path_format_only:
    ma_data_converter_execution_path = 1;
pub const ma_data_converter_execution_path_ma_data_converter_execution_path_channels_only:
    ma_data_converter_execution_path = 2;
pub const ma_data_converter_execution_path_ma_data_converter_execution_path_resample_only:
    ma_data_converter_execution_path = 3;
pub const ma_data_converter_execution_path_ma_data_converter_execution_path_resample_first:
    ma_data_converter_execution_path = 4;
pub const ma_data_converter_execution_path_ma_data_converter_execution_path_channels_first:
    ma_data_converter_execution_path = 5;
pub type ma_data_converter_execution_path = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_data_converter {
    pub formatIn: ma_format,
    pub formatOut: ma_format,
    pub channelsIn: ma_uint32,
    pub channelsOut: ma_uint32,
    pub sampleRateIn: ma_uint32,
    pub sampleRateOut: ma_uint32,
    pub ditherMode: ma_dither_mode,
    pub executionPath: ma_data_converter_execution_path,
    pub channelConverter: ma_channel_converter,
    pub resampler: ma_resampler,
    pub hasPreFormatConversion: ma_bool8,
    pub hasPostFormatConversion: ma_bool8,
    pub hasChannelConverter: ma_bool8,
    pub hasResampler: ma_bool8,
    pub isPassthrough: ma_bool8,
    pub _ownsHeap: ma_bool8,
    pub _pHeap: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_data_converter"][::std::mem::size_of::<ma_data_converter>() - 312usize];
    ["Alignment of ma_data_converter"][::std::mem::align_of::<ma_data_converter>() - 8usize];
    ["Offset of field: ma_data_converter::formatIn"]
        [::std::mem::offset_of!(ma_data_converter, formatIn) - 0usize];
    ["Offset of field: ma_data_converter::formatOut"]
        [::std::mem::offset_of!(ma_data_converter, formatOut) - 4usize];
    ["Offset of field: ma_data_converter::channelsIn"]
        [::std::mem::offset_of!(ma_data_converter, channelsIn) - 8usize];
    ["Offset of field: ma_data_converter::channelsOut"]
        [::std::mem::offset_of!(ma_data_converter, channelsOut) - 12usize];
    ["Offset of field: ma_data_converter::sampleRateIn"]
        [::std::mem::offset_of!(ma_data_converter, sampleRateIn) - 16usize];
    ["Offset of field: ma_data_converter::sampleRateOut"]
        [::std::mem::offset_of!(ma_data_converter, sampleRateOut) - 20usize];
    ["Offset of field: ma_data_converter::ditherMode"]
        [::std::mem::offset_of!(ma_data_converter, ditherMode) - 24usize];
    ["Offset of field: ma_data_converter::executionPath"]
        [::std::mem::offset_of!(ma_data_converter, executionPath) - 28usize];
    ["Offset of field: ma_data_converter::channelConverter"]
        [::std::mem::offset_of!(ma_data_converter, channelConverter) - 32usize];
    ["Offset of field: ma_data_converter::resampler"]
        [::std::mem::offset_of!(ma_data_converter, resampler) - 104usize];
    ["Offset of field: ma_data_converter::hasPreFormatConversion"]
        [::std::mem::offset_of!(ma_data_converter, hasPreFormatConversion) - 296usize];
    ["Offset of field: ma_data_converter::hasPostFormatConversion"]
        [::std::mem::offset_of!(ma_data_converter, hasPostFormatConversion) - 297usize];
    ["Offset of field: ma_data_converter::hasChannelConverter"]
        [::std::mem::offset_of!(ma_data_converter, hasChannelConverter) - 298usize];
    ["Offset of field: ma_data_converter::hasResampler"]
        [::std::mem::offset_of!(ma_data_converter, hasResampler) - 299usize];
    ["Offset of field: ma_data_converter::isPassthrough"]
        [::std::mem::offset_of!(ma_data_converter, isPassthrough) - 300usize];
    ["Offset of field: ma_data_converter::_ownsHeap"]
        [::std::mem::offset_of!(ma_data_converter, _ownsHeap) - 301usize];
    ["Offset of field: ma_data_converter::_pHeap"]
        [::std::mem::offset_of!(ma_data_converter, _pHeap) - 304usize];
};
unsafe extern "C" {
    pub fn ma_data_converter_get_heap_size(
        pConfig: *const ma_data_converter_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_converter_init_preallocated(
        pConfig: *const ma_data_converter_config,
        pHeap: *mut ::std::os::raw::c_void,
        pConverter: *mut ma_data_converter,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_converter_init(
        pConfig: *const ma_data_converter_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pConverter: *mut ma_data_converter,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_converter_uninit(
        pConverter: *mut ma_data_converter,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
unsafe extern "C" {
    pub fn ma_data_converter_process_pcm_frames(
        pConverter: *mut ma_data_converter,
        pFramesIn: *const ::std::os::raw::c_void,
        pFrameCountIn: *mut ma_uint64,
        pFramesOut: *mut ::std::os::raw::c_void,
        pFrameCountOut: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_converter_set_rate(
        pConverter: *mut ma_data_converter,
        sampleRateIn: ma_uint32,
        sampleRateOut: ma_uint32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_converter_set_rate_ratio(
        pConverter: *mut ma_data_converter,
        ratioInOut: f32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_converter_get_input_latency(pConverter: *const ma_data_converter) -> ma_uint64;
}
unsafe extern "C" {
    pub fn ma_data_converter_get_output_latency(pConverter: *const ma_data_converter) -> ma_uint64;
}
unsafe extern "C" {
    pub fn ma_data_converter_get_required_input_frame_count(
        pConverter: *const ma_data_converter,
        outputFrameCount: ma_uint64,
        pInputFrameCount: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_converter_get_expected_output_frame_count(
        pConverter: *const ma_data_converter,
        inputFrameCount: ma_uint64,
        pOutputFrameCount: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_converter_get_input_channel_map(
        pConverter: *const ma_data_converter,
        pChannelMap: *mut ma_channel,
        channelMapCap: usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_converter_get_output_channel_map(
        pConverter: *const ma_data_converter,
        pChannelMap: *mut ma_channel,
        channelMapCap: usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_converter_reset(pConverter: *mut ma_data_converter) -> ma_result;
}
unsafe extern "C" {
    #[doc = "Format Conversion"]
    pub fn ma_pcm_u8_to_s16(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
unsafe extern "C" {
    pub fn ma_pcm_u8_to_s24(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
unsafe extern "C" {
    pub fn ma_pcm_u8_to_s32(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
unsafe extern "C" {
    pub fn ma_pcm_u8_to_f32(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
unsafe extern "C" {
    pub fn ma_pcm_s16_to_u8(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
unsafe extern "C" {
    pub fn ma_pcm_s16_to_s24(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
unsafe extern "C" {
    pub fn ma_pcm_s16_to_s32(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
unsafe extern "C" {
    pub fn ma_pcm_s16_to_f32(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
unsafe extern "C" {
    pub fn ma_pcm_s24_to_u8(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
unsafe extern "C" {
    pub fn ma_pcm_s24_to_s16(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
unsafe extern "C" {
    pub fn ma_pcm_s24_to_s32(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
unsafe extern "C" {
    pub fn ma_pcm_s24_to_f32(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
unsafe extern "C" {
    pub fn ma_pcm_s32_to_u8(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
unsafe extern "C" {
    pub fn ma_pcm_s32_to_s16(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
unsafe extern "C" {
    pub fn ma_pcm_s32_to_s24(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
unsafe extern "C" {
    pub fn ma_pcm_s32_to_f32(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
unsafe extern "C" {
    pub fn ma_pcm_f32_to_u8(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
unsafe extern "C" {
    pub fn ma_pcm_f32_to_s16(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
unsafe extern "C" {
    pub fn ma_pcm_f32_to_s24(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
unsafe extern "C" {
    pub fn ma_pcm_f32_to_s32(
        pOut: *mut ::std::os::raw::c_void,
        pIn: *const ::std::os::raw::c_void,
        count: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
unsafe extern "C" {
    pub fn ma_pcm_convert(
        pOut: *mut ::std::os::raw::c_void,
        formatOut: ma_format,
        pIn: *const ::std::os::raw::c_void,
        formatIn: ma_format,
        sampleCount: ma_uint64,
        ditherMode: ma_dither_mode,
    );
}
unsafe extern "C" {
    pub fn ma_convert_pcm_frames_format(
        pOut: *mut ::std::os::raw::c_void,
        formatOut: ma_format,
        pIn: *const ::std::os::raw::c_void,
        formatIn: ma_format,
        frameCount: ma_uint64,
        channels: ma_uint32,
        ditherMode: ma_dither_mode,
    );
}
unsafe extern "C" {
    pub fn ma_deinterleave_pcm_frames(
        format: ma_format,
        channels: ma_uint32,
        frameCount: ma_uint64,
        pInterleavedPCMFrames: *const ::std::os::raw::c_void,
        ppDeinterleavedPCMFrames: *mut *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn ma_interleave_pcm_frames(
        format: ma_format,
        channels: ma_uint32,
        frameCount: ma_uint64,
        ppDeinterleavedPCMFrames: *mut *const ::std::os::raw::c_void,
        pInterleavedPCMFrames: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn ma_channel_map_get_channel(
        pChannelMap: *const ma_channel,
        channelCount: ma_uint32,
        channelIndex: ma_uint32,
    ) -> ma_channel;
}
unsafe extern "C" {
    pub fn ma_channel_map_init_blank(pChannelMap: *mut ma_channel, channels: ma_uint32);
}
unsafe extern "C" {
    pub fn ma_channel_map_init_standard(
        standardChannelMap: ma_standard_channel_map,
        pChannelMap: *mut ma_channel,
        channelMapCap: usize,
        channels: ma_uint32,
    );
}
unsafe extern "C" {
    pub fn ma_channel_map_copy(pOut: *mut ma_channel, pIn: *const ma_channel, channels: ma_uint32);
}
unsafe extern "C" {
    pub fn ma_channel_map_copy_or_default(
        pOut: *mut ma_channel,
        channelMapCapOut: usize,
        pIn: *const ma_channel,
        channels: ma_uint32,
    );
}
unsafe extern "C" {
    pub fn ma_channel_map_is_valid(
        pChannelMap: *const ma_channel,
        channels: ma_uint32,
    ) -> ma_bool32;
}
unsafe extern "C" {
    pub fn ma_channel_map_is_equal(
        pChannelMapA: *const ma_channel,
        pChannelMapB: *const ma_channel,
        channels: ma_uint32,
    ) -> ma_bool32;
}
unsafe extern "C" {
    pub fn ma_channel_map_is_blank(
        pChannelMap: *const ma_channel,
        channels: ma_uint32,
    ) -> ma_bool32;
}
unsafe extern "C" {
    pub fn ma_channel_map_contains_channel_position(
        channels: ma_uint32,
        pChannelMap: *const ma_channel,
        channelPosition: ma_channel,
    ) -> ma_bool32;
}
unsafe extern "C" {
    pub fn ma_channel_map_find_channel_position(
        channels: ma_uint32,
        pChannelMap: *const ma_channel,
        channelPosition: ma_channel,
        pChannelIndex: *mut ma_uint32,
    ) -> ma_bool32;
}
unsafe extern "C" {
    pub fn ma_channel_map_to_string(
        pChannelMap: *const ma_channel,
        channels: ma_uint32,
        pBufferOut: *mut ::std::os::raw::c_char,
        bufferCap: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn ma_channel_position_to_string(channel: ma_channel) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[doc = "Conversion Helpers"]
    pub fn ma_convert_frames(
        pOut: *mut ::std::os::raw::c_void,
        frameCountOut: ma_uint64,
        formatOut: ma_format,
        channelsOut: ma_uint32,
        sampleRateOut: ma_uint32,
        pIn: *const ::std::os::raw::c_void,
        frameCountIn: ma_uint64,
        formatIn: ma_format,
        channelsIn: ma_uint32,
        sampleRateIn: ma_uint32,
    ) -> ma_uint64;
}
unsafe extern "C" {
    pub fn ma_convert_frames_ex(
        pOut: *mut ::std::os::raw::c_void,
        frameCountOut: ma_uint64,
        pIn: *const ::std::os::raw::c_void,
        frameCountIn: ma_uint64,
        pConfig: *const ma_data_converter_config,
    ) -> ma_uint64;
}
#[doc = "Data Source"]
pub type ma_data_source = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_data_source_vtable {
    pub onRead: ::std::option::Option<
        unsafe extern "C" fn(
            pDataSource: *mut ma_data_source,
            pFramesOut: *mut ::std::os::raw::c_void,
            frameCount: ma_uint64,
            pFramesRead: *mut ma_uint64,
        ) -> ma_result,
    >,
    pub onSeek: ::std::option::Option<
        unsafe extern "C" fn(pDataSource: *mut ma_data_source, frameIndex: ma_uint64) -> ma_result,
    >,
    pub onGetDataFormat: ::std::option::Option<
        unsafe extern "C" fn(
            pDataSource: *mut ma_data_source,
            pFormat: *mut ma_format,
            pChannels: *mut ma_uint32,
            pSampleRate: *mut ma_uint32,
            pChannelMap: *mut ma_channel,
            channelMapCap: usize,
        ) -> ma_result,
    >,
    pub onGetCursor: ::std::option::Option<
        unsafe extern "C" fn(
            pDataSource: *mut ma_data_source,
            pCursor: *mut ma_uint64,
        ) -> ma_result,
    >,
    pub onGetLength: ::std::option::Option<
        unsafe extern "C" fn(
            pDataSource: *mut ma_data_source,
            pLength: *mut ma_uint64,
        ) -> ma_result,
    >,
    pub onSetLooping: ::std::option::Option<
        unsafe extern "C" fn(pDataSource: *mut ma_data_source, isLooping: ma_bool32) -> ma_result,
    >,
    pub flags: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_data_source_vtable"][::std::mem::size_of::<ma_data_source_vtable>() - 56usize];
    ["Alignment of ma_data_source_vtable"]
        [::std::mem::align_of::<ma_data_source_vtable>() - 8usize];
    ["Offset of field: ma_data_source_vtable::onRead"]
        [::std::mem::offset_of!(ma_data_source_vtable, onRead) - 0usize];
    ["Offset of field: ma_data_source_vtable::onSeek"]
        [::std::mem::offset_of!(ma_data_source_vtable, onSeek) - 8usize];
    ["Offset of field: ma_data_source_vtable::onGetDataFormat"]
        [::std::mem::offset_of!(ma_data_source_vtable, onGetDataFormat) - 16usize];
    ["Offset of field: ma_data_source_vtable::onGetCursor"]
        [::std::mem::offset_of!(ma_data_source_vtable, onGetCursor) - 24usize];
    ["Offset of field: ma_data_source_vtable::onGetLength"]
        [::std::mem::offset_of!(ma_data_source_vtable, onGetLength) - 32usize];
    ["Offset of field: ma_data_source_vtable::onSetLooping"]
        [::std::mem::offset_of!(ma_data_source_vtable, onSetLooping) - 40usize];
    ["Offset of field: ma_data_source_vtable::flags"]
        [::std::mem::offset_of!(ma_data_source_vtable, flags) - 48usize];
};
pub type ma_data_source_get_next_proc = ::std::option::Option<
    unsafe extern "C" fn(pDataSource: *mut ma_data_source) -> *mut ma_data_source,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_data_source_config {
    pub vtable: *const ma_data_source_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_data_source_config"][::std::mem::size_of::<ma_data_source_config>() - 8usize];
    ["Alignment of ma_data_source_config"]
        [::std::mem::align_of::<ma_data_source_config>() - 8usize];
    ["Offset of field: ma_data_source_config::vtable"]
        [::std::mem::offset_of!(ma_data_source_config, vtable) - 0usize];
};
unsafe extern "C" {
    pub fn ma_data_source_config_init() -> ma_data_source_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_data_source_base {
    pub vtable: *const ma_data_source_vtable,
    pub rangeBegInFrames: ma_uint64,
    pub rangeEndInFrames: ma_uint64,
    pub loopBegInFrames: ma_uint64,
    pub loopEndInFrames: ma_uint64,
    pub pCurrent: *mut ma_data_source,
    pub pNext: *mut ma_data_source,
    pub onGetNext: ma_data_source_get_next_proc,
    pub isLooping: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_data_source_base"][::std::mem::size_of::<ma_data_source_base>() - 72usize];
    ["Alignment of ma_data_source_base"][::std::mem::align_of::<ma_data_source_base>() - 8usize];
    ["Offset of field: ma_data_source_base::vtable"]
        [::std::mem::offset_of!(ma_data_source_base, vtable) - 0usize];
    ["Offset of field: ma_data_source_base::rangeBegInFrames"]
        [::std::mem::offset_of!(ma_data_source_base, rangeBegInFrames) - 8usize];
    ["Offset of field: ma_data_source_base::rangeEndInFrames"]
        [::std::mem::offset_of!(ma_data_source_base, rangeEndInFrames) - 16usize];
    ["Offset of field: ma_data_source_base::loopBegInFrames"]
        [::std::mem::offset_of!(ma_data_source_base, loopBegInFrames) - 24usize];
    ["Offset of field: ma_data_source_base::loopEndInFrames"]
        [::std::mem::offset_of!(ma_data_source_base, loopEndInFrames) - 32usize];
    ["Offset of field: ma_data_source_base::pCurrent"]
        [::std::mem::offset_of!(ma_data_source_base, pCurrent) - 40usize];
    ["Offset of field: ma_data_source_base::pNext"]
        [::std::mem::offset_of!(ma_data_source_base, pNext) - 48usize];
    ["Offset of field: ma_data_source_base::onGetNext"]
        [::std::mem::offset_of!(ma_data_source_base, onGetNext) - 56usize];
    ["Offset of field: ma_data_source_base::isLooping"]
        [::std::mem::offset_of!(ma_data_source_base, isLooping) - 64usize];
};
unsafe extern "C" {
    pub fn ma_data_source_init(
        pConfig: *const ma_data_source_config,
        pDataSource: *mut ma_data_source,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_source_uninit(pDataSource: *mut ma_data_source);
}
unsafe extern "C" {
    pub fn ma_data_source_read_pcm_frames(
        pDataSource: *mut ma_data_source,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        pFramesRead: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_source_seek_pcm_frames(
        pDataSource: *mut ma_data_source,
        frameCount: ma_uint64,
        pFramesSeeked: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_source_seek_to_pcm_frame(
        pDataSource: *mut ma_data_source,
        frameIndex: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_source_seek_seconds(
        pDataSource: *mut ma_data_source,
        secondCount: f32,
        pSecondsSeeked: *mut f32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_source_seek_to_second(
        pDataSource: *mut ma_data_source,
        seekPointInSeconds: f32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_source_get_data_format(
        pDataSource: *mut ma_data_source,
        pFormat: *mut ma_format,
        pChannels: *mut ma_uint32,
        pSampleRate: *mut ma_uint32,
        pChannelMap: *mut ma_channel,
        channelMapCap: usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_source_get_cursor_in_pcm_frames(
        pDataSource: *mut ma_data_source,
        pCursor: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_source_get_length_in_pcm_frames(
        pDataSource: *mut ma_data_source,
        pLength: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_source_get_cursor_in_seconds(
        pDataSource: *mut ma_data_source,
        pCursor: *mut f32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_source_get_length_in_seconds(
        pDataSource: *mut ma_data_source,
        pLength: *mut f32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_source_set_looping(
        pDataSource: *mut ma_data_source,
        isLooping: ma_bool32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_source_is_looping(pDataSource: *const ma_data_source) -> ma_bool32;
}
unsafe extern "C" {
    pub fn ma_data_source_set_range_in_pcm_frames(
        pDataSource: *mut ma_data_source,
        rangeBegInFrames: ma_uint64,
        rangeEndInFrames: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_source_get_range_in_pcm_frames(
        pDataSource: *const ma_data_source,
        pRangeBegInFrames: *mut ma_uint64,
        pRangeEndInFrames: *mut ma_uint64,
    );
}
unsafe extern "C" {
    pub fn ma_data_source_set_loop_point_in_pcm_frames(
        pDataSource: *mut ma_data_source,
        loopBegInFrames: ma_uint64,
        loopEndInFrames: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_source_get_loop_point_in_pcm_frames(
        pDataSource: *const ma_data_source,
        pLoopBegInFrames: *mut ma_uint64,
        pLoopEndInFrames: *mut ma_uint64,
    );
}
unsafe extern "C" {
    pub fn ma_data_source_set_current(
        pDataSource: *mut ma_data_source,
        pCurrentDataSource: *mut ma_data_source,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_source_get_current(pDataSource: *const ma_data_source) -> *mut ma_data_source;
}
unsafe extern "C" {
    pub fn ma_data_source_set_next(
        pDataSource: *mut ma_data_source,
        pNextDataSource: *mut ma_data_source,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_source_get_next(pDataSource: *const ma_data_source) -> *mut ma_data_source;
}
unsafe extern "C" {
    pub fn ma_data_source_set_next_callback(
        pDataSource: *mut ma_data_source,
        onGetNext: ma_data_source_get_next_proc,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_source_get_next_callback(
        pDataSource: *const ma_data_source,
    ) -> ma_data_source_get_next_proc;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_audio_buffer_ref {
    pub ds: ma_data_source_base,
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub cursor: ma_uint64,
    pub sizeInFrames: ma_uint64,
    pub pData: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_audio_buffer_ref"][::std::mem::size_of::<ma_audio_buffer_ref>() - 112usize];
    ["Alignment of ma_audio_buffer_ref"][::std::mem::align_of::<ma_audio_buffer_ref>() - 8usize];
    ["Offset of field: ma_audio_buffer_ref::ds"]
        [::std::mem::offset_of!(ma_audio_buffer_ref, ds) - 0usize];
    ["Offset of field: ma_audio_buffer_ref::format"]
        [::std::mem::offset_of!(ma_audio_buffer_ref, format) - 72usize];
    ["Offset of field: ma_audio_buffer_ref::channels"]
        [::std::mem::offset_of!(ma_audio_buffer_ref, channels) - 76usize];
    ["Offset of field: ma_audio_buffer_ref::sampleRate"]
        [::std::mem::offset_of!(ma_audio_buffer_ref, sampleRate) - 80usize];
    ["Offset of field: ma_audio_buffer_ref::cursor"]
        [::std::mem::offset_of!(ma_audio_buffer_ref, cursor) - 88usize];
    ["Offset of field: ma_audio_buffer_ref::sizeInFrames"]
        [::std::mem::offset_of!(ma_audio_buffer_ref, sizeInFrames) - 96usize];
    ["Offset of field: ma_audio_buffer_ref::pData"]
        [::std::mem::offset_of!(ma_audio_buffer_ref, pData) - 104usize];
};
unsafe extern "C" {
    pub fn ma_audio_buffer_ref_init(
        format: ma_format,
        channels: ma_uint32,
        pData: *const ::std::os::raw::c_void,
        sizeInFrames: ma_uint64,
        pAudioBufferRef: *mut ma_audio_buffer_ref,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_audio_buffer_ref_uninit(pAudioBufferRef: *mut ma_audio_buffer_ref);
}
unsafe extern "C" {
    pub fn ma_audio_buffer_ref_set_data(
        pAudioBufferRef: *mut ma_audio_buffer_ref,
        pData: *const ::std::os::raw::c_void,
        sizeInFrames: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_audio_buffer_ref_read_pcm_frames(
        pAudioBufferRef: *mut ma_audio_buffer_ref,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        loop_: ma_bool32,
    ) -> ma_uint64;
}
unsafe extern "C" {
    pub fn ma_audio_buffer_ref_seek_to_pcm_frame(
        pAudioBufferRef: *mut ma_audio_buffer_ref,
        frameIndex: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_audio_buffer_ref_map(
        pAudioBufferRef: *mut ma_audio_buffer_ref,
        ppFramesOut: *mut *mut ::std::os::raw::c_void,
        pFrameCount: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_audio_buffer_ref_unmap(
        pAudioBufferRef: *mut ma_audio_buffer_ref,
        frameCount: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_audio_buffer_ref_at_end(pAudioBufferRef: *const ma_audio_buffer_ref) -> ma_bool32;
}
unsafe extern "C" {
    pub fn ma_audio_buffer_ref_get_cursor_in_pcm_frames(
        pAudioBufferRef: *const ma_audio_buffer_ref,
        pCursor: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_audio_buffer_ref_get_length_in_pcm_frames(
        pAudioBufferRef: *const ma_audio_buffer_ref,
        pLength: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_audio_buffer_ref_get_available_frames(
        pAudioBufferRef: *const ma_audio_buffer_ref,
        pAvailableFrames: *mut ma_uint64,
    ) -> ma_result;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_audio_buffer_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub sizeInFrames: ma_uint64,
    pub pData: *const ::std::os::raw::c_void,
    pub allocationCallbacks: ma_allocation_callbacks,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_audio_buffer_config"][::std::mem::size_of::<ma_audio_buffer_config>() - 64usize];
    ["Alignment of ma_audio_buffer_config"]
        [::std::mem::align_of::<ma_audio_buffer_config>() - 8usize];
    ["Offset of field: ma_audio_buffer_config::format"]
        [::std::mem::offset_of!(ma_audio_buffer_config, format) - 0usize];
    ["Offset of field: ma_audio_buffer_config::channels"]
        [::std::mem::offset_of!(ma_audio_buffer_config, channels) - 4usize];
    ["Offset of field: ma_audio_buffer_config::sampleRate"]
        [::std::mem::offset_of!(ma_audio_buffer_config, sampleRate) - 8usize];
    ["Offset of field: ma_audio_buffer_config::sizeInFrames"]
        [::std::mem::offset_of!(ma_audio_buffer_config, sizeInFrames) - 16usize];
    ["Offset of field: ma_audio_buffer_config::pData"]
        [::std::mem::offset_of!(ma_audio_buffer_config, pData) - 24usize];
    ["Offset of field: ma_audio_buffer_config::allocationCallbacks"]
        [::std::mem::offset_of!(ma_audio_buffer_config, allocationCallbacks) - 32usize];
};
unsafe extern "C" {
    pub fn ma_audio_buffer_config_init(
        format: ma_format,
        channels: ma_uint32,
        sizeInFrames: ma_uint64,
        pData: *const ::std::os::raw::c_void,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    ) -> ma_audio_buffer_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_audio_buffer {
    pub ref_: ma_audio_buffer_ref,
    pub allocationCallbacks: ma_allocation_callbacks,
    pub ownsData: ma_bool32,
    pub _pExtraData: [ma_uint8; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_audio_buffer"][::std::mem::size_of::<ma_audio_buffer>() - 152usize];
    ["Alignment of ma_audio_buffer"][::std::mem::align_of::<ma_audio_buffer>() - 8usize];
    ["Offset of field: ma_audio_buffer::ref_"]
        [::std::mem::offset_of!(ma_audio_buffer, ref_) - 0usize];
    ["Offset of field: ma_audio_buffer::allocationCallbacks"]
        [::std::mem::offset_of!(ma_audio_buffer, allocationCallbacks) - 112usize];
    ["Offset of field: ma_audio_buffer::ownsData"]
        [::std::mem::offset_of!(ma_audio_buffer, ownsData) - 144usize];
    ["Offset of field: ma_audio_buffer::_pExtraData"]
        [::std::mem::offset_of!(ma_audio_buffer, _pExtraData) - 148usize];
};
unsafe extern "C" {
    pub fn ma_audio_buffer_init(
        pConfig: *const ma_audio_buffer_config,
        pAudioBuffer: *mut ma_audio_buffer,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_audio_buffer_init_copy(
        pConfig: *const ma_audio_buffer_config,
        pAudioBuffer: *mut ma_audio_buffer,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_audio_buffer_alloc_and_init(
        pConfig: *const ma_audio_buffer_config,
        ppAudioBuffer: *mut *mut ma_audio_buffer,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_audio_buffer_uninit(pAudioBuffer: *mut ma_audio_buffer);
}
unsafe extern "C" {
    pub fn ma_audio_buffer_uninit_and_free(pAudioBuffer: *mut ma_audio_buffer);
}
unsafe extern "C" {
    pub fn ma_audio_buffer_read_pcm_frames(
        pAudioBuffer: *mut ma_audio_buffer,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        loop_: ma_bool32,
    ) -> ma_uint64;
}
unsafe extern "C" {
    pub fn ma_audio_buffer_seek_to_pcm_frame(
        pAudioBuffer: *mut ma_audio_buffer,
        frameIndex: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_audio_buffer_map(
        pAudioBuffer: *mut ma_audio_buffer,
        ppFramesOut: *mut *mut ::std::os::raw::c_void,
        pFrameCount: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_audio_buffer_unmap(
        pAudioBuffer: *mut ma_audio_buffer,
        frameCount: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_audio_buffer_at_end(pAudioBuffer: *const ma_audio_buffer) -> ma_bool32;
}
unsafe extern "C" {
    pub fn ma_audio_buffer_get_cursor_in_pcm_frames(
        pAudioBuffer: *const ma_audio_buffer,
        pCursor: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_audio_buffer_get_length_in_pcm_frames(
        pAudioBuffer: *const ma_audio_buffer,
        pLength: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_audio_buffer_get_available_frames(
        pAudioBuffer: *const ma_audio_buffer,
        pAvailableFrames: *mut ma_uint64,
    ) -> ma_result;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_paged_audio_buffer_page {
    pub pNext: *mut ma_paged_audio_buffer_page,
    pub sizeInFrames: ma_uint64,
    pub pAudioData: [ma_uint8; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_paged_audio_buffer_page"]
        [::std::mem::size_of::<ma_paged_audio_buffer_page>() - 24usize];
    ["Alignment of ma_paged_audio_buffer_page"]
        [::std::mem::align_of::<ma_paged_audio_buffer_page>() - 8usize];
    ["Offset of field: ma_paged_audio_buffer_page::pNext"]
        [::std::mem::offset_of!(ma_paged_audio_buffer_page, pNext) - 0usize];
    ["Offset of field: ma_paged_audio_buffer_page::sizeInFrames"]
        [::std::mem::offset_of!(ma_paged_audio_buffer_page, sizeInFrames) - 8usize];
    ["Offset of field: ma_paged_audio_buffer_page::pAudioData"]
        [::std::mem::offset_of!(ma_paged_audio_buffer_page, pAudioData) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_paged_audio_buffer_data {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub head: ma_paged_audio_buffer_page,
    pub pTail: *mut ma_paged_audio_buffer_page,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_paged_audio_buffer_data"]
        [::std::mem::size_of::<ma_paged_audio_buffer_data>() - 40usize];
    ["Alignment of ma_paged_audio_buffer_data"]
        [::std::mem::align_of::<ma_paged_audio_buffer_data>() - 8usize];
    ["Offset of field: ma_paged_audio_buffer_data::format"]
        [::std::mem::offset_of!(ma_paged_audio_buffer_data, format) - 0usize];
    ["Offset of field: ma_paged_audio_buffer_data::channels"]
        [::std::mem::offset_of!(ma_paged_audio_buffer_data, channels) - 4usize];
    ["Offset of field: ma_paged_audio_buffer_data::head"]
        [::std::mem::offset_of!(ma_paged_audio_buffer_data, head) - 8usize];
    ["Offset of field: ma_paged_audio_buffer_data::pTail"]
        [::std::mem::offset_of!(ma_paged_audio_buffer_data, pTail) - 32usize];
};
unsafe extern "C" {
    pub fn ma_paged_audio_buffer_data_init(
        format: ma_format,
        channels: ma_uint32,
        pData: *mut ma_paged_audio_buffer_data,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_paged_audio_buffer_data_uninit(
        pData: *mut ma_paged_audio_buffer_data,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
unsafe extern "C" {
    pub fn ma_paged_audio_buffer_data_get_head(
        pData: *mut ma_paged_audio_buffer_data,
    ) -> *mut ma_paged_audio_buffer_page;
}
unsafe extern "C" {
    pub fn ma_paged_audio_buffer_data_get_tail(
        pData: *mut ma_paged_audio_buffer_data,
    ) -> *mut ma_paged_audio_buffer_page;
}
unsafe extern "C" {
    pub fn ma_paged_audio_buffer_data_get_length_in_pcm_frames(
        pData: *mut ma_paged_audio_buffer_data,
        pLength: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_paged_audio_buffer_data_allocate_page(
        pData: *mut ma_paged_audio_buffer_data,
        pageSizeInFrames: ma_uint64,
        pInitialData: *const ::std::os::raw::c_void,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        ppPage: *mut *mut ma_paged_audio_buffer_page,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_paged_audio_buffer_data_free_page(
        pData: *mut ma_paged_audio_buffer_data,
        pPage: *mut ma_paged_audio_buffer_page,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_paged_audio_buffer_data_append_page(
        pData: *mut ma_paged_audio_buffer_data,
        pPage: *mut ma_paged_audio_buffer_page,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_paged_audio_buffer_data_allocate_and_append_page(
        pData: *mut ma_paged_audio_buffer_data,
        pageSizeInFrames: ma_uint32,
        pInitialData: *const ::std::os::raw::c_void,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    ) -> ma_result;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_paged_audio_buffer_config {
    pub pData: *mut ma_paged_audio_buffer_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_paged_audio_buffer_config"]
        [::std::mem::size_of::<ma_paged_audio_buffer_config>() - 8usize];
    ["Alignment of ma_paged_audio_buffer_config"]
        [::std::mem::align_of::<ma_paged_audio_buffer_config>() - 8usize];
    ["Offset of field: ma_paged_audio_buffer_config::pData"]
        [::std::mem::offset_of!(ma_paged_audio_buffer_config, pData) - 0usize];
};
unsafe extern "C" {
    pub fn ma_paged_audio_buffer_config_init(
        pData: *mut ma_paged_audio_buffer_data,
    ) -> ma_paged_audio_buffer_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_paged_audio_buffer {
    pub ds: ma_data_source_base,
    pub pData: *mut ma_paged_audio_buffer_data,
    pub pCurrent: *mut ma_paged_audio_buffer_page,
    pub relativeCursor: ma_uint64,
    pub absoluteCursor: ma_uint64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_paged_audio_buffer"][::std::mem::size_of::<ma_paged_audio_buffer>() - 104usize];
    ["Alignment of ma_paged_audio_buffer"]
        [::std::mem::align_of::<ma_paged_audio_buffer>() - 8usize];
    ["Offset of field: ma_paged_audio_buffer::ds"]
        [::std::mem::offset_of!(ma_paged_audio_buffer, ds) - 0usize];
    ["Offset of field: ma_paged_audio_buffer::pData"]
        [::std::mem::offset_of!(ma_paged_audio_buffer, pData) - 72usize];
    ["Offset of field: ma_paged_audio_buffer::pCurrent"]
        [::std::mem::offset_of!(ma_paged_audio_buffer, pCurrent) - 80usize];
    ["Offset of field: ma_paged_audio_buffer::relativeCursor"]
        [::std::mem::offset_of!(ma_paged_audio_buffer, relativeCursor) - 88usize];
    ["Offset of field: ma_paged_audio_buffer::absoluteCursor"]
        [::std::mem::offset_of!(ma_paged_audio_buffer, absoluteCursor) - 96usize];
};
unsafe extern "C" {
    pub fn ma_paged_audio_buffer_init(
        pConfig: *const ma_paged_audio_buffer_config,
        pPagedAudioBuffer: *mut ma_paged_audio_buffer,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_paged_audio_buffer_uninit(pPagedAudioBuffer: *mut ma_paged_audio_buffer);
}
unsafe extern "C" {
    pub fn ma_paged_audio_buffer_read_pcm_frames(
        pPagedAudioBuffer: *mut ma_paged_audio_buffer,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        pFramesRead: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_paged_audio_buffer_seek_to_pcm_frame(
        pPagedAudioBuffer: *mut ma_paged_audio_buffer,
        frameIndex: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_paged_audio_buffer_get_cursor_in_pcm_frames(
        pPagedAudioBuffer: *mut ma_paged_audio_buffer,
        pCursor: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_paged_audio_buffer_get_length_in_pcm_frames(
        pPagedAudioBuffer: *mut ma_paged_audio_buffer,
        pLength: *mut ma_uint64,
    ) -> ma_result;
}
#[doc = "Ring Buffer"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_rb {
    pub pBuffer: *mut ::std::os::raw::c_void,
    pub subbufferSizeInBytes: ma_uint32,
    pub subbufferCount: ma_uint32,
    pub subbufferStrideInBytes: ma_uint32,
    pub encodedReadOffset: ma_uint32,
    pub encodedWriteOffset: ma_uint32,
    pub ownsBuffer: ma_bool8,
    pub clearOnWriteAcquire: ma_bool8,
    pub allocationCallbacks: ma_allocation_callbacks,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_rb"][::std::mem::size_of::<ma_rb>() - 64usize];
    ["Alignment of ma_rb"][::std::mem::align_of::<ma_rb>() - 8usize];
    ["Offset of field: ma_rb::pBuffer"][::std::mem::offset_of!(ma_rb, pBuffer) - 0usize];
    ["Offset of field: ma_rb::subbufferSizeInBytes"]
        [::std::mem::offset_of!(ma_rb, subbufferSizeInBytes) - 8usize];
    ["Offset of field: ma_rb::subbufferCount"]
        [::std::mem::offset_of!(ma_rb, subbufferCount) - 12usize];
    ["Offset of field: ma_rb::subbufferStrideInBytes"]
        [::std::mem::offset_of!(ma_rb, subbufferStrideInBytes) - 16usize];
    ["Offset of field: ma_rb::encodedReadOffset"]
        [::std::mem::offset_of!(ma_rb, encodedReadOffset) - 20usize];
    ["Offset of field: ma_rb::encodedWriteOffset"]
        [::std::mem::offset_of!(ma_rb, encodedWriteOffset) - 24usize];
    ["Offset of field: ma_rb::ownsBuffer"][::std::mem::offset_of!(ma_rb, ownsBuffer) - 28usize];
    ["Offset of field: ma_rb::clearOnWriteAcquire"]
        [::std::mem::offset_of!(ma_rb, clearOnWriteAcquire) - 29usize];
    ["Offset of field: ma_rb::allocationCallbacks"]
        [::std::mem::offset_of!(ma_rb, allocationCallbacks) - 32usize];
};
unsafe extern "C" {
    pub fn ma_rb_init_ex(
        subbufferSizeInBytes: usize,
        subbufferCount: usize,
        subbufferStrideInBytes: usize,
        pOptionalPreallocatedBuffer: *mut ::std::os::raw::c_void,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pRB: *mut ma_rb,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_rb_init(
        bufferSizeInBytes: usize,
        pOptionalPreallocatedBuffer: *mut ::std::os::raw::c_void,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pRB: *mut ma_rb,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_rb_uninit(pRB: *mut ma_rb);
}
unsafe extern "C" {
    pub fn ma_rb_reset(pRB: *mut ma_rb);
}
unsafe extern "C" {
    pub fn ma_rb_acquire_read(
        pRB: *mut ma_rb,
        pSizeInBytes: *mut usize,
        ppBufferOut: *mut *mut ::std::os::raw::c_void,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_rb_commit_read(pRB: *mut ma_rb, sizeInBytes: usize) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_rb_acquire_write(
        pRB: *mut ma_rb,
        pSizeInBytes: *mut usize,
        ppBufferOut: *mut *mut ::std::os::raw::c_void,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_rb_commit_write(pRB: *mut ma_rb, sizeInBytes: usize) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_rb_seek_read(pRB: *mut ma_rb, offsetInBytes: usize) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_rb_seek_write(pRB: *mut ma_rb, offsetInBytes: usize) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_rb_pointer_distance(pRB: *mut ma_rb) -> ma_int32;
}
unsafe extern "C" {
    pub fn ma_rb_available_read(pRB: *mut ma_rb) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_rb_available_write(pRB: *mut ma_rb) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_rb_get_subbuffer_size(pRB: *mut ma_rb) -> usize;
}
unsafe extern "C" {
    pub fn ma_rb_get_subbuffer_stride(pRB: *mut ma_rb) -> usize;
}
unsafe extern "C" {
    pub fn ma_rb_get_subbuffer_offset(pRB: *mut ma_rb, subbufferIndex: usize) -> usize;
}
unsafe extern "C" {
    pub fn ma_rb_get_subbuffer_ptr(
        pRB: *mut ma_rb,
        subbufferIndex: usize,
        pBuffer: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_pcm_rb {
    pub ds: ma_data_source_base,
    pub rb: ma_rb,
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_pcm_rb"][::std::mem::size_of::<ma_pcm_rb>() - 152usize];
    ["Alignment of ma_pcm_rb"][::std::mem::align_of::<ma_pcm_rb>() - 8usize];
    ["Offset of field: ma_pcm_rb::ds"][::std::mem::offset_of!(ma_pcm_rb, ds) - 0usize];
    ["Offset of field: ma_pcm_rb::rb"][::std::mem::offset_of!(ma_pcm_rb, rb) - 72usize];
    ["Offset of field: ma_pcm_rb::format"][::std::mem::offset_of!(ma_pcm_rb, format) - 136usize];
    ["Offset of field: ma_pcm_rb::channels"]
        [::std::mem::offset_of!(ma_pcm_rb, channels) - 140usize];
    ["Offset of field: ma_pcm_rb::sampleRate"]
        [::std::mem::offset_of!(ma_pcm_rb, sampleRate) - 144usize];
};
unsafe extern "C" {
    pub fn ma_pcm_rb_init_ex(
        format: ma_format,
        channels: ma_uint32,
        subbufferSizeInFrames: ma_uint32,
        subbufferCount: ma_uint32,
        subbufferStrideInFrames: ma_uint32,
        pOptionalPreallocatedBuffer: *mut ::std::os::raw::c_void,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pRB: *mut ma_pcm_rb,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_pcm_rb_init(
        format: ma_format,
        channels: ma_uint32,
        bufferSizeInFrames: ma_uint32,
        pOptionalPreallocatedBuffer: *mut ::std::os::raw::c_void,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pRB: *mut ma_pcm_rb,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_pcm_rb_uninit(pRB: *mut ma_pcm_rb);
}
unsafe extern "C" {
    pub fn ma_pcm_rb_reset(pRB: *mut ma_pcm_rb);
}
unsafe extern "C" {
    pub fn ma_pcm_rb_acquire_read(
        pRB: *mut ma_pcm_rb,
        pSizeInFrames: *mut ma_uint32,
        ppBufferOut: *mut *mut ::std::os::raw::c_void,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_pcm_rb_commit_read(pRB: *mut ma_pcm_rb, sizeInFrames: ma_uint32) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_pcm_rb_acquire_write(
        pRB: *mut ma_pcm_rb,
        pSizeInFrames: *mut ma_uint32,
        ppBufferOut: *mut *mut ::std::os::raw::c_void,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_pcm_rb_commit_write(pRB: *mut ma_pcm_rb, sizeInFrames: ma_uint32) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_pcm_rb_seek_read(pRB: *mut ma_pcm_rb, offsetInFrames: ma_uint32) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_pcm_rb_seek_write(pRB: *mut ma_pcm_rb, offsetInFrames: ma_uint32) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_pcm_rb_pointer_distance(pRB: *mut ma_pcm_rb) -> ma_int32;
}
unsafe extern "C" {
    pub fn ma_pcm_rb_available_read(pRB: *mut ma_pcm_rb) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_pcm_rb_available_write(pRB: *mut ma_pcm_rb) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_pcm_rb_get_subbuffer_size(pRB: *mut ma_pcm_rb) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_pcm_rb_get_subbuffer_stride(pRB: *mut ma_pcm_rb) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_pcm_rb_get_subbuffer_offset(
        pRB: *mut ma_pcm_rb,
        subbufferIndex: ma_uint32,
    ) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_pcm_rb_get_subbuffer_ptr(
        pRB: *mut ma_pcm_rb,
        subbufferIndex: ma_uint32,
        pBuffer: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn ma_pcm_rb_get_format(pRB: *const ma_pcm_rb) -> ma_format;
}
unsafe extern "C" {
    pub fn ma_pcm_rb_get_channels(pRB: *const ma_pcm_rb) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_pcm_rb_get_sample_rate(pRB: *const ma_pcm_rb) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_pcm_rb_set_sample_rate(pRB: *mut ma_pcm_rb, sampleRate: ma_uint32);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_duplex_rb {
    pub rb: ma_pcm_rb,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_duplex_rb"][::std::mem::size_of::<ma_duplex_rb>() - 152usize];
    ["Alignment of ma_duplex_rb"][::std::mem::align_of::<ma_duplex_rb>() - 8usize];
    ["Offset of field: ma_duplex_rb::rb"][::std::mem::offset_of!(ma_duplex_rb, rb) - 0usize];
};
unsafe extern "C" {
    pub fn ma_duplex_rb_init(
        captureFormat: ma_format,
        captureChannels: ma_uint32,
        sampleRate: ma_uint32,
        captureInternalSampleRate: ma_uint32,
        captureInternalPeriodSizeInFrames: ma_uint32,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pRB: *mut ma_duplex_rb,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_duplex_rb_uninit(pRB: *mut ma_duplex_rb) -> ma_result;
}
unsafe extern "C" {
    #[doc = "Miscellaneous Helpers"]
    pub fn ma_result_description(result: ma_result) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ma_malloc(
        sz: usize,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn ma_calloc(
        sz: usize,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn ma_realloc(
        p: *mut ::std::os::raw::c_void,
        sz: usize,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn ma_free(
        p: *mut ::std::os::raw::c_void,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
unsafe extern "C" {
    pub fn ma_aligned_malloc(
        sz: usize,
        alignment: usize,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn ma_aligned_free(
        p: *mut ::std::os::raw::c_void,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
unsafe extern "C" {
    pub fn ma_get_format_name(format: ma_format) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ma_blend_f32(
        pOut: *mut f32,
        pInA: *mut f32,
        pInB: *mut f32,
        factor: f32,
        channels: ma_uint32,
    );
}
unsafe extern "C" {
    pub fn ma_get_bytes_per_sample(format: ma_format) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_log_level_to_string(logLevel: ma_uint32) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[doc = "Synchronization"]
    pub fn ma_spinlock_lock(pSpinlock: *mut ma_spinlock) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_spinlock_lock_noyield(pSpinlock: *mut ma_spinlock) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_spinlock_unlock(pSpinlock: *mut ma_spinlock) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_mutex_init(pMutex: *mut ma_mutex) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_mutex_uninit(pMutex: *mut ma_mutex);
}
unsafe extern "C" {
    pub fn ma_mutex_lock(pMutex: *mut ma_mutex);
}
unsafe extern "C" {
    pub fn ma_mutex_unlock(pMutex: *mut ma_mutex);
}
unsafe extern "C" {
    pub fn ma_event_init(pEvent: *mut ma_event) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_event_uninit(pEvent: *mut ma_event);
}
unsafe extern "C" {
    pub fn ma_event_wait(pEvent: *mut ma_event) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_event_signal(pEvent: *mut ma_event) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_semaphore_init(
        initialValue: ::std::os::raw::c_int,
        pSemaphore: *mut ma_semaphore,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_semaphore_uninit(pSemaphore: *mut ma_semaphore);
}
unsafe extern "C" {
    pub fn ma_semaphore_wait(pSemaphore: *mut ma_semaphore) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_semaphore_release(pSemaphore: *mut ma_semaphore) -> ma_result;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_fence {
    pub e: ma_event,
    pub counter: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_fence"][::std::mem::size_of::<ma_fence>() - 16usize];
    ["Alignment of ma_fence"][::std::mem::align_of::<ma_fence>() - 8usize];
    ["Offset of field: ma_fence::e"][::std::mem::offset_of!(ma_fence, e) - 0usize];
    ["Offset of field: ma_fence::counter"][::std::mem::offset_of!(ma_fence, counter) - 8usize];
};
unsafe extern "C" {
    pub fn ma_fence_init(pFence: *mut ma_fence) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_fence_uninit(pFence: *mut ma_fence);
}
unsafe extern "C" {
    pub fn ma_fence_acquire(pFence: *mut ma_fence) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_fence_release(pFence: *mut ma_fence) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_fence_wait(pFence: *mut ma_fence) -> ma_result;
}
pub type ma_async_notification = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_async_notification_callbacks {
    pub onSignal:
        ::std::option::Option<unsafe extern "C" fn(pNotification: *mut ma_async_notification)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_async_notification_callbacks"]
        [::std::mem::size_of::<ma_async_notification_callbacks>() - 8usize];
    ["Alignment of ma_async_notification_callbacks"]
        [::std::mem::align_of::<ma_async_notification_callbacks>() - 8usize];
    ["Offset of field: ma_async_notification_callbacks::onSignal"]
        [::std::mem::offset_of!(ma_async_notification_callbacks, onSignal) - 0usize];
};
unsafe extern "C" {
    pub fn ma_async_notification_signal(pNotification: *mut ma_async_notification) -> ma_result;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_async_notification_poll {
    pub cb: ma_async_notification_callbacks,
    pub signalled: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_async_notification_poll"]
        [::std::mem::size_of::<ma_async_notification_poll>() - 16usize];
    ["Alignment of ma_async_notification_poll"]
        [::std::mem::align_of::<ma_async_notification_poll>() - 8usize];
    ["Offset of field: ma_async_notification_poll::cb"]
        [::std::mem::offset_of!(ma_async_notification_poll, cb) - 0usize];
    ["Offset of field: ma_async_notification_poll::signalled"]
        [::std::mem::offset_of!(ma_async_notification_poll, signalled) - 8usize];
};
unsafe extern "C" {
    pub fn ma_async_notification_poll_init(
        pNotificationPoll: *mut ma_async_notification_poll,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_async_notification_poll_is_signalled(
        pNotificationPoll: *const ma_async_notification_poll,
    ) -> ma_bool32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_async_notification_event {
    pub cb: ma_async_notification_callbacks,
    pub e: ma_event,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_async_notification_event"]
        [::std::mem::size_of::<ma_async_notification_event>() - 16usize];
    ["Alignment of ma_async_notification_event"]
        [::std::mem::align_of::<ma_async_notification_event>() - 8usize];
    ["Offset of field: ma_async_notification_event::cb"]
        [::std::mem::offset_of!(ma_async_notification_event, cb) - 0usize];
    ["Offset of field: ma_async_notification_event::e"]
        [::std::mem::offset_of!(ma_async_notification_event, e) - 8usize];
};
unsafe extern "C" {
    pub fn ma_async_notification_event_init(
        pNotificationEvent: *mut ma_async_notification_event,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_async_notification_event_uninit(
        pNotificationEvent: *mut ma_async_notification_event,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_async_notification_event_wait(
        pNotificationEvent: *mut ma_async_notification_event,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_async_notification_event_signal(
        pNotificationEvent: *mut ma_async_notification_event,
    ) -> ma_result;
}
#[doc = "Job Queue"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_slot_allocator_config {
    pub capacity: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_slot_allocator_config"]
        [::std::mem::size_of::<ma_slot_allocator_config>() - 4usize];
    ["Alignment of ma_slot_allocator_config"]
        [::std::mem::align_of::<ma_slot_allocator_config>() - 4usize];
    ["Offset of field: ma_slot_allocator_config::capacity"]
        [::std::mem::offset_of!(ma_slot_allocator_config, capacity) - 0usize];
};
unsafe extern "C" {
    pub fn ma_slot_allocator_config_init(capacity: ma_uint32) -> ma_slot_allocator_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_slot_allocator_group {
    pub bitfield: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_slot_allocator_group"][::std::mem::size_of::<ma_slot_allocator_group>() - 4usize];
    ["Alignment of ma_slot_allocator_group"]
        [::std::mem::align_of::<ma_slot_allocator_group>() - 4usize];
    ["Offset of field: ma_slot_allocator_group::bitfield"]
        [::std::mem::offset_of!(ma_slot_allocator_group, bitfield) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_slot_allocator {
    pub pGroups: *mut ma_slot_allocator_group,
    pub pSlots: *mut ma_uint32,
    pub count: ma_uint32,
    pub capacity: ma_uint32,
    pub _ownsHeap: ma_bool32,
    pub _pHeap: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_slot_allocator"][::std::mem::size_of::<ma_slot_allocator>() - 40usize];
    ["Alignment of ma_slot_allocator"][::std::mem::align_of::<ma_slot_allocator>() - 8usize];
    ["Offset of field: ma_slot_allocator::pGroups"]
        [::std::mem::offset_of!(ma_slot_allocator, pGroups) - 0usize];
    ["Offset of field: ma_slot_allocator::pSlots"]
        [::std::mem::offset_of!(ma_slot_allocator, pSlots) - 8usize];
    ["Offset of field: ma_slot_allocator::count"]
        [::std::mem::offset_of!(ma_slot_allocator, count) - 16usize];
    ["Offset of field: ma_slot_allocator::capacity"]
        [::std::mem::offset_of!(ma_slot_allocator, capacity) - 20usize];
    ["Offset of field: ma_slot_allocator::_ownsHeap"]
        [::std::mem::offset_of!(ma_slot_allocator, _ownsHeap) - 24usize];
    ["Offset of field: ma_slot_allocator::_pHeap"]
        [::std::mem::offset_of!(ma_slot_allocator, _pHeap) - 32usize];
};
unsafe extern "C" {
    pub fn ma_slot_allocator_get_heap_size(
        pConfig: *const ma_slot_allocator_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_slot_allocator_init_preallocated(
        pConfig: *const ma_slot_allocator_config,
        pHeap: *mut ::std::os::raw::c_void,
        pAllocator: *mut ma_slot_allocator,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_slot_allocator_init(
        pConfig: *const ma_slot_allocator_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pAllocator: *mut ma_slot_allocator,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_slot_allocator_uninit(
        pAllocator: *mut ma_slot_allocator,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
unsafe extern "C" {
    pub fn ma_slot_allocator_alloc(
        pAllocator: *mut ma_slot_allocator,
        pSlot: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_slot_allocator_free(pAllocator: *mut ma_slot_allocator, slot: ma_uint64)
        -> ma_result;
}
pub type ma_job_proc = ::std::option::Option<unsafe extern "C" fn(pJob: *mut ma_job) -> ma_result>;
pub const ma_job_type_MA_JOB_TYPE_QUIT: ma_job_type = 0;
pub const ma_job_type_MA_JOB_TYPE_CUSTOM: ma_job_type = 1;
pub const ma_job_type_MA_JOB_TYPE_RESOURCE_MANAGER_LOAD_DATA_BUFFER_NODE: ma_job_type = 2;
pub const ma_job_type_MA_JOB_TYPE_RESOURCE_MANAGER_FREE_DATA_BUFFER_NODE: ma_job_type = 3;
pub const ma_job_type_MA_JOB_TYPE_RESOURCE_MANAGER_PAGE_DATA_BUFFER_NODE: ma_job_type = 4;
pub const ma_job_type_MA_JOB_TYPE_RESOURCE_MANAGER_LOAD_DATA_BUFFER: ma_job_type = 5;
pub const ma_job_type_MA_JOB_TYPE_RESOURCE_MANAGER_FREE_DATA_BUFFER: ma_job_type = 6;
pub const ma_job_type_MA_JOB_TYPE_RESOURCE_MANAGER_LOAD_DATA_STREAM: ma_job_type = 7;
pub const ma_job_type_MA_JOB_TYPE_RESOURCE_MANAGER_FREE_DATA_STREAM: ma_job_type = 8;
pub const ma_job_type_MA_JOB_TYPE_RESOURCE_MANAGER_PAGE_DATA_STREAM: ma_job_type = 9;
pub const ma_job_type_MA_JOB_TYPE_RESOURCE_MANAGER_SEEK_DATA_STREAM: ma_job_type = 10;
pub const ma_job_type_MA_JOB_TYPE_DEVICE_AAUDIO_REROUTE: ma_job_type = 11;
pub const ma_job_type_MA_JOB_TYPE_COUNT: ma_job_type = 12;
pub type ma_job_type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_job {
    pub toc: ma_job__bindgen_ty_1,
    pub next: ma_uint64,
    pub order: ma_uint32,
    pub data: ma_job__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_job__bindgen_ty_1 {
    pub breakup: ma_job__bindgen_ty_1__bindgen_ty_1,
    pub allocation: ma_uint64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job__bindgen_ty_1__bindgen_ty_1 {
    pub code: ma_uint16,
    pub slot: ma_uint16,
    pub refcount: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_job__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ma_job__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of ma_job__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ma_job__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: ma_job__bindgen_ty_1__bindgen_ty_1::code"]
        [::std::mem::offset_of!(ma_job__bindgen_ty_1__bindgen_ty_1, code) - 0usize];
    ["Offset of field: ma_job__bindgen_ty_1__bindgen_ty_1::slot"]
        [::std::mem::offset_of!(ma_job__bindgen_ty_1__bindgen_ty_1, slot) - 2usize];
    ["Offset of field: ma_job__bindgen_ty_1__bindgen_ty_1::refcount"]
        [::std::mem::offset_of!(ma_job__bindgen_ty_1__bindgen_ty_1, refcount) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_job__bindgen_ty_1"][::std::mem::size_of::<ma_job__bindgen_ty_1>() - 8usize];
    ["Alignment of ma_job__bindgen_ty_1"][::std::mem::align_of::<ma_job__bindgen_ty_1>() - 8usize];
    ["Offset of field: ma_job__bindgen_ty_1::breakup"]
        [::std::mem::offset_of!(ma_job__bindgen_ty_1, breakup) - 0usize];
    ["Offset of field: ma_job__bindgen_ty_1::allocation"]
        [::std::mem::offset_of!(ma_job__bindgen_ty_1, allocation) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_job__bindgen_ty_2 {
    pub custom: ma_job__bindgen_ty_2__bindgen_ty_1,
    pub resourceManager: ma_job__bindgen_ty_2__bindgen_ty_2,
    pub device: ma_job__bindgen_ty_2__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job__bindgen_ty_2__bindgen_ty_1 {
    pub proc_: ma_job_proc,
    pub data0: ma_uintptr,
    pub data1: ma_uintptr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_job__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_1>() - 24usize];
    ["Alignment of ma_job__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_1::proc_"]
        [::std::mem::offset_of!(ma_job__bindgen_ty_2__bindgen_ty_1, proc_) - 0usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_1::data0"]
        [::std::mem::offset_of!(ma_job__bindgen_ty_2__bindgen_ty_1, data0) - 8usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_1::data1"]
        [::std::mem::offset_of!(ma_job__bindgen_ty_2__bindgen_ty_1, data1) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_job__bindgen_ty_2__bindgen_ty_2 {
    pub loadDataBufferNode: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1,
    pub freeDataBufferNode: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_2,
    pub pageDataBufferNode: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3,
    pub loadDataBuffer: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4,
    pub freeDataBuffer: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_5,
    pub loadDataStream: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6,
    pub freeDataStream: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_7,
    pub pageDataStream: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_8,
    pub seekDataStream: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_9,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1 {
    pub pResourceManager: *mut ::std::os::raw::c_void,
    pub pDataBufferNode: *mut ::std::os::raw::c_void,
    pub pFilePath: *mut ::std::os::raw::c_char,
    pub pFilePathW: *mut wchar_t,
    pub flags: ma_uint32,
    pub pInitNotification: *mut ma_async_notification,
    pub pDoneNotification: *mut ma_async_notification,
    pub pInitFence: *mut ma_fence,
    pub pDoneFence: *mut ma_fence,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1>() - 72usize];
    ["Alignment of ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1::pResourceManager"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1,
        pResourceManager
    )
        - 0usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1::pDataBufferNode"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1,
        pDataBufferNode
    )
        - 8usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1::pFilePath"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1,
        pFilePath
    ) - 16usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1::pFilePathW"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1,
        pFilePathW
    ) - 24usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1::flags"]
        [::std::mem::offset_of!(ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1, flags) - 32usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1::pInitNotification"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1,
        pInitNotification
    )
        - 40usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1::pDoneNotification"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1,
        pDoneNotification
    )
        - 48usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1::pInitFence"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1,
        pInitFence
    ) - 56usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1::pDoneFence"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1,
        pDoneFence
    ) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_2 {
    pub pResourceManager: *mut ::std::os::raw::c_void,
    pub pDataBufferNode: *mut ::std::os::raw::c_void,
    pub pDoneNotification: *mut ma_async_notification,
    pub pDoneFence: *mut ma_fence,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_2"]
        [::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_2>() - 32usize];
    ["Alignment of ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_2"]
        [::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_2>() - 8usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_2::pResourceManager"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_2,
        pResourceManager
    )
        - 0usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_2::pDataBufferNode"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_2,
        pDataBufferNode
    )
        - 8usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_2::pDoneNotification"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_2,
        pDoneNotification
    )
        - 16usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_2::pDoneFence"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_2,
        pDoneFence
    ) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3 {
    pub pResourceManager: *mut ::std::os::raw::c_void,
    pub pDataBufferNode: *mut ::std::os::raw::c_void,
    pub pDecoder: *mut ::std::os::raw::c_void,
    pub pDoneNotification: *mut ma_async_notification,
    pub pDoneFence: *mut ma_fence,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3"]
        [::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3>() - 40usize];
    ["Alignment of ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3"]
        [::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3>() - 8usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3::pResourceManager"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3,
        pResourceManager
    )
        - 0usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3::pDataBufferNode"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3,
        pDataBufferNode
    )
        - 8usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3::pDecoder"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3,
        pDecoder
    ) - 16usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3::pDoneNotification"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3,
        pDoneNotification
    )
        - 24usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3::pDoneFence"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_3,
        pDoneFence
    ) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4 {
    pub pDataBuffer: *mut ::std::os::raw::c_void,
    pub pInitNotification: *mut ma_async_notification,
    pub pDoneNotification: *mut ma_async_notification,
    pub pInitFence: *mut ma_fence,
    pub pDoneFence: *mut ma_fence,
    pub rangeBegInPCMFrames: ma_uint64,
    pub rangeEndInPCMFrames: ma_uint64,
    pub loopPointBegInPCMFrames: ma_uint64,
    pub loopPointEndInPCMFrames: ma_uint64,
    pub isLooping: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4"]
        [::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4>() - 80usize];
    ["Alignment of ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4"]
        [::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4>() - 8usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4::pDataBuffer"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4,
        pDataBuffer
    ) - 0usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4::pInitNotification"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4,
        pInitNotification
    )
        - 8usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4::pDoneNotification"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4,
        pDoneNotification
    )
        - 16usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4::pInitFence"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4,
        pInitFence
    ) - 24usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4::pDoneFence"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4,
        pDoneFence
    ) - 32usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4::rangeBegInPCMFrames"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4,
        rangeBegInPCMFrames
    )
        - 40usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4::rangeEndInPCMFrames"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4,
        rangeEndInPCMFrames
    )
        - 48usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4::loopPointBegInPCMFrames"] [:: std :: mem :: offset_of ! (ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4 , loopPointBegInPCMFrames) - 56usize] ;
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4::loopPointEndInPCMFrames"] [:: std :: mem :: offset_of ! (ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4 , loopPointEndInPCMFrames) - 64usize] ;
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4::isLooping"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_4,
        isLooping
    ) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_5 {
    pub pDataBuffer: *mut ::std::os::raw::c_void,
    pub pDoneNotification: *mut ma_async_notification,
    pub pDoneFence: *mut ma_fence,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_5"]
        [::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_5>() - 24usize];
    ["Alignment of ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_5"]
        [::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_5>() - 8usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_5::pDataBuffer"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_5,
        pDataBuffer
    ) - 0usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_5::pDoneNotification"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_5,
        pDoneNotification
    )
        - 8usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_5::pDoneFence"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_5,
        pDoneFence
    ) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6 {
    pub pDataStream: *mut ::std::os::raw::c_void,
    pub pFilePath: *mut ::std::os::raw::c_char,
    pub pFilePathW: *mut wchar_t,
    pub initialSeekPoint: ma_uint64,
    pub pInitNotification: *mut ma_async_notification,
    pub pInitFence: *mut ma_fence,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6"]
        [::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6>() - 48usize];
    ["Alignment of ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6"]
        [::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6>() - 8usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6::pDataStream"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6,
        pDataStream
    ) - 0usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6::pFilePath"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6,
        pFilePath
    ) - 8usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6::pFilePathW"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6,
        pFilePathW
    ) - 16usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6::initialSeekPoint"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6,
        initialSeekPoint
    )
        - 24usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6::pInitNotification"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6,
        pInitNotification
    )
        - 32usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6::pInitFence"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_6,
        pInitFence
    ) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_7 {
    pub pDataStream: *mut ::std::os::raw::c_void,
    pub pDoneNotification: *mut ma_async_notification,
    pub pDoneFence: *mut ma_fence,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_7"]
        [::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_7>() - 24usize];
    ["Alignment of ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_7"]
        [::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_7>() - 8usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_7::pDataStream"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_7,
        pDataStream
    ) - 0usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_7::pDoneNotification"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_7,
        pDoneNotification
    )
        - 8usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_7::pDoneFence"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_7,
        pDoneFence
    ) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_8 {
    pub pDataStream: *mut ::std::os::raw::c_void,
    pub pageIndex: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_8"]
        [::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_8>() - 16usize];
    ["Alignment of ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_8"]
        [::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_8>() - 8usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_8::pDataStream"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_8,
        pDataStream
    ) - 0usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_8::pageIndex"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_8,
        pageIndex
    ) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_9 {
    pub pDataStream: *mut ::std::os::raw::c_void,
    pub frameIndex: ma_uint64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_9"]
        [::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_9>() - 16usize];
    ["Alignment of ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_9"]
        [::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_9>() - 8usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_9::pDataStream"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_9,
        pDataStream
    ) - 0usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_9::frameIndex"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_2__bindgen_ty_9,
        frameIndex
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_job__bindgen_ty_2__bindgen_ty_2"]
        [::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_2>() - 80usize];
    ["Alignment of ma_job__bindgen_ty_2__bindgen_ty_2"]
        [::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_2>() - 8usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2::loadDataBufferNode"]
        [::std::mem::offset_of!(ma_job__bindgen_ty_2__bindgen_ty_2, loadDataBufferNode) - 0usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2::freeDataBufferNode"]
        [::std::mem::offset_of!(ma_job__bindgen_ty_2__bindgen_ty_2, freeDataBufferNode) - 0usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2::pageDataBufferNode"]
        [::std::mem::offset_of!(ma_job__bindgen_ty_2__bindgen_ty_2, pageDataBufferNode) - 0usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2::loadDataBuffer"]
        [::std::mem::offset_of!(ma_job__bindgen_ty_2__bindgen_ty_2, loadDataBuffer) - 0usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2::freeDataBuffer"]
        [::std::mem::offset_of!(ma_job__bindgen_ty_2__bindgen_ty_2, freeDataBuffer) - 0usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2::loadDataStream"]
        [::std::mem::offset_of!(ma_job__bindgen_ty_2__bindgen_ty_2, loadDataStream) - 0usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2::freeDataStream"]
        [::std::mem::offset_of!(ma_job__bindgen_ty_2__bindgen_ty_2, freeDataStream) - 0usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2::pageDataStream"]
        [::std::mem::offset_of!(ma_job__bindgen_ty_2__bindgen_ty_2, pageDataStream) - 0usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_2::seekDataStream"]
        [::std::mem::offset_of!(ma_job__bindgen_ty_2__bindgen_ty_2, seekDataStream) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_job__bindgen_ty_2__bindgen_ty_3 {
    pub aaudio: ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1 {
    pub reroute: ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1 {
    pub pDevice: *mut ::std::os::raw::c_void,
    pub deviceType: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1,
    >() - 16usize];
    ["Alignment of ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1::pDevice"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1,
        pDevice
    )
        - 0usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1::deviceType"] [:: std :: mem :: offset_of ! (ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1 , deviceType) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1"]
        [::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1>() - 16usize];
    ["Alignment of ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1"]
        [::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1>() - 8usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1::reroute"][::std::mem::offset_of!(
        ma_job__bindgen_ty_2__bindgen_ty_3__bindgen_ty_1,
        reroute
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_job__bindgen_ty_2__bindgen_ty_3"]
        [::std::mem::size_of::<ma_job__bindgen_ty_2__bindgen_ty_3>() - 16usize];
    ["Alignment of ma_job__bindgen_ty_2__bindgen_ty_3"]
        [::std::mem::align_of::<ma_job__bindgen_ty_2__bindgen_ty_3>() - 8usize];
    ["Offset of field: ma_job__bindgen_ty_2__bindgen_ty_3::aaudio"]
        [::std::mem::offset_of!(ma_job__bindgen_ty_2__bindgen_ty_3, aaudio) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_job__bindgen_ty_2"][::std::mem::size_of::<ma_job__bindgen_ty_2>() - 80usize];
    ["Alignment of ma_job__bindgen_ty_2"][::std::mem::align_of::<ma_job__bindgen_ty_2>() - 8usize];
    ["Offset of field: ma_job__bindgen_ty_2::custom"]
        [::std::mem::offset_of!(ma_job__bindgen_ty_2, custom) - 0usize];
    ["Offset of field: ma_job__bindgen_ty_2::resourceManager"]
        [::std::mem::offset_of!(ma_job__bindgen_ty_2, resourceManager) - 0usize];
    ["Offset of field: ma_job__bindgen_ty_2::device"]
        [::std::mem::offset_of!(ma_job__bindgen_ty_2, device) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_job"][::std::mem::size_of::<ma_job>() - 104usize];
    ["Alignment of ma_job"][::std::mem::align_of::<ma_job>() - 8usize];
    ["Offset of field: ma_job::toc"][::std::mem::offset_of!(ma_job, toc) - 0usize];
    ["Offset of field: ma_job::next"][::std::mem::offset_of!(ma_job, next) - 8usize];
    ["Offset of field: ma_job::order"][::std::mem::offset_of!(ma_job, order) - 16usize];
    ["Offset of field: ma_job::data"][::std::mem::offset_of!(ma_job, data) - 24usize];
};
unsafe extern "C" {
    pub fn ma_job_init(code: ma_uint16) -> ma_job;
}
unsafe extern "C" {
    pub fn ma_job_process(pJob: *mut ma_job) -> ma_result;
}
pub const ma_job_queue_flags_MA_JOB_QUEUE_FLAG_NON_BLOCKING: ma_job_queue_flags = 1;
pub type ma_job_queue_flags = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job_queue_config {
    pub flags: ma_uint32,
    pub capacity: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_job_queue_config"][::std::mem::size_of::<ma_job_queue_config>() - 8usize];
    ["Alignment of ma_job_queue_config"][::std::mem::align_of::<ma_job_queue_config>() - 4usize];
    ["Offset of field: ma_job_queue_config::flags"]
        [::std::mem::offset_of!(ma_job_queue_config, flags) - 0usize];
    ["Offset of field: ma_job_queue_config::capacity"]
        [::std::mem::offset_of!(ma_job_queue_config, capacity) - 4usize];
};
unsafe extern "C" {
    pub fn ma_job_queue_config_init(flags: ma_uint32, capacity: ma_uint32) -> ma_job_queue_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_job_queue {
    pub flags: ma_uint32,
    pub capacity: ma_uint32,
    pub head: ma_uint64,
    pub tail: ma_uint64,
    pub sem: ma_semaphore,
    pub allocator: ma_slot_allocator,
    pub pJobs: *mut ma_job,
    pub lock: ma_spinlock,
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_job_queue"][::std::mem::size_of::<ma_job_queue>() - 104usize];
    ["Alignment of ma_job_queue"][::std::mem::align_of::<ma_job_queue>() - 8usize];
    ["Offset of field: ma_job_queue::flags"][::std::mem::offset_of!(ma_job_queue, flags) - 0usize];
    ["Offset of field: ma_job_queue::capacity"]
        [::std::mem::offset_of!(ma_job_queue, capacity) - 4usize];
    ["Offset of field: ma_job_queue::head"][::std::mem::offset_of!(ma_job_queue, head) - 8usize];
    ["Offset of field: ma_job_queue::tail"][::std::mem::offset_of!(ma_job_queue, tail) - 16usize];
    ["Offset of field: ma_job_queue::sem"][::std::mem::offset_of!(ma_job_queue, sem) - 24usize];
    ["Offset of field: ma_job_queue::allocator"]
        [::std::mem::offset_of!(ma_job_queue, allocator) - 32usize];
    ["Offset of field: ma_job_queue::pJobs"][::std::mem::offset_of!(ma_job_queue, pJobs) - 72usize];
    ["Offset of field: ma_job_queue::lock"][::std::mem::offset_of!(ma_job_queue, lock) - 80usize];
    ["Offset of field: ma_job_queue::_pHeap"]
        [::std::mem::offset_of!(ma_job_queue, _pHeap) - 88usize];
    ["Offset of field: ma_job_queue::_ownsHeap"]
        [::std::mem::offset_of!(ma_job_queue, _ownsHeap) - 96usize];
};
unsafe extern "C" {
    pub fn ma_job_queue_get_heap_size(
        pConfig: *const ma_job_queue_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_job_queue_init_preallocated(
        pConfig: *const ma_job_queue_config,
        pHeap: *mut ::std::os::raw::c_void,
        pQueue: *mut ma_job_queue,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_job_queue_init(
        pConfig: *const ma_job_queue_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pQueue: *mut ma_job_queue,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_job_queue_uninit(
        pQueue: *mut ma_job_queue,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
unsafe extern "C" {
    pub fn ma_job_queue_post(pQueue: *mut ma_job_queue, pJob: *const ma_job) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_job_queue_next(pQueue: *mut ma_job_queue, pJob: *mut ma_job) -> ma_result;
}
pub const ma_device_state_ma_device_state_uninitialized: ma_device_state = 0;
pub const ma_device_state_ma_device_state_stopped: ma_device_state = 1;
pub const ma_device_state_ma_device_state_started: ma_device_state = 2;
pub const ma_device_state_ma_device_state_starting: ma_device_state = 3;
pub const ma_device_state_ma_device_state_stopping: ma_device_state = 4;
pub type ma_device_state = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_atomic_device_state {
    pub value: ma_device_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_atomic_device_state"][::std::mem::size_of::<ma_atomic_device_state>() - 4usize];
    ["Alignment of ma_atomic_device_state"]
        [::std::mem::align_of::<ma_atomic_device_state>() - 4usize];
    ["Offset of field: ma_atomic_device_state::value"]
        [::std::mem::offset_of!(ma_atomic_device_state, value) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_IMMNotificationClient {
    pub lpVtbl: *mut ::std::os::raw::c_void,
    pub counter: ma_uint32,
    pub pDevice: *mut ma_device,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_IMMNotificationClient"]
        [::std::mem::size_of::<ma_IMMNotificationClient>() - 24usize];
    ["Alignment of ma_IMMNotificationClient"]
        [::std::mem::align_of::<ma_IMMNotificationClient>() - 8usize];
    ["Offset of field: ma_IMMNotificationClient::lpVtbl"]
        [::std::mem::offset_of!(ma_IMMNotificationClient, lpVtbl) - 0usize];
    ["Offset of field: ma_IMMNotificationClient::counter"]
        [::std::mem::offset_of!(ma_IMMNotificationClient, counter) - 8usize];
    ["Offset of field: ma_IMMNotificationClient::pDevice"]
        [::std::mem::offset_of!(ma_IMMNotificationClient, pDevice) - 16usize];
};
pub const ma_backend_ma_backend_wasapi: ma_backend = 0;
pub const ma_backend_ma_backend_dsound: ma_backend = 1;
pub const ma_backend_ma_backend_winmm: ma_backend = 2;
pub const ma_backend_ma_backend_coreaudio: ma_backend = 3;
pub const ma_backend_ma_backend_sndio: ma_backend = 4;
pub const ma_backend_ma_backend_audio4: ma_backend = 5;
pub const ma_backend_ma_backend_oss: ma_backend = 6;
pub const ma_backend_ma_backend_pulseaudio: ma_backend = 7;
pub const ma_backend_ma_backend_alsa: ma_backend = 8;
pub const ma_backend_ma_backend_jack: ma_backend = 9;
pub const ma_backend_ma_backend_aaudio: ma_backend = 10;
pub const ma_backend_ma_backend_opensl: ma_backend = 11;
pub const ma_backend_ma_backend_webaudio: ma_backend = 12;
pub const ma_backend_ma_backend_custom: ma_backend = 13;
pub const ma_backend_ma_backend_null: ma_backend = 14;
pub type ma_backend = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_job_thread_config {
    pub noThread: ma_bool32,
    pub jobQueueCapacity: ma_uint32,
    pub jobQueueFlags: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device_job_thread_config"]
        [::std::mem::size_of::<ma_device_job_thread_config>() - 12usize];
    ["Alignment of ma_device_job_thread_config"]
        [::std::mem::align_of::<ma_device_job_thread_config>() - 4usize];
    ["Offset of field: ma_device_job_thread_config::noThread"]
        [::std::mem::offset_of!(ma_device_job_thread_config, noThread) - 0usize];
    ["Offset of field: ma_device_job_thread_config::jobQueueCapacity"]
        [::std::mem::offset_of!(ma_device_job_thread_config, jobQueueCapacity) - 4usize];
    ["Offset of field: ma_device_job_thread_config::jobQueueFlags"]
        [::std::mem::offset_of!(ma_device_job_thread_config, jobQueueFlags) - 8usize];
};
unsafe extern "C" {
    pub fn ma_device_job_thread_config_init() -> ma_device_job_thread_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_job_thread {
    pub thread: ma_thread,
    pub jobQueue: ma_job_queue,
    pub _hasThread: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device_job_thread"][::std::mem::size_of::<ma_device_job_thread>() - 120usize];
    ["Alignment of ma_device_job_thread"][::std::mem::align_of::<ma_device_job_thread>() - 8usize];
    ["Offset of field: ma_device_job_thread::thread"]
        [::std::mem::offset_of!(ma_device_job_thread, thread) - 0usize];
    ["Offset of field: ma_device_job_thread::jobQueue"]
        [::std::mem::offset_of!(ma_device_job_thread, jobQueue) - 8usize];
    ["Offset of field: ma_device_job_thread::_hasThread"]
        [::std::mem::offset_of!(ma_device_job_thread, _hasThread) - 112usize];
};
unsafe extern "C" {
    pub fn ma_device_job_thread_init(
        pConfig: *const ma_device_job_thread_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pJobThread: *mut ma_device_job_thread,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_device_job_thread_uninit(
        pJobThread: *mut ma_device_job_thread,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
unsafe extern "C" {
    pub fn ma_device_job_thread_post(
        pJobThread: *mut ma_device_job_thread,
        pJob: *const ma_job,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_device_job_thread_next(
        pJobThread: *mut ma_device_job_thread,
        pJob: *mut ma_job,
    ) -> ma_result;
}
pub const ma_device_notification_type_ma_device_notification_type_started:
    ma_device_notification_type = 0;
pub const ma_device_notification_type_ma_device_notification_type_stopped:
    ma_device_notification_type = 1;
pub const ma_device_notification_type_ma_device_notification_type_rerouted:
    ma_device_notification_type = 2;
pub const ma_device_notification_type_ma_device_notification_type_interruption_began:
    ma_device_notification_type = 3;
pub const ma_device_notification_type_ma_device_notification_type_interruption_ended:
    ma_device_notification_type = 4;
pub const ma_device_notification_type_ma_device_notification_type_unlocked:
    ma_device_notification_type = 5;
pub type ma_device_notification_type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_device_notification {
    pub pDevice: *mut ma_device,
    pub type_: ma_device_notification_type,
    pub data: ma_device_notification__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_device_notification__bindgen_ty_1 {
    pub started: ma_device_notification__bindgen_ty_1__bindgen_ty_1,
    pub stopped: ma_device_notification__bindgen_ty_1__bindgen_ty_2,
    pub rerouted: ma_device_notification__bindgen_ty_1__bindgen_ty_3,
    pub interruption: ma_device_notification__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_notification__bindgen_ty_1__bindgen_ty_1 {
    pub _unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device_notification__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ma_device_notification__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of ma_device_notification__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ma_device_notification__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: ma_device_notification__bindgen_ty_1__bindgen_ty_1::_unused"][::std::mem::offset_of!(
        ma_device_notification__bindgen_ty_1__bindgen_ty_1,
        _unused
    ) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_notification__bindgen_ty_1__bindgen_ty_2 {
    pub _unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device_notification__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<ma_device_notification__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Alignment of ma_device_notification__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<ma_device_notification__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: ma_device_notification__bindgen_ty_1__bindgen_ty_2::_unused"][::std::mem::offset_of!(
        ma_device_notification__bindgen_ty_1__bindgen_ty_2,
        _unused
    ) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_notification__bindgen_ty_1__bindgen_ty_3 {
    pub _unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device_notification__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<ma_device_notification__bindgen_ty_1__bindgen_ty_3>() - 4usize];
    ["Alignment of ma_device_notification__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<ma_device_notification__bindgen_ty_1__bindgen_ty_3>() - 4usize];
    ["Offset of field: ma_device_notification__bindgen_ty_1__bindgen_ty_3::_unused"][::std::mem::offset_of!(
        ma_device_notification__bindgen_ty_1__bindgen_ty_3,
        _unused
    ) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_notification__bindgen_ty_1__bindgen_ty_4 {
    pub _unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device_notification__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<ma_device_notification__bindgen_ty_1__bindgen_ty_4>() - 4usize];
    ["Alignment of ma_device_notification__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<ma_device_notification__bindgen_ty_1__bindgen_ty_4>() - 4usize];
    ["Offset of field: ma_device_notification__bindgen_ty_1__bindgen_ty_4::_unused"][::std::mem::offset_of!(
        ma_device_notification__bindgen_ty_1__bindgen_ty_4,
        _unused
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device_notification__bindgen_ty_1"]
        [::std::mem::size_of::<ma_device_notification__bindgen_ty_1>() - 4usize];
    ["Alignment of ma_device_notification__bindgen_ty_1"]
        [::std::mem::align_of::<ma_device_notification__bindgen_ty_1>() - 4usize];
    ["Offset of field: ma_device_notification__bindgen_ty_1::started"]
        [::std::mem::offset_of!(ma_device_notification__bindgen_ty_1, started) - 0usize];
    ["Offset of field: ma_device_notification__bindgen_ty_1::stopped"]
        [::std::mem::offset_of!(ma_device_notification__bindgen_ty_1, stopped) - 0usize];
    ["Offset of field: ma_device_notification__bindgen_ty_1::rerouted"]
        [::std::mem::offset_of!(ma_device_notification__bindgen_ty_1, rerouted) - 0usize];
    ["Offset of field: ma_device_notification__bindgen_ty_1::interruption"]
        [::std::mem::offset_of!(ma_device_notification__bindgen_ty_1, interruption) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device_notification"][::std::mem::size_of::<ma_device_notification>() - 16usize];
    ["Alignment of ma_device_notification"]
        [::std::mem::align_of::<ma_device_notification>() - 8usize];
    ["Offset of field: ma_device_notification::pDevice"]
        [::std::mem::offset_of!(ma_device_notification, pDevice) - 0usize];
    ["Offset of field: ma_device_notification::type_"]
        [::std::mem::offset_of!(ma_device_notification, type_) - 8usize];
    ["Offset of field: ma_device_notification::data"]
        [::std::mem::offset_of!(ma_device_notification, data) - 12usize];
};
pub type ma_device_notification_proc =
    ::std::option::Option<unsafe extern "C" fn(pNotification: *const ma_device_notification)>;
pub type ma_device_data_proc = ::std::option::Option<
    unsafe extern "C" fn(
        pDevice: *mut ma_device,
        pOutput: *mut ::std::os::raw::c_void,
        pInput: *const ::std::os::raw::c_void,
        frameCount: ma_uint32,
    ),
>;
pub type ma_stop_proc = ::std::option::Option<unsafe extern "C" fn(pDevice: *mut ma_device)>;
pub const ma_device_type_ma_device_type_playback: ma_device_type = 1;
pub const ma_device_type_ma_device_type_capture: ma_device_type = 2;
pub const ma_device_type_ma_device_type_duplex: ma_device_type = 3;
pub const ma_device_type_ma_device_type_loopback: ma_device_type = 4;
pub type ma_device_type = ::std::os::raw::c_int;
pub const ma_share_mode_ma_share_mode_shared: ma_share_mode = 0;
pub const ma_share_mode_ma_share_mode_exclusive: ma_share_mode = 1;
pub type ma_share_mode = ::std::os::raw::c_int;
pub const ma_ios_session_category_ma_ios_session_category_default: ma_ios_session_category = 0;
pub const ma_ios_session_category_ma_ios_session_category_none: ma_ios_session_category = 1;
pub const ma_ios_session_category_ma_ios_session_category_ambient: ma_ios_session_category = 2;
pub const ma_ios_session_category_ma_ios_session_category_solo_ambient: ma_ios_session_category = 3;
pub const ma_ios_session_category_ma_ios_session_category_playback: ma_ios_session_category = 4;
pub const ma_ios_session_category_ma_ios_session_category_record: ma_ios_session_category = 5;
pub const ma_ios_session_category_ma_ios_session_category_play_and_record: ma_ios_session_category =
    6;
pub const ma_ios_session_category_ma_ios_session_category_multi_route: ma_ios_session_category = 7;
pub type ma_ios_session_category = ::std::os::raw::c_int;
pub const ma_ios_session_category_option_ma_ios_session_category_option_mix_with_others:
    ma_ios_session_category_option = 1;
pub const ma_ios_session_category_option_ma_ios_session_category_option_duck_others:
    ma_ios_session_category_option = 2;
pub const ma_ios_session_category_option_ma_ios_session_category_option_allow_bluetooth:
    ma_ios_session_category_option = 4;
pub const ma_ios_session_category_option_ma_ios_session_category_option_default_to_speaker:
    ma_ios_session_category_option = 8;
pub const ma_ios_session_category_option_ma_ios_session_category_option_interrupt_spoken_audio_and_mix_with_others : ma_ios_session_category_option = 17 ;
pub const ma_ios_session_category_option_ma_ios_session_category_option_allow_bluetooth_a2dp:
    ma_ios_session_category_option = 32;
pub const ma_ios_session_category_option_ma_ios_session_category_option_allow_air_play:
    ma_ios_session_category_option = 64;
pub type ma_ios_session_category_option = ::std::os::raw::c_int;
pub const ma_opensl_stream_type_ma_opensl_stream_type_default: ma_opensl_stream_type = 0;
pub const ma_opensl_stream_type_ma_opensl_stream_type_voice: ma_opensl_stream_type = 1;
pub const ma_opensl_stream_type_ma_opensl_stream_type_system: ma_opensl_stream_type = 2;
pub const ma_opensl_stream_type_ma_opensl_stream_type_ring: ma_opensl_stream_type = 3;
pub const ma_opensl_stream_type_ma_opensl_stream_type_media: ma_opensl_stream_type = 4;
pub const ma_opensl_stream_type_ma_opensl_stream_type_alarm: ma_opensl_stream_type = 5;
pub const ma_opensl_stream_type_ma_opensl_stream_type_notification: ma_opensl_stream_type = 6;
pub type ma_opensl_stream_type = ::std::os::raw::c_int;
pub const ma_opensl_recording_preset_ma_opensl_recording_preset_default:
    ma_opensl_recording_preset = 0;
pub const ma_opensl_recording_preset_ma_opensl_recording_preset_generic:
    ma_opensl_recording_preset = 1;
pub const ma_opensl_recording_preset_ma_opensl_recording_preset_camcorder:
    ma_opensl_recording_preset = 2;
pub const ma_opensl_recording_preset_ma_opensl_recording_preset_voice_recognition:
    ma_opensl_recording_preset = 3;
pub const ma_opensl_recording_preset_ma_opensl_recording_preset_voice_communication:
    ma_opensl_recording_preset = 4;
pub const ma_opensl_recording_preset_ma_opensl_recording_preset_voice_unprocessed:
    ma_opensl_recording_preset = 5;
pub type ma_opensl_recording_preset = ::std::os::raw::c_int;
pub const ma_wasapi_usage_ma_wasapi_usage_default: ma_wasapi_usage = 0;
pub const ma_wasapi_usage_ma_wasapi_usage_games: ma_wasapi_usage = 1;
pub const ma_wasapi_usage_ma_wasapi_usage_pro_audio: ma_wasapi_usage = 2;
pub type ma_wasapi_usage = ::std::os::raw::c_int;
pub const ma_aaudio_usage_ma_aaudio_usage_default: ma_aaudio_usage = 0;
pub const ma_aaudio_usage_ma_aaudio_usage_media: ma_aaudio_usage = 1;
pub const ma_aaudio_usage_ma_aaudio_usage_voice_communication: ma_aaudio_usage = 2;
pub const ma_aaudio_usage_ma_aaudio_usage_voice_communication_signalling: ma_aaudio_usage = 3;
pub const ma_aaudio_usage_ma_aaudio_usage_alarm: ma_aaudio_usage = 4;
pub const ma_aaudio_usage_ma_aaudio_usage_notification: ma_aaudio_usage = 5;
pub const ma_aaudio_usage_ma_aaudio_usage_notification_ringtone: ma_aaudio_usage = 6;
pub const ma_aaudio_usage_ma_aaudio_usage_notification_event: ma_aaudio_usage = 7;
pub const ma_aaudio_usage_ma_aaudio_usage_assistance_accessibility: ma_aaudio_usage = 8;
pub const ma_aaudio_usage_ma_aaudio_usage_assistance_navigation_guidance: ma_aaudio_usage = 9;
pub const ma_aaudio_usage_ma_aaudio_usage_assistance_sonification: ma_aaudio_usage = 10;
pub const ma_aaudio_usage_ma_aaudio_usage_game: ma_aaudio_usage = 11;
pub const ma_aaudio_usage_ma_aaudio_usage_assitant: ma_aaudio_usage = 12;
pub const ma_aaudio_usage_ma_aaudio_usage_emergency: ma_aaudio_usage = 13;
pub const ma_aaudio_usage_ma_aaudio_usage_safety: ma_aaudio_usage = 14;
pub const ma_aaudio_usage_ma_aaudio_usage_vehicle_status: ma_aaudio_usage = 15;
pub const ma_aaudio_usage_ma_aaudio_usage_announcement: ma_aaudio_usage = 16;
pub type ma_aaudio_usage = ::std::os::raw::c_int;
pub const ma_aaudio_content_type_ma_aaudio_content_type_default: ma_aaudio_content_type = 0;
pub const ma_aaudio_content_type_ma_aaudio_content_type_speech: ma_aaudio_content_type = 1;
pub const ma_aaudio_content_type_ma_aaudio_content_type_music: ma_aaudio_content_type = 2;
pub const ma_aaudio_content_type_ma_aaudio_content_type_movie: ma_aaudio_content_type = 3;
pub const ma_aaudio_content_type_ma_aaudio_content_type_sonification: ma_aaudio_content_type = 4;
pub type ma_aaudio_content_type = ::std::os::raw::c_int;
pub const ma_aaudio_input_preset_ma_aaudio_input_preset_default: ma_aaudio_input_preset = 0;
pub const ma_aaudio_input_preset_ma_aaudio_input_preset_generic: ma_aaudio_input_preset = 1;
pub const ma_aaudio_input_preset_ma_aaudio_input_preset_camcorder: ma_aaudio_input_preset = 2;
pub const ma_aaudio_input_preset_ma_aaudio_input_preset_voice_recognition: ma_aaudio_input_preset =
    3;
pub const ma_aaudio_input_preset_ma_aaudio_input_preset_voice_communication:
    ma_aaudio_input_preset = 4;
pub const ma_aaudio_input_preset_ma_aaudio_input_preset_unprocessed: ma_aaudio_input_preset = 5;
pub const ma_aaudio_input_preset_ma_aaudio_input_preset_voice_performance: ma_aaudio_input_preset =
    6;
pub type ma_aaudio_input_preset = ::std::os::raw::c_int;
pub const ma_aaudio_allowed_capture_policy_ma_aaudio_allow_capture_default:
    ma_aaudio_allowed_capture_policy = 0;
pub const ma_aaudio_allowed_capture_policy_ma_aaudio_allow_capture_by_all:
    ma_aaudio_allowed_capture_policy = 1;
pub const ma_aaudio_allowed_capture_policy_ma_aaudio_allow_capture_by_system:
    ma_aaudio_allowed_capture_policy = 2;
pub const ma_aaudio_allowed_capture_policy_ma_aaudio_allow_capture_by_none:
    ma_aaudio_allowed_capture_policy = 3;
pub type ma_aaudio_allowed_capture_policy = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_timer {
    pub counter: ma_int64,
    pub counterD: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_timer"][::std::mem::size_of::<ma_timer>() - 8usize];
    ["Alignment of ma_timer"][::std::mem::align_of::<ma_timer>() - 8usize];
    ["Offset of field: ma_timer::counter"][::std::mem::offset_of!(ma_timer, counter) - 0usize];
    ["Offset of field: ma_timer::counterD"][::std::mem::offset_of!(ma_timer, counterD) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_device_id {
    pub wasapi: [ma_wchar_win32; 64usize],
    pub dsound: [ma_uint8; 16usize],
    pub winmm: ma_uint32,
    pub alsa: [::std::os::raw::c_char; 256usize],
    pub pulse: [::std::os::raw::c_char; 256usize],
    pub jack: ::std::os::raw::c_int,
    pub coreaudio: [::std::os::raw::c_char; 256usize],
    pub sndio: [::std::os::raw::c_char; 256usize],
    pub audio4: [::std::os::raw::c_char; 256usize],
    pub oss: [::std::os::raw::c_char; 64usize],
    pub aaudio: ma_int32,
    pub opensl: ma_uint32,
    pub webaudio: [::std::os::raw::c_char; 32usize],
    pub custom: ma_device_id__bindgen_ty_1,
    pub nullbackend: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_device_id__bindgen_ty_1 {
    pub i: ::std::os::raw::c_int,
    pub s: [::std::os::raw::c_char; 256usize],
    pub p: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device_id__bindgen_ty_1"]
        [::std::mem::size_of::<ma_device_id__bindgen_ty_1>() - 256usize];
    ["Alignment of ma_device_id__bindgen_ty_1"]
        [::std::mem::align_of::<ma_device_id__bindgen_ty_1>() - 8usize];
    ["Offset of field: ma_device_id__bindgen_ty_1::i"]
        [::std::mem::offset_of!(ma_device_id__bindgen_ty_1, i) - 0usize];
    ["Offset of field: ma_device_id__bindgen_ty_1::s"]
        [::std::mem::offset_of!(ma_device_id__bindgen_ty_1, s) - 0usize];
    ["Offset of field: ma_device_id__bindgen_ty_1::p"]
        [::std::mem::offset_of!(ma_device_id__bindgen_ty_1, p) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device_id"][::std::mem::size_of::<ma_device_id>() - 256usize];
    ["Alignment of ma_device_id"][::std::mem::align_of::<ma_device_id>() - 8usize];
    ["Offset of field: ma_device_id::wasapi"]
        [::std::mem::offset_of!(ma_device_id, wasapi) - 0usize];
    ["Offset of field: ma_device_id::dsound"]
        [::std::mem::offset_of!(ma_device_id, dsound) - 0usize];
    ["Offset of field: ma_device_id::winmm"][::std::mem::offset_of!(ma_device_id, winmm) - 0usize];
    ["Offset of field: ma_device_id::alsa"][::std::mem::offset_of!(ma_device_id, alsa) - 0usize];
    ["Offset of field: ma_device_id::pulse"][::std::mem::offset_of!(ma_device_id, pulse) - 0usize];
    ["Offset of field: ma_device_id::jack"][::std::mem::offset_of!(ma_device_id, jack) - 0usize];
    ["Offset of field: ma_device_id::coreaudio"]
        [::std::mem::offset_of!(ma_device_id, coreaudio) - 0usize];
    ["Offset of field: ma_device_id::sndio"][::std::mem::offset_of!(ma_device_id, sndio) - 0usize];
    ["Offset of field: ma_device_id::audio4"]
        [::std::mem::offset_of!(ma_device_id, audio4) - 0usize];
    ["Offset of field: ma_device_id::oss"][::std::mem::offset_of!(ma_device_id, oss) - 0usize];
    ["Offset of field: ma_device_id::aaudio"]
        [::std::mem::offset_of!(ma_device_id, aaudio) - 0usize];
    ["Offset of field: ma_device_id::opensl"]
        [::std::mem::offset_of!(ma_device_id, opensl) - 0usize];
    ["Offset of field: ma_device_id::webaudio"]
        [::std::mem::offset_of!(ma_device_id, webaudio) - 0usize];
    ["Offset of field: ma_device_id::custom"]
        [::std::mem::offset_of!(ma_device_id, custom) - 0usize];
    ["Offset of field: ma_device_id::nullbackend"]
        [::std::mem::offset_of!(ma_device_id, nullbackend) - 0usize];
};
unsafe extern "C" {
    pub fn ma_device_id_equal(pA: *const ma_device_id, pB: *const ma_device_id) -> ma_bool32;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_device_info {
    pub id: ma_device_id,
    pub name: [::std::os::raw::c_char; 256usize],
    pub isDefault: ma_bool32,
    pub nativeDataFormatCount: ma_uint32,
    pub nativeDataFormats: [ma_device_info__bindgen_ty_1; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_info__bindgen_ty_1 {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub flags: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device_info__bindgen_ty_1"]
        [::std::mem::size_of::<ma_device_info__bindgen_ty_1>() - 16usize];
    ["Alignment of ma_device_info__bindgen_ty_1"]
        [::std::mem::align_of::<ma_device_info__bindgen_ty_1>() - 4usize];
    ["Offset of field: ma_device_info__bindgen_ty_1::format"]
        [::std::mem::offset_of!(ma_device_info__bindgen_ty_1, format) - 0usize];
    ["Offset of field: ma_device_info__bindgen_ty_1::channels"]
        [::std::mem::offset_of!(ma_device_info__bindgen_ty_1, channels) - 4usize];
    ["Offset of field: ma_device_info__bindgen_ty_1::sampleRate"]
        [::std::mem::offset_of!(ma_device_info__bindgen_ty_1, sampleRate) - 8usize];
    ["Offset of field: ma_device_info__bindgen_ty_1::flags"]
        [::std::mem::offset_of!(ma_device_info__bindgen_ty_1, flags) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device_info"][::std::mem::size_of::<ma_device_info>() - 1544usize];
    ["Alignment of ma_device_info"][::std::mem::align_of::<ma_device_info>() - 8usize];
    ["Offset of field: ma_device_info::id"][::std::mem::offset_of!(ma_device_info, id) - 0usize];
    ["Offset of field: ma_device_info::name"]
        [::std::mem::offset_of!(ma_device_info, name) - 256usize];
    ["Offset of field: ma_device_info::isDefault"]
        [::std::mem::offset_of!(ma_device_info, isDefault) - 512usize];
    ["Offset of field: ma_device_info::nativeDataFormatCount"]
        [::std::mem::offset_of!(ma_device_info, nativeDataFormatCount) - 516usize];
    ["Offset of field: ma_device_info::nativeDataFormats"]
        [::std::mem::offset_of!(ma_device_info, nativeDataFormats) - 520usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config {
    pub deviceType: ma_device_type,
    pub sampleRate: ma_uint32,
    pub periodSizeInFrames: ma_uint32,
    pub periodSizeInMilliseconds: ma_uint32,
    pub periods: ma_uint32,
    pub performanceProfile: ma_performance_profile,
    pub noPreSilencedOutputBuffer: ma_bool8,
    pub noClip: ma_bool8,
    pub noDisableDenormals: ma_bool8,
    pub noFixedSizedCallback: ma_bool8,
    pub dataCallback: ma_device_data_proc,
    pub notificationCallback: ma_device_notification_proc,
    pub stopCallback: ma_stop_proc,
    pub pUserData: *mut ::std::os::raw::c_void,
    pub resampling: ma_resampler_config,
    pub playback: ma_device_config__bindgen_ty_1,
    pub capture: ma_device_config__bindgen_ty_2,
    pub wasapi: ma_device_config__bindgen_ty_3,
    pub alsa: ma_device_config__bindgen_ty_4,
    pub pulse: ma_device_config__bindgen_ty_5,
    pub coreaudio: ma_device_config__bindgen_ty_6,
    pub opensl: ma_device_config__bindgen_ty_7,
    pub aaudio: ma_device_config__bindgen_ty_8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_1 {
    pub pDeviceID: *const ma_device_id,
    pub format: ma_format,
    pub channels: ma_uint32,
    pub pChannelMap: *mut ma_channel,
    pub channelMixMode: ma_channel_mix_mode,
    pub calculateLFEFromSpatialChannels: ma_bool32,
    pub shareMode: ma_share_mode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device_config__bindgen_ty_1"]
        [::std::mem::size_of::<ma_device_config__bindgen_ty_1>() - 40usize];
    ["Alignment of ma_device_config__bindgen_ty_1"]
        [::std::mem::align_of::<ma_device_config__bindgen_ty_1>() - 8usize];
    ["Offset of field: ma_device_config__bindgen_ty_1::pDeviceID"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_1, pDeviceID) - 0usize];
    ["Offset of field: ma_device_config__bindgen_ty_1::format"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_1, format) - 8usize];
    ["Offset of field: ma_device_config__bindgen_ty_1::channels"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_1, channels) - 12usize];
    ["Offset of field: ma_device_config__bindgen_ty_1::pChannelMap"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_1, pChannelMap) - 16usize];
    ["Offset of field: ma_device_config__bindgen_ty_1::channelMixMode"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_1, channelMixMode) - 24usize];
    ["Offset of field: ma_device_config__bindgen_ty_1::calculateLFEFromSpatialChannels"][::std::mem::offset_of!(
        ma_device_config__bindgen_ty_1,
        calculateLFEFromSpatialChannels
    )
        - 28usize];
    ["Offset of field: ma_device_config__bindgen_ty_1::shareMode"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_1, shareMode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_2 {
    pub pDeviceID: *const ma_device_id,
    pub format: ma_format,
    pub channels: ma_uint32,
    pub pChannelMap: *mut ma_channel,
    pub channelMixMode: ma_channel_mix_mode,
    pub calculateLFEFromSpatialChannels: ma_bool32,
    pub shareMode: ma_share_mode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device_config__bindgen_ty_2"]
        [::std::mem::size_of::<ma_device_config__bindgen_ty_2>() - 40usize];
    ["Alignment of ma_device_config__bindgen_ty_2"]
        [::std::mem::align_of::<ma_device_config__bindgen_ty_2>() - 8usize];
    ["Offset of field: ma_device_config__bindgen_ty_2::pDeviceID"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_2, pDeviceID) - 0usize];
    ["Offset of field: ma_device_config__bindgen_ty_2::format"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_2, format) - 8usize];
    ["Offset of field: ma_device_config__bindgen_ty_2::channels"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_2, channels) - 12usize];
    ["Offset of field: ma_device_config__bindgen_ty_2::pChannelMap"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_2, pChannelMap) - 16usize];
    ["Offset of field: ma_device_config__bindgen_ty_2::channelMixMode"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_2, channelMixMode) - 24usize];
    ["Offset of field: ma_device_config__bindgen_ty_2::calculateLFEFromSpatialChannels"][::std::mem::offset_of!(
        ma_device_config__bindgen_ty_2,
        calculateLFEFromSpatialChannels
    )
        - 28usize];
    ["Offset of field: ma_device_config__bindgen_ty_2::shareMode"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_2, shareMode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_3 {
    pub usage: ma_wasapi_usage,
    pub noAutoConvertSRC: ma_bool8,
    pub noDefaultQualitySRC: ma_bool8,
    pub noAutoStreamRouting: ma_bool8,
    pub noHardwareOffloading: ma_bool8,
    pub loopbackProcessID: ma_uint32,
    pub loopbackProcessExclude: ma_bool8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device_config__bindgen_ty_3"]
        [::std::mem::size_of::<ma_device_config__bindgen_ty_3>() - 16usize];
    ["Alignment of ma_device_config__bindgen_ty_3"]
        [::std::mem::align_of::<ma_device_config__bindgen_ty_3>() - 4usize];
    ["Offset of field: ma_device_config__bindgen_ty_3::usage"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_3, usage) - 0usize];
    ["Offset of field: ma_device_config__bindgen_ty_3::noAutoConvertSRC"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_3, noAutoConvertSRC) - 4usize];
    ["Offset of field: ma_device_config__bindgen_ty_3::noDefaultQualitySRC"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_3, noDefaultQualitySRC) - 5usize];
    ["Offset of field: ma_device_config__bindgen_ty_3::noAutoStreamRouting"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_3, noAutoStreamRouting) - 6usize];
    ["Offset of field: ma_device_config__bindgen_ty_3::noHardwareOffloading"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_3, noHardwareOffloading) - 7usize];
    ["Offset of field: ma_device_config__bindgen_ty_3::loopbackProcessID"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_3, loopbackProcessID) - 8usize];
    ["Offset of field: ma_device_config__bindgen_ty_3::loopbackProcessExclude"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_3, loopbackProcessExclude) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_4 {
    pub noMMap: ma_bool32,
    pub noAutoFormat: ma_bool32,
    pub noAutoChannels: ma_bool32,
    pub noAutoResample: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device_config__bindgen_ty_4"]
        [::std::mem::size_of::<ma_device_config__bindgen_ty_4>() - 16usize];
    ["Alignment of ma_device_config__bindgen_ty_4"]
        [::std::mem::align_of::<ma_device_config__bindgen_ty_4>() - 4usize];
    ["Offset of field: ma_device_config__bindgen_ty_4::noMMap"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_4, noMMap) - 0usize];
    ["Offset of field: ma_device_config__bindgen_ty_4::noAutoFormat"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_4, noAutoFormat) - 4usize];
    ["Offset of field: ma_device_config__bindgen_ty_4::noAutoChannels"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_4, noAutoChannels) - 8usize];
    ["Offset of field: ma_device_config__bindgen_ty_4::noAutoResample"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_4, noAutoResample) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_5 {
    pub pStreamNamePlayback: *const ::std::os::raw::c_char,
    pub pStreamNameCapture: *const ::std::os::raw::c_char,
    pub channelMap: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device_config__bindgen_ty_5"]
        [::std::mem::size_of::<ma_device_config__bindgen_ty_5>() - 24usize];
    ["Alignment of ma_device_config__bindgen_ty_5"]
        [::std::mem::align_of::<ma_device_config__bindgen_ty_5>() - 8usize];
    ["Offset of field: ma_device_config__bindgen_ty_5::pStreamNamePlayback"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_5, pStreamNamePlayback) - 0usize];
    ["Offset of field: ma_device_config__bindgen_ty_5::pStreamNameCapture"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_5, pStreamNameCapture) - 8usize];
    ["Offset of field: ma_device_config__bindgen_ty_5::channelMap"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_5, channelMap) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_6 {
    pub allowNominalSampleRateChange: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device_config__bindgen_ty_6"]
        [::std::mem::size_of::<ma_device_config__bindgen_ty_6>() - 4usize];
    ["Alignment of ma_device_config__bindgen_ty_6"]
        [::std::mem::align_of::<ma_device_config__bindgen_ty_6>() - 4usize];
    ["Offset of field: ma_device_config__bindgen_ty_6::allowNominalSampleRateChange"][::std::mem::offset_of!(
        ma_device_config__bindgen_ty_6,
        allowNominalSampleRateChange
    ) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_7 {
    pub streamType: ma_opensl_stream_type,
    pub recordingPreset: ma_opensl_recording_preset,
    pub enableCompatibilityWorkarounds: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device_config__bindgen_ty_7"]
        [::std::mem::size_of::<ma_device_config__bindgen_ty_7>() - 12usize];
    ["Alignment of ma_device_config__bindgen_ty_7"]
        [::std::mem::align_of::<ma_device_config__bindgen_ty_7>() - 4usize];
    ["Offset of field: ma_device_config__bindgen_ty_7::streamType"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_7, streamType) - 0usize];
    ["Offset of field: ma_device_config__bindgen_ty_7::recordingPreset"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_7, recordingPreset) - 4usize];
    ["Offset of field: ma_device_config__bindgen_ty_7::enableCompatibilityWorkarounds"][::std::mem::offset_of!(
        ma_device_config__bindgen_ty_7,
        enableCompatibilityWorkarounds
    ) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_config__bindgen_ty_8 {
    pub usage: ma_aaudio_usage,
    pub contentType: ma_aaudio_content_type,
    pub inputPreset: ma_aaudio_input_preset,
    pub allowedCapturePolicy: ma_aaudio_allowed_capture_policy,
    pub noAutoStartAfterReroute: ma_bool32,
    pub enableCompatibilityWorkarounds: ma_bool32,
    pub allowSetBufferCapacity: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device_config__bindgen_ty_8"]
        [::std::mem::size_of::<ma_device_config__bindgen_ty_8>() - 28usize];
    ["Alignment of ma_device_config__bindgen_ty_8"]
        [::std::mem::align_of::<ma_device_config__bindgen_ty_8>() - 4usize];
    ["Offset of field: ma_device_config__bindgen_ty_8::usage"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_8, usage) - 0usize];
    ["Offset of field: ma_device_config__bindgen_ty_8::contentType"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_8, contentType) - 4usize];
    ["Offset of field: ma_device_config__bindgen_ty_8::inputPreset"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_8, inputPreset) - 8usize];
    ["Offset of field: ma_device_config__bindgen_ty_8::allowedCapturePolicy"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_8, allowedCapturePolicy) - 12usize];
    ["Offset of field: ma_device_config__bindgen_ty_8::noAutoStartAfterReroute"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_8, noAutoStartAfterReroute) - 16usize];
    ["Offset of field: ma_device_config__bindgen_ty_8::enableCompatibilityWorkarounds"][::std::mem::offset_of!(
        ma_device_config__bindgen_ty_8,
        enableCompatibilityWorkarounds
    )
        - 20usize];
    ["Offset of field: ma_device_config__bindgen_ty_8::allowSetBufferCapacity"]
        [::std::mem::offset_of!(ma_device_config__bindgen_ty_8, allowSetBufferCapacity) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device_config"][::std::mem::size_of::<ma_device_config>() - 296usize];
    ["Alignment of ma_device_config"][::std::mem::align_of::<ma_device_config>() - 8usize];
    ["Offset of field: ma_device_config::deviceType"]
        [::std::mem::offset_of!(ma_device_config, deviceType) - 0usize];
    ["Offset of field: ma_device_config::sampleRate"]
        [::std::mem::offset_of!(ma_device_config, sampleRate) - 4usize];
    ["Offset of field: ma_device_config::periodSizeInFrames"]
        [::std::mem::offset_of!(ma_device_config, periodSizeInFrames) - 8usize];
    ["Offset of field: ma_device_config::periodSizeInMilliseconds"]
        [::std::mem::offset_of!(ma_device_config, periodSizeInMilliseconds) - 12usize];
    ["Offset of field: ma_device_config::periods"]
        [::std::mem::offset_of!(ma_device_config, periods) - 16usize];
    ["Offset of field: ma_device_config::performanceProfile"]
        [::std::mem::offset_of!(ma_device_config, performanceProfile) - 20usize];
    ["Offset of field: ma_device_config::noPreSilencedOutputBuffer"]
        [::std::mem::offset_of!(ma_device_config, noPreSilencedOutputBuffer) - 24usize];
    ["Offset of field: ma_device_config::noClip"]
        [::std::mem::offset_of!(ma_device_config, noClip) - 25usize];
    ["Offset of field: ma_device_config::noDisableDenormals"]
        [::std::mem::offset_of!(ma_device_config, noDisableDenormals) - 26usize];
    ["Offset of field: ma_device_config::noFixedSizedCallback"]
        [::std::mem::offset_of!(ma_device_config, noFixedSizedCallback) - 27usize];
    ["Offset of field: ma_device_config::dataCallback"]
        [::std::mem::offset_of!(ma_device_config, dataCallback) - 32usize];
    ["Offset of field: ma_device_config::notificationCallback"]
        [::std::mem::offset_of!(ma_device_config, notificationCallback) - 40usize];
    ["Offset of field: ma_device_config::stopCallback"]
        [::std::mem::offset_of!(ma_device_config, stopCallback) - 48usize];
    ["Offset of field: ma_device_config::pUserData"]
        [::std::mem::offset_of!(ma_device_config, pUserData) - 56usize];
    ["Offset of field: ma_device_config::resampling"]
        [::std::mem::offset_of!(ma_device_config, resampling) - 64usize];
    ["Offset of field: ma_device_config::playback"]
        [::std::mem::offset_of!(ma_device_config, playback) - 112usize];
    ["Offset of field: ma_device_config::capture"]
        [::std::mem::offset_of!(ma_device_config, capture) - 152usize];
    ["Offset of field: ma_device_config::wasapi"]
        [::std::mem::offset_of!(ma_device_config, wasapi) - 192usize];
    ["Offset of field: ma_device_config::alsa"]
        [::std::mem::offset_of!(ma_device_config, alsa) - 208usize];
    ["Offset of field: ma_device_config::pulse"]
        [::std::mem::offset_of!(ma_device_config, pulse) - 224usize];
    ["Offset of field: ma_device_config::coreaudio"]
        [::std::mem::offset_of!(ma_device_config, coreaudio) - 248usize];
    ["Offset of field: ma_device_config::opensl"]
        [::std::mem::offset_of!(ma_device_config, opensl) - 252usize];
    ["Offset of field: ma_device_config::aaudio"]
        [::std::mem::offset_of!(ma_device_config, aaudio) - 264usize];
};
pub type ma_enum_devices_callback_proc = ::std::option::Option<
    unsafe extern "C" fn(
        pContext: *mut ma_context,
        deviceType: ma_device_type,
        pInfo: *const ma_device_info,
        pUserData: *mut ::std::os::raw::c_void,
    ) -> ma_bool32,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device_descriptor {
    pub pDeviceID: *const ma_device_id,
    pub shareMode: ma_share_mode,
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub channelMap: [ma_channel; 254usize],
    pub periodSizeInFrames: ma_uint32,
    pub periodSizeInMilliseconds: ma_uint32,
    pub periodCount: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device_descriptor"][::std::mem::size_of::<ma_device_descriptor>() - 296usize];
    ["Alignment of ma_device_descriptor"][::std::mem::align_of::<ma_device_descriptor>() - 8usize];
    ["Offset of field: ma_device_descriptor::pDeviceID"]
        [::std::mem::offset_of!(ma_device_descriptor, pDeviceID) - 0usize];
    ["Offset of field: ma_device_descriptor::shareMode"]
        [::std::mem::offset_of!(ma_device_descriptor, shareMode) - 8usize];
    ["Offset of field: ma_device_descriptor::format"]
        [::std::mem::offset_of!(ma_device_descriptor, format) - 12usize];
    ["Offset of field: ma_device_descriptor::channels"]
        [::std::mem::offset_of!(ma_device_descriptor, channels) - 16usize];
    ["Offset of field: ma_device_descriptor::sampleRate"]
        [::std::mem::offset_of!(ma_device_descriptor, sampleRate) - 20usize];
    ["Offset of field: ma_device_descriptor::channelMap"]
        [::std::mem::offset_of!(ma_device_descriptor, channelMap) - 24usize];
    ["Offset of field: ma_device_descriptor::periodSizeInFrames"]
        [::std::mem::offset_of!(ma_device_descriptor, periodSizeInFrames) - 280usize];
    ["Offset of field: ma_device_descriptor::periodSizeInMilliseconds"]
        [::std::mem::offset_of!(ma_device_descriptor, periodSizeInMilliseconds) - 284usize];
    ["Offset of field: ma_device_descriptor::periodCount"]
        [::std::mem::offset_of!(ma_device_descriptor, periodCount) - 288usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_backend_callbacks {
    pub onContextInit: ::std::option::Option<
        unsafe extern "C" fn(
            pContext: *mut ma_context,
            pConfig: *const ma_context_config,
            pCallbacks: *mut ma_backend_callbacks,
        ) -> ma_result,
    >,
    pub onContextUninit:
        ::std::option::Option<unsafe extern "C" fn(pContext: *mut ma_context) -> ma_result>,
    pub onContextEnumerateDevices: ::std::option::Option<
        unsafe extern "C" fn(
            pContext: *mut ma_context,
            callback: ma_enum_devices_callback_proc,
            pUserData: *mut ::std::os::raw::c_void,
        ) -> ma_result,
    >,
    pub onContextGetDeviceInfo: ::std::option::Option<
        unsafe extern "C" fn(
            pContext: *mut ma_context,
            deviceType: ma_device_type,
            pDeviceID: *const ma_device_id,
            pDeviceInfo: *mut ma_device_info,
        ) -> ma_result,
    >,
    pub onDeviceInit: ::std::option::Option<
        unsafe extern "C" fn(
            pDevice: *mut ma_device,
            pConfig: *const ma_device_config,
            pDescriptorPlayback: *mut ma_device_descriptor,
            pDescriptorCapture: *mut ma_device_descriptor,
        ) -> ma_result,
    >,
    pub onDeviceUninit:
        ::std::option::Option<unsafe extern "C" fn(pDevice: *mut ma_device) -> ma_result>,
    pub onDeviceStart:
        ::std::option::Option<unsafe extern "C" fn(pDevice: *mut ma_device) -> ma_result>,
    pub onDeviceStop:
        ::std::option::Option<unsafe extern "C" fn(pDevice: *mut ma_device) -> ma_result>,
    pub onDeviceRead: ::std::option::Option<
        unsafe extern "C" fn(
            pDevice: *mut ma_device,
            pFrames: *mut ::std::os::raw::c_void,
            frameCount: ma_uint32,
            pFramesRead: *mut ma_uint32,
        ) -> ma_result,
    >,
    pub onDeviceWrite: ::std::option::Option<
        unsafe extern "C" fn(
            pDevice: *mut ma_device,
            pFrames: *const ::std::os::raw::c_void,
            frameCount: ma_uint32,
            pFramesWritten: *mut ma_uint32,
        ) -> ma_result,
    >,
    pub onDeviceDataLoop:
        ::std::option::Option<unsafe extern "C" fn(pDevice: *mut ma_device) -> ma_result>,
    pub onDeviceDataLoopWakeup:
        ::std::option::Option<unsafe extern "C" fn(pDevice: *mut ma_device) -> ma_result>,
    pub onDeviceGetInfo: ::std::option::Option<
        unsafe extern "C" fn(
            pDevice: *mut ma_device,
            type_: ma_device_type,
            pDeviceInfo: *mut ma_device_info,
        ) -> ma_result,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_backend_callbacks"][::std::mem::size_of::<ma_backend_callbacks>() - 104usize];
    ["Alignment of ma_backend_callbacks"][::std::mem::align_of::<ma_backend_callbacks>() - 8usize];
    ["Offset of field: ma_backend_callbacks::onContextInit"]
        [::std::mem::offset_of!(ma_backend_callbacks, onContextInit) - 0usize];
    ["Offset of field: ma_backend_callbacks::onContextUninit"]
        [::std::mem::offset_of!(ma_backend_callbacks, onContextUninit) - 8usize];
    ["Offset of field: ma_backend_callbacks::onContextEnumerateDevices"]
        [::std::mem::offset_of!(ma_backend_callbacks, onContextEnumerateDevices) - 16usize];
    ["Offset of field: ma_backend_callbacks::onContextGetDeviceInfo"]
        [::std::mem::offset_of!(ma_backend_callbacks, onContextGetDeviceInfo) - 24usize];
    ["Offset of field: ma_backend_callbacks::onDeviceInit"]
        [::std::mem::offset_of!(ma_backend_callbacks, onDeviceInit) - 32usize];
    ["Offset of field: ma_backend_callbacks::onDeviceUninit"]
        [::std::mem::offset_of!(ma_backend_callbacks, onDeviceUninit) - 40usize];
    ["Offset of field: ma_backend_callbacks::onDeviceStart"]
        [::std::mem::offset_of!(ma_backend_callbacks, onDeviceStart) - 48usize];
    ["Offset of field: ma_backend_callbacks::onDeviceStop"]
        [::std::mem::offset_of!(ma_backend_callbacks, onDeviceStop) - 56usize];
    ["Offset of field: ma_backend_callbacks::onDeviceRead"]
        [::std::mem::offset_of!(ma_backend_callbacks, onDeviceRead) - 64usize];
    ["Offset of field: ma_backend_callbacks::onDeviceWrite"]
        [::std::mem::offset_of!(ma_backend_callbacks, onDeviceWrite) - 72usize];
    ["Offset of field: ma_backend_callbacks::onDeviceDataLoop"]
        [::std::mem::offset_of!(ma_backend_callbacks, onDeviceDataLoop) - 80usize];
    ["Offset of field: ma_backend_callbacks::onDeviceDataLoopWakeup"]
        [::std::mem::offset_of!(ma_backend_callbacks, onDeviceDataLoopWakeup) - 88usize];
    ["Offset of field: ma_backend_callbacks::onDeviceGetInfo"]
        [::std::mem::offset_of!(ma_backend_callbacks, onDeviceGetInfo) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context_config {
    pub pLog: *mut ma_log,
    pub threadPriority: ma_thread_priority,
    pub threadStackSize: usize,
    pub pUserData: *mut ::std::os::raw::c_void,
    pub allocationCallbacks: ma_allocation_callbacks,
    pub dsound: ma_context_config__bindgen_ty_1,
    pub alsa: ma_context_config__bindgen_ty_2,
    pub pulse: ma_context_config__bindgen_ty_3,
    pub coreaudio: ma_context_config__bindgen_ty_4,
    pub jack: ma_context_config__bindgen_ty_5,
    pub custom: ma_backend_callbacks,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context_config__bindgen_ty_1 {
    pub hWnd: ma_handle,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_context_config__bindgen_ty_1"]
        [::std::mem::size_of::<ma_context_config__bindgen_ty_1>() - 8usize];
    ["Alignment of ma_context_config__bindgen_ty_1"]
        [::std::mem::align_of::<ma_context_config__bindgen_ty_1>() - 8usize];
    ["Offset of field: ma_context_config__bindgen_ty_1::hWnd"]
        [::std::mem::offset_of!(ma_context_config__bindgen_ty_1, hWnd) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context_config__bindgen_ty_2 {
    pub useVerboseDeviceEnumeration: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_context_config__bindgen_ty_2"]
        [::std::mem::size_of::<ma_context_config__bindgen_ty_2>() - 4usize];
    ["Alignment of ma_context_config__bindgen_ty_2"]
        [::std::mem::align_of::<ma_context_config__bindgen_ty_2>() - 4usize];
    ["Offset of field: ma_context_config__bindgen_ty_2::useVerboseDeviceEnumeration"][::std::mem::offset_of!(
        ma_context_config__bindgen_ty_2,
        useVerboseDeviceEnumeration
    ) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context_config__bindgen_ty_3 {
    pub pApplicationName: *const ::std::os::raw::c_char,
    pub pServerName: *const ::std::os::raw::c_char,
    pub tryAutoSpawn: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_context_config__bindgen_ty_3"]
        [::std::mem::size_of::<ma_context_config__bindgen_ty_3>() - 24usize];
    ["Alignment of ma_context_config__bindgen_ty_3"]
        [::std::mem::align_of::<ma_context_config__bindgen_ty_3>() - 8usize];
    ["Offset of field: ma_context_config__bindgen_ty_3::pApplicationName"]
        [::std::mem::offset_of!(ma_context_config__bindgen_ty_3, pApplicationName) - 0usize];
    ["Offset of field: ma_context_config__bindgen_ty_3::pServerName"]
        [::std::mem::offset_of!(ma_context_config__bindgen_ty_3, pServerName) - 8usize];
    ["Offset of field: ma_context_config__bindgen_ty_3::tryAutoSpawn"]
        [::std::mem::offset_of!(ma_context_config__bindgen_ty_3, tryAutoSpawn) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context_config__bindgen_ty_4 {
    pub sessionCategory: ma_ios_session_category,
    pub sessionCategoryOptions: ma_uint32,
    pub noAudioSessionActivate: ma_bool32,
    pub noAudioSessionDeactivate: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_context_config__bindgen_ty_4"]
        [::std::mem::size_of::<ma_context_config__bindgen_ty_4>() - 16usize];
    ["Alignment of ma_context_config__bindgen_ty_4"]
        [::std::mem::align_of::<ma_context_config__bindgen_ty_4>() - 4usize];
    ["Offset of field: ma_context_config__bindgen_ty_4::sessionCategory"]
        [::std::mem::offset_of!(ma_context_config__bindgen_ty_4, sessionCategory) - 0usize];
    ["Offset of field: ma_context_config__bindgen_ty_4::sessionCategoryOptions"]
        [::std::mem::offset_of!(ma_context_config__bindgen_ty_4, sessionCategoryOptions) - 4usize];
    ["Offset of field: ma_context_config__bindgen_ty_4::noAudioSessionActivate"]
        [::std::mem::offset_of!(ma_context_config__bindgen_ty_4, noAudioSessionActivate) - 8usize];
    ["Offset of field: ma_context_config__bindgen_ty_4::noAudioSessionDeactivate"][::std::mem::offset_of!(
        ma_context_config__bindgen_ty_4,
        noAudioSessionDeactivate
    ) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context_config__bindgen_ty_5 {
    pub pClientName: *const ::std::os::raw::c_char,
    pub tryStartServer: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_context_config__bindgen_ty_5"]
        [::std::mem::size_of::<ma_context_config__bindgen_ty_5>() - 16usize];
    ["Alignment of ma_context_config__bindgen_ty_5"]
        [::std::mem::align_of::<ma_context_config__bindgen_ty_5>() - 8usize];
    ["Offset of field: ma_context_config__bindgen_ty_5::pClientName"]
        [::std::mem::offset_of!(ma_context_config__bindgen_ty_5, pClientName) - 0usize];
    ["Offset of field: ma_context_config__bindgen_ty_5::tryStartServer"]
        [::std::mem::offset_of!(ma_context_config__bindgen_ty_5, tryStartServer) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_context_config"][::std::mem::size_of::<ma_context_config>() - 240usize];
    ["Alignment of ma_context_config"][::std::mem::align_of::<ma_context_config>() - 8usize];
    ["Offset of field: ma_context_config::pLog"]
        [::std::mem::offset_of!(ma_context_config, pLog) - 0usize];
    ["Offset of field: ma_context_config::threadPriority"]
        [::std::mem::offset_of!(ma_context_config, threadPriority) - 8usize];
    ["Offset of field: ma_context_config::threadStackSize"]
        [::std::mem::offset_of!(ma_context_config, threadStackSize) - 16usize];
    ["Offset of field: ma_context_config::pUserData"]
        [::std::mem::offset_of!(ma_context_config, pUserData) - 24usize];
    ["Offset of field: ma_context_config::allocationCallbacks"]
        [::std::mem::offset_of!(ma_context_config, allocationCallbacks) - 32usize];
    ["Offset of field: ma_context_config::dsound"]
        [::std::mem::offset_of!(ma_context_config, dsound) - 64usize];
    ["Offset of field: ma_context_config::alsa"]
        [::std::mem::offset_of!(ma_context_config, alsa) - 72usize];
    ["Offset of field: ma_context_config::pulse"]
        [::std::mem::offset_of!(ma_context_config, pulse) - 80usize];
    ["Offset of field: ma_context_config::coreaudio"]
        [::std::mem::offset_of!(ma_context_config, coreaudio) - 104usize];
    ["Offset of field: ma_context_config::jack"]
        [::std::mem::offset_of!(ma_context_config, jack) - 120usize];
    ["Offset of field: ma_context_config::custom"]
        [::std::mem::offset_of!(ma_context_config, custom) - 136usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_context_command__wasapi {
    pub code: ::std::os::raw::c_int,
    pub pEvent: *mut ma_event,
    pub data: ma_context_command__wasapi__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_context_command__wasapi__bindgen_ty_1 {
    pub quit: ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_1,
    pub createAudioClient: ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_2,
    pub releaseAudioClient: ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_1 {
    pub _unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_1::_unused"][::std::mem::offset_of!(
        ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_1,
        _unused
    )
        - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_2 {
    pub deviceType: ma_device_type,
    pub pAudioClient: *mut ::std::os::raw::c_void,
    pub ppAudioClientService: *mut *mut ::std::os::raw::c_void,
    pub pResult: *mut ma_result,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_2>() - 32usize];
    ["Alignment of ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_2::deviceType"][::std::mem::offset_of!(
        ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_2,
        deviceType
    )
        - 0usize];
    ["Offset of field: ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_2::pAudioClient"][::std::mem::offset_of!(
        ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_2,
        pAudioClient
    )
        - 8usize];
    ["Offset of field: ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_2::ppAudioClientService"] [:: std :: mem :: offset_of ! (ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_2 , ppAudioClientService) - 16usize] ;
    ["Offset of field: ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_2::pResult"][::std::mem::offset_of!(
        ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_2,
        pResult
    )
        - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_3 {
    pub pDevice: *mut ma_device,
    pub deviceType: ma_device_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_3>() - 16usize];
    ["Alignment of ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_3::pDevice"][::std::mem::offset_of!(
        ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_3,
        pDevice
    )
        - 0usize];
    ["Offset of field: ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_3::deviceType"][::std::mem::offset_of!(
        ma_context_command__wasapi__bindgen_ty_1__bindgen_ty_3,
        deviceType
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_context_command__wasapi__bindgen_ty_1"]
        [::std::mem::size_of::<ma_context_command__wasapi__bindgen_ty_1>() - 32usize];
    ["Alignment of ma_context_command__wasapi__bindgen_ty_1"]
        [::std::mem::align_of::<ma_context_command__wasapi__bindgen_ty_1>() - 8usize];
    ["Offset of field: ma_context_command__wasapi__bindgen_ty_1::quit"]
        [::std::mem::offset_of!(ma_context_command__wasapi__bindgen_ty_1, quit) - 0usize];
    ["Offset of field: ma_context_command__wasapi__bindgen_ty_1::createAudioClient"][::std::mem::offset_of!(
        ma_context_command__wasapi__bindgen_ty_1,
        createAudioClient
    ) - 0usize];
    ["Offset of field: ma_context_command__wasapi__bindgen_ty_1::releaseAudioClient"][::std::mem::offset_of!(
        ma_context_command__wasapi__bindgen_ty_1,
        releaseAudioClient
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_context_command__wasapi"]
        [::std::mem::size_of::<ma_context_command__wasapi>() - 48usize];
    ["Alignment of ma_context_command__wasapi"]
        [::std::mem::align_of::<ma_context_command__wasapi>() - 8usize];
    ["Offset of field: ma_context_command__wasapi::code"]
        [::std::mem::offset_of!(ma_context_command__wasapi, code) - 0usize];
    ["Offset of field: ma_context_command__wasapi::pEvent"]
        [::std::mem::offset_of!(ma_context_command__wasapi, pEvent) - 8usize];
    ["Offset of field: ma_context_command__wasapi::data"]
        [::std::mem::offset_of!(ma_context_command__wasapi, data) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_context {
    pub callbacks: ma_backend_callbacks,
    pub backend: ma_backend,
    pub pLog: *mut ma_log,
    pub log: ma_log,
    pub threadPriority: ma_thread_priority,
    pub threadStackSize: usize,
    pub pUserData: *mut ::std::os::raw::c_void,
    pub allocationCallbacks: ma_allocation_callbacks,
    pub deviceEnumLock: ma_mutex,
    pub deviceInfoLock: ma_mutex,
    pub deviceInfoCapacity: ma_uint32,
    pub playbackDeviceInfoCount: ma_uint32,
    pub captureDeviceInfoCount: ma_uint32,
    pub pDeviceInfos: *mut ma_device_info,
    pub __bindgen_anon_1: ma_context__bindgen_ty_1,
    pub __bindgen_anon_2: ma_context__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_context__bindgen_ty_1 {
    pub wasapi: ma_context__bindgen_ty_1__bindgen_ty_1,
    pub dsound: ma_context__bindgen_ty_1__bindgen_ty_2,
    pub winmm: ma_context__bindgen_ty_1__bindgen_ty_3,
    pub jack: ma_context__bindgen_ty_1__bindgen_ty_4,
    pub null_backend: ma_context__bindgen_ty_1__bindgen_ty_5,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_context__bindgen_ty_1__bindgen_ty_1 {
    pub commandThread: ma_thread,
    pub commandLock: ma_mutex,
    pub commandSem: ma_semaphore,
    pub commandIndex: ma_uint32,
    pub commandCount: ma_uint32,
    pub commands: [ma_context_command__wasapi; 4usize],
    pub hAvrt: ma_handle,
    pub AvSetMmThreadCharacteristicsA: ma_proc,
    pub AvRevertMmThreadcharacteristics: ma_proc,
    pub hMMDevapi: ma_handle,
    pub ActivateAudioInterfaceAsync: ma_proc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_context__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ma_context__bindgen_ty_1__bindgen_ty_1>() - 264usize];
    ["Alignment of ma_context__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ma_context__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_1::commandThread"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_1, commandThread) - 0usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_1::commandLock"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_1, commandLock) - 8usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_1::commandSem"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_1, commandSem) - 16usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_1::commandIndex"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_1, commandIndex) - 24usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_1::commandCount"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_1, commandCount) - 28usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_1::commands"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_1, commands) - 32usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_1::hAvrt"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_1, hAvrt) - 224usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_1::AvSetMmThreadCharacteristicsA"][::std::mem::offset_of!(
        ma_context__bindgen_ty_1__bindgen_ty_1,
        AvSetMmThreadCharacteristicsA
    )
        - 232usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_1::AvRevertMmThreadcharacteristics"][::std::mem::offset_of!(
        ma_context__bindgen_ty_1__bindgen_ty_1,
        AvRevertMmThreadcharacteristics
    )
        - 240usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_1::hMMDevapi"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_1, hMMDevapi) - 248usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_1::ActivateAudioInterfaceAsync"][::std::mem::offset_of!(
        ma_context__bindgen_ty_1__bindgen_ty_1,
        ActivateAudioInterfaceAsync
    )
        - 256usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context__bindgen_ty_1__bindgen_ty_2 {
    pub hWnd: ma_handle,
    pub hDSoundDLL: ma_handle,
    pub DirectSoundCreate: ma_proc,
    pub DirectSoundEnumerateA: ma_proc,
    pub DirectSoundCaptureCreate: ma_proc,
    pub DirectSoundCaptureEnumerateA: ma_proc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_context__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<ma_context__bindgen_ty_1__bindgen_ty_2>() - 48usize];
    ["Alignment of ma_context__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<ma_context__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_2::hWnd"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_2, hWnd) - 0usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_2::hDSoundDLL"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_2, hDSoundDLL) - 8usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_2::DirectSoundCreate"][::std::mem::offset_of!(
        ma_context__bindgen_ty_1__bindgen_ty_2,
        DirectSoundCreate
    ) - 16usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_2::DirectSoundEnumerateA"][::std::mem::offset_of!(
        ma_context__bindgen_ty_1__bindgen_ty_2,
        DirectSoundEnumerateA
    ) - 24usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_2::DirectSoundCaptureCreate"][::std::mem::offset_of!(
        ma_context__bindgen_ty_1__bindgen_ty_2,
        DirectSoundCaptureCreate
    )
        - 32usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_2::DirectSoundCaptureEnumerateA"][::std::mem::offset_of!(
        ma_context__bindgen_ty_1__bindgen_ty_2,
        DirectSoundCaptureEnumerateA
    )
        - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context__bindgen_ty_1__bindgen_ty_3 {
    pub hWinMM: ma_handle,
    pub waveOutGetNumDevs: ma_proc,
    pub waveOutGetDevCapsA: ma_proc,
    pub waveOutOpen: ma_proc,
    pub waveOutClose: ma_proc,
    pub waveOutPrepareHeader: ma_proc,
    pub waveOutUnprepareHeader: ma_proc,
    pub waveOutWrite: ma_proc,
    pub waveOutReset: ma_proc,
    pub waveInGetNumDevs: ma_proc,
    pub waveInGetDevCapsA: ma_proc,
    pub waveInOpen: ma_proc,
    pub waveInClose: ma_proc,
    pub waveInPrepareHeader: ma_proc,
    pub waveInUnprepareHeader: ma_proc,
    pub waveInAddBuffer: ma_proc,
    pub waveInStart: ma_proc,
    pub waveInReset: ma_proc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_context__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<ma_context__bindgen_ty_1__bindgen_ty_3>() - 144usize];
    ["Alignment of ma_context__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<ma_context__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_3::hWinMM"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_3, hWinMM) - 0usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_3::waveOutGetNumDevs"][::std::mem::offset_of!(
        ma_context__bindgen_ty_1__bindgen_ty_3,
        waveOutGetNumDevs
    ) - 8usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_3::waveOutGetDevCapsA"][::std::mem::offset_of!(
        ma_context__bindgen_ty_1__bindgen_ty_3,
        waveOutGetDevCapsA
    ) - 16usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_3::waveOutOpen"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_3, waveOutOpen) - 24usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_3::waveOutClose"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_3, waveOutClose) - 32usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_3::waveOutPrepareHeader"][::std::mem::offset_of!(
        ma_context__bindgen_ty_1__bindgen_ty_3,
        waveOutPrepareHeader
    ) - 40usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_3::waveOutUnprepareHeader"][::std::mem::offset_of!(
        ma_context__bindgen_ty_1__bindgen_ty_3,
        waveOutUnprepareHeader
    )
        - 48usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_3::waveOutWrite"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_3, waveOutWrite) - 56usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_3::waveOutReset"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_3, waveOutReset) - 64usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_3::waveInGetNumDevs"][::std::mem::offset_of!(
        ma_context__bindgen_ty_1__bindgen_ty_3,
        waveInGetNumDevs
    ) - 72usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_3::waveInGetDevCapsA"][::std::mem::offset_of!(
        ma_context__bindgen_ty_1__bindgen_ty_3,
        waveInGetDevCapsA
    ) - 80usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_3::waveInOpen"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_3, waveInOpen) - 88usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_3::waveInClose"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_3, waveInClose) - 96usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_3::waveInPrepareHeader"][::std::mem::offset_of!(
        ma_context__bindgen_ty_1__bindgen_ty_3,
        waveInPrepareHeader
    ) - 104usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_3::waveInUnprepareHeader"][::std::mem::offset_of!(
        ma_context__bindgen_ty_1__bindgen_ty_3,
        waveInUnprepareHeader
    )
        - 112usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_3::waveInAddBuffer"][::std::mem::offset_of!(
        ma_context__bindgen_ty_1__bindgen_ty_3,
        waveInAddBuffer
    ) - 120usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_3::waveInStart"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_3, waveInStart) - 128usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_3::waveInReset"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_3, waveInReset) - 136usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context__bindgen_ty_1__bindgen_ty_4 {
    pub jackSO: ma_handle,
    pub jack_client_open: ma_proc,
    pub jack_client_close: ma_proc,
    pub jack_client_name_size: ma_proc,
    pub jack_set_process_callback: ma_proc,
    pub jack_set_buffer_size_callback: ma_proc,
    pub jack_on_shutdown: ma_proc,
    pub jack_get_sample_rate: ma_proc,
    pub jack_get_buffer_size: ma_proc,
    pub jack_get_ports: ma_proc,
    pub jack_activate: ma_proc,
    pub jack_deactivate: ma_proc,
    pub jack_connect: ma_proc,
    pub jack_port_register: ma_proc,
    pub jack_port_name: ma_proc,
    pub jack_port_get_buffer: ma_proc,
    pub jack_free: ma_proc,
    pub pClientName: *mut ::std::os::raw::c_char,
    pub tryStartServer: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_context__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<ma_context__bindgen_ty_1__bindgen_ty_4>() - 152usize];
    ["Alignment of ma_context__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<ma_context__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_4::jackSO"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_4, jackSO) - 0usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_4::jack_client_open"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_4, jack_client_open) - 8usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_4::jack_client_close"][::std::mem::offset_of!(
        ma_context__bindgen_ty_1__bindgen_ty_4,
        jack_client_close
    ) - 16usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_4::jack_client_name_size"][::std::mem::offset_of!(
        ma_context__bindgen_ty_1__bindgen_ty_4,
        jack_client_name_size
    ) - 24usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_4::jack_set_process_callback"][::std::mem::offset_of!(
        ma_context__bindgen_ty_1__bindgen_ty_4,
        jack_set_process_callback
    )
        - 32usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_4::jack_set_buffer_size_callback"][::std::mem::offset_of!(
        ma_context__bindgen_ty_1__bindgen_ty_4,
        jack_set_buffer_size_callback
    )
        - 40usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_4::jack_on_shutdown"][::std::mem::offset_of!(
        ma_context__bindgen_ty_1__bindgen_ty_4,
        jack_on_shutdown
    ) - 48usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_4::jack_get_sample_rate"][::std::mem::offset_of!(
        ma_context__bindgen_ty_1__bindgen_ty_4,
        jack_get_sample_rate
    ) - 56usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_4::jack_get_buffer_size"][::std::mem::offset_of!(
        ma_context__bindgen_ty_1__bindgen_ty_4,
        jack_get_buffer_size
    ) - 64usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_4::jack_get_ports"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_4, jack_get_ports) - 72usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_4::jack_activate"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_4, jack_activate) - 80usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_4::jack_deactivate"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_4, jack_deactivate) - 88usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_4::jack_connect"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_4, jack_connect) - 96usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_4::jack_port_register"][::std::mem::offset_of!(
        ma_context__bindgen_ty_1__bindgen_ty_4,
        jack_port_register
    ) - 104usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_4::jack_port_name"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_4, jack_port_name) - 112usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_4::jack_port_get_buffer"][::std::mem::offset_of!(
        ma_context__bindgen_ty_1__bindgen_ty_4,
        jack_port_get_buffer
    ) - 120usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_4::jack_free"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_4, jack_free) - 128usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_4::pClientName"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_4, pClientName) - 136usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_4::tryStartServer"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_4, tryStartServer) - 144usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context__bindgen_ty_1__bindgen_ty_5 {
    pub _unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_context__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::size_of::<ma_context__bindgen_ty_1__bindgen_ty_5>() - 4usize];
    ["Alignment of ma_context__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::align_of::<ma_context__bindgen_ty_1__bindgen_ty_5>() - 4usize];
    ["Offset of field: ma_context__bindgen_ty_1__bindgen_ty_5::_unused"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1__bindgen_ty_5, _unused) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_context__bindgen_ty_1"]
        [::std::mem::size_of::<ma_context__bindgen_ty_1>() - 264usize];
    ["Alignment of ma_context__bindgen_ty_1"]
        [::std::mem::align_of::<ma_context__bindgen_ty_1>() - 8usize];
    ["Offset of field: ma_context__bindgen_ty_1::wasapi"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1, wasapi) - 0usize];
    ["Offset of field: ma_context__bindgen_ty_1::dsound"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1, dsound) - 0usize];
    ["Offset of field: ma_context__bindgen_ty_1::winmm"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1, winmm) - 0usize];
    ["Offset of field: ma_context__bindgen_ty_1::jack"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1, jack) - 0usize];
    ["Offset of field: ma_context__bindgen_ty_1::null_backend"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_1, null_backend) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_context__bindgen_ty_2 {
    pub win32: ma_context__bindgen_ty_2__bindgen_ty_1,
    pub _unused: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_context__bindgen_ty_2__bindgen_ty_1 {
    pub hOle32DLL: ma_handle,
    pub CoInitialize: ma_proc,
    pub CoInitializeEx: ma_proc,
    pub CoUninitialize: ma_proc,
    pub CoCreateInstance: ma_proc,
    pub CoTaskMemFree: ma_proc,
    pub PropVariantClear: ma_proc,
    pub StringFromGUID2: ma_proc,
    pub hUser32DLL: ma_handle,
    pub GetForegroundWindow: ma_proc,
    pub GetDesktopWindow: ma_proc,
    pub hAdvapi32DLL: ma_handle,
    pub RegOpenKeyExA: ma_proc,
    pub RegCloseKey: ma_proc,
    pub RegQueryValueExA: ma_proc,
    pub CoInitializeResult: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_context__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<ma_context__bindgen_ty_2__bindgen_ty_1>() - 128usize];
    ["Alignment of ma_context__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<ma_context__bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Offset of field: ma_context__bindgen_ty_2__bindgen_ty_1::hOle32DLL"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_2__bindgen_ty_1, hOle32DLL) - 0usize];
    ["Offset of field: ma_context__bindgen_ty_2__bindgen_ty_1::CoInitialize"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_2__bindgen_ty_1, CoInitialize) - 8usize];
    ["Offset of field: ma_context__bindgen_ty_2__bindgen_ty_1::CoInitializeEx"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_2__bindgen_ty_1, CoInitializeEx) - 16usize];
    ["Offset of field: ma_context__bindgen_ty_2__bindgen_ty_1::CoUninitialize"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_2__bindgen_ty_1, CoUninitialize) - 24usize];
    ["Offset of field: ma_context__bindgen_ty_2__bindgen_ty_1::CoCreateInstance"][::std::mem::offset_of!(
        ma_context__bindgen_ty_2__bindgen_ty_1,
        CoCreateInstance
    ) - 32usize];
    ["Offset of field: ma_context__bindgen_ty_2__bindgen_ty_1::CoTaskMemFree"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_2__bindgen_ty_1, CoTaskMemFree) - 40usize];
    ["Offset of field: ma_context__bindgen_ty_2__bindgen_ty_1::PropVariantClear"][::std::mem::offset_of!(
        ma_context__bindgen_ty_2__bindgen_ty_1,
        PropVariantClear
    ) - 48usize];
    ["Offset of field: ma_context__bindgen_ty_2__bindgen_ty_1::StringFromGUID2"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_2__bindgen_ty_1, StringFromGUID2) - 56usize];
    ["Offset of field: ma_context__bindgen_ty_2__bindgen_ty_1::hUser32DLL"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_2__bindgen_ty_1, hUser32DLL) - 64usize];
    ["Offset of field: ma_context__bindgen_ty_2__bindgen_ty_1::GetForegroundWindow"][::std::mem::offset_of!(
        ma_context__bindgen_ty_2__bindgen_ty_1,
        GetForegroundWindow
    ) - 72usize];
    ["Offset of field: ma_context__bindgen_ty_2__bindgen_ty_1::GetDesktopWindow"][::std::mem::offset_of!(
        ma_context__bindgen_ty_2__bindgen_ty_1,
        GetDesktopWindow
    ) - 80usize];
    ["Offset of field: ma_context__bindgen_ty_2__bindgen_ty_1::hAdvapi32DLL"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_2__bindgen_ty_1, hAdvapi32DLL) - 88usize];
    ["Offset of field: ma_context__bindgen_ty_2__bindgen_ty_1::RegOpenKeyExA"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_2__bindgen_ty_1, RegOpenKeyExA) - 96usize];
    ["Offset of field: ma_context__bindgen_ty_2__bindgen_ty_1::RegCloseKey"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_2__bindgen_ty_1, RegCloseKey) - 104usize];
    ["Offset of field: ma_context__bindgen_ty_2__bindgen_ty_1::RegQueryValueExA"][::std::mem::offset_of!(
        ma_context__bindgen_ty_2__bindgen_ty_1,
        RegQueryValueExA
    ) - 112usize];
    ["Offset of field: ma_context__bindgen_ty_2__bindgen_ty_1::CoInitializeResult"][::std::mem::offset_of!(
        ma_context__bindgen_ty_2__bindgen_ty_1,
        CoInitializeResult
    ) - 120usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_context__bindgen_ty_2"]
        [::std::mem::size_of::<ma_context__bindgen_ty_2>() - 128usize];
    ["Alignment of ma_context__bindgen_ty_2"]
        [::std::mem::align_of::<ma_context__bindgen_ty_2>() - 8usize];
    ["Offset of field: ma_context__bindgen_ty_2::win32"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_2, win32) - 0usize];
    ["Offset of field: ma_context__bindgen_ty_2::_unused"]
        [::std::mem::offset_of!(ma_context__bindgen_ty_2, _unused) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_context"][::std::mem::size_of::<ma_context>() - 720usize];
    ["Alignment of ma_context"][::std::mem::align_of::<ma_context>() - 8usize];
    ["Offset of field: ma_context::callbacks"]
        [::std::mem::offset_of!(ma_context, callbacks) - 0usize];
    ["Offset of field: ma_context::backend"]
        [::std::mem::offset_of!(ma_context, backend) - 104usize];
    ["Offset of field: ma_context::pLog"][::std::mem::offset_of!(ma_context, pLog) - 112usize];
    ["Offset of field: ma_context::log"][::std::mem::offset_of!(ma_context, log) - 120usize];
    ["Offset of field: ma_context::threadPriority"]
        [::std::mem::offset_of!(ma_context, threadPriority) - 232usize];
    ["Offset of field: ma_context::threadStackSize"]
        [::std::mem::offset_of!(ma_context, threadStackSize) - 240usize];
    ["Offset of field: ma_context::pUserData"]
        [::std::mem::offset_of!(ma_context, pUserData) - 248usize];
    ["Offset of field: ma_context::allocationCallbacks"]
        [::std::mem::offset_of!(ma_context, allocationCallbacks) - 256usize];
    ["Offset of field: ma_context::deviceEnumLock"]
        [::std::mem::offset_of!(ma_context, deviceEnumLock) - 288usize];
    ["Offset of field: ma_context::deviceInfoLock"]
        [::std::mem::offset_of!(ma_context, deviceInfoLock) - 296usize];
    ["Offset of field: ma_context::deviceInfoCapacity"]
        [::std::mem::offset_of!(ma_context, deviceInfoCapacity) - 304usize];
    ["Offset of field: ma_context::playbackDeviceInfoCount"]
        [::std::mem::offset_of!(ma_context, playbackDeviceInfoCount) - 308usize];
    ["Offset of field: ma_context::captureDeviceInfoCount"]
        [::std::mem::offset_of!(ma_context, captureDeviceInfoCount) - 312usize];
    ["Offset of field: ma_context::pDeviceInfos"]
        [::std::mem::offset_of!(ma_context, pDeviceInfos) - 320usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_device {
    pub pContext: *mut ma_context,
    pub type_: ma_device_type,
    pub sampleRate: ma_uint32,
    pub state: ma_atomic_device_state,
    pub onData: ma_device_data_proc,
    pub onNotification: ma_device_notification_proc,
    pub onStop: ma_stop_proc,
    pub pUserData: *mut ::std::os::raw::c_void,
    pub startStopLock: ma_mutex,
    pub wakeupEvent: ma_event,
    pub startEvent: ma_event,
    pub stopEvent: ma_event,
    pub thread: ma_thread,
    pub workResult: ma_result,
    pub isOwnerOfContext: ma_bool8,
    pub noPreSilencedOutputBuffer: ma_bool8,
    pub noClip: ma_bool8,
    pub noDisableDenormals: ma_bool8,
    pub noFixedSizedCallback: ma_bool8,
    pub masterVolumeFactor: ma_atomic_float,
    pub duplexRB: ma_duplex_rb,
    pub resampling: ma_device__bindgen_ty_1,
    pub playback: ma_device__bindgen_ty_2,
    pub capture: ma_device__bindgen_ty_3,
    pub __bindgen_anon_1: ma_device__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device__bindgen_ty_1 {
    pub algorithm: ma_resample_algorithm,
    pub pBackendVTable: *mut ma_resampling_backend_vtable,
    pub pBackendUserData: *mut ::std::os::raw::c_void,
    pub linear: ma_device__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device__bindgen_ty_1__bindgen_ty_1 {
    pub lpfOrder: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ma_device__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of ma_device__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ma_device__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: ma_device__bindgen_ty_1__bindgen_ty_1::lpfOrder"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_1__bindgen_ty_1, lpfOrder) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device__bindgen_ty_1"][::std::mem::size_of::<ma_device__bindgen_ty_1>() - 32usize];
    ["Alignment of ma_device__bindgen_ty_1"]
        [::std::mem::align_of::<ma_device__bindgen_ty_1>() - 8usize];
    ["Offset of field: ma_device__bindgen_ty_1::algorithm"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_1, algorithm) - 0usize];
    ["Offset of field: ma_device__bindgen_ty_1::pBackendVTable"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_1, pBackendVTable) - 8usize];
    ["Offset of field: ma_device__bindgen_ty_1::pBackendUserData"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_1, pBackendUserData) - 16usize];
    ["Offset of field: ma_device__bindgen_ty_1::linear"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_1, linear) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_device__bindgen_ty_2 {
    pub pID: *mut ma_device_id,
    pub id: ma_device_id,
    pub name: [::std::os::raw::c_char; 256usize],
    pub shareMode: ma_share_mode,
    pub format: ma_format,
    pub channels: ma_uint32,
    pub channelMap: [ma_channel; 254usize],
    pub internalFormat: ma_format,
    pub internalChannels: ma_uint32,
    pub internalSampleRate: ma_uint32,
    pub internalChannelMap: [ma_channel; 254usize],
    pub internalPeriodSizeInFrames: ma_uint32,
    pub internalPeriods: ma_uint32,
    pub channelMixMode: ma_channel_mix_mode,
    pub calculateLFEFromSpatialChannels: ma_bool32,
    pub converter: ma_data_converter,
    pub pIntermediaryBuffer: *mut ::std::os::raw::c_void,
    pub intermediaryBufferCap: ma_uint32,
    pub intermediaryBufferLen: ma_uint32,
    pub pInputCache: *mut ::std::os::raw::c_void,
    pub inputCacheCap: ma_uint64,
    pub inputCacheConsumed: ma_uint64,
    pub inputCacheRemaining: ma_uint64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device__bindgen_ty_2"]
        [::std::mem::size_of::<ma_device__bindgen_ty_2>() - 1432usize];
    ["Alignment of ma_device__bindgen_ty_2"]
        [::std::mem::align_of::<ma_device__bindgen_ty_2>() - 8usize];
    ["Offset of field: ma_device__bindgen_ty_2::pID"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_2, pID) - 0usize];
    ["Offset of field: ma_device__bindgen_ty_2::id"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_2, id) - 8usize];
    ["Offset of field: ma_device__bindgen_ty_2::name"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_2, name) - 264usize];
    ["Offset of field: ma_device__bindgen_ty_2::shareMode"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_2, shareMode) - 520usize];
    ["Offset of field: ma_device__bindgen_ty_2::format"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_2, format) - 524usize];
    ["Offset of field: ma_device__bindgen_ty_2::channels"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_2, channels) - 528usize];
    ["Offset of field: ma_device__bindgen_ty_2::channelMap"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_2, channelMap) - 532usize];
    ["Offset of field: ma_device__bindgen_ty_2::internalFormat"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_2, internalFormat) - 788usize];
    ["Offset of field: ma_device__bindgen_ty_2::internalChannels"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_2, internalChannels) - 792usize];
    ["Offset of field: ma_device__bindgen_ty_2::internalSampleRate"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_2, internalSampleRate) - 796usize];
    ["Offset of field: ma_device__bindgen_ty_2::internalChannelMap"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_2, internalChannelMap) - 800usize];
    ["Offset of field: ma_device__bindgen_ty_2::internalPeriodSizeInFrames"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_2, internalPeriodSizeInFrames) - 1056usize];
    ["Offset of field: ma_device__bindgen_ty_2::internalPeriods"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_2, internalPeriods) - 1060usize];
    ["Offset of field: ma_device__bindgen_ty_2::channelMixMode"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_2, channelMixMode) - 1064usize];
    ["Offset of field: ma_device__bindgen_ty_2::calculateLFEFromSpatialChannels"][::std::mem::offset_of!(
        ma_device__bindgen_ty_2,
        calculateLFEFromSpatialChannels
    ) - 1068usize];
    ["Offset of field: ma_device__bindgen_ty_2::converter"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_2, converter) - 1072usize];
    ["Offset of field: ma_device__bindgen_ty_2::pIntermediaryBuffer"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_2, pIntermediaryBuffer) - 1384usize];
    ["Offset of field: ma_device__bindgen_ty_2::intermediaryBufferCap"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_2, intermediaryBufferCap) - 1392usize];
    ["Offset of field: ma_device__bindgen_ty_2::intermediaryBufferLen"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_2, intermediaryBufferLen) - 1396usize];
    ["Offset of field: ma_device__bindgen_ty_2::pInputCache"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_2, pInputCache) - 1400usize];
    ["Offset of field: ma_device__bindgen_ty_2::inputCacheCap"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_2, inputCacheCap) - 1408usize];
    ["Offset of field: ma_device__bindgen_ty_2::inputCacheConsumed"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_2, inputCacheConsumed) - 1416usize];
    ["Offset of field: ma_device__bindgen_ty_2::inputCacheRemaining"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_2, inputCacheRemaining) - 1424usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_device__bindgen_ty_3 {
    pub pID: *mut ma_device_id,
    pub id: ma_device_id,
    pub name: [::std::os::raw::c_char; 256usize],
    pub shareMode: ma_share_mode,
    pub format: ma_format,
    pub channels: ma_uint32,
    pub channelMap: [ma_channel; 254usize],
    pub internalFormat: ma_format,
    pub internalChannels: ma_uint32,
    pub internalSampleRate: ma_uint32,
    pub internalChannelMap: [ma_channel; 254usize],
    pub internalPeriodSizeInFrames: ma_uint32,
    pub internalPeriods: ma_uint32,
    pub channelMixMode: ma_channel_mix_mode,
    pub calculateLFEFromSpatialChannels: ma_bool32,
    pub converter: ma_data_converter,
    pub pIntermediaryBuffer: *mut ::std::os::raw::c_void,
    pub intermediaryBufferCap: ma_uint32,
    pub intermediaryBufferLen: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device__bindgen_ty_3"]
        [::std::mem::size_of::<ma_device__bindgen_ty_3>() - 1400usize];
    ["Alignment of ma_device__bindgen_ty_3"]
        [::std::mem::align_of::<ma_device__bindgen_ty_3>() - 8usize];
    ["Offset of field: ma_device__bindgen_ty_3::pID"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_3, pID) - 0usize];
    ["Offset of field: ma_device__bindgen_ty_3::id"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_3, id) - 8usize];
    ["Offset of field: ma_device__bindgen_ty_3::name"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_3, name) - 264usize];
    ["Offset of field: ma_device__bindgen_ty_3::shareMode"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_3, shareMode) - 520usize];
    ["Offset of field: ma_device__bindgen_ty_3::format"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_3, format) - 524usize];
    ["Offset of field: ma_device__bindgen_ty_3::channels"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_3, channels) - 528usize];
    ["Offset of field: ma_device__bindgen_ty_3::channelMap"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_3, channelMap) - 532usize];
    ["Offset of field: ma_device__bindgen_ty_3::internalFormat"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_3, internalFormat) - 788usize];
    ["Offset of field: ma_device__bindgen_ty_3::internalChannels"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_3, internalChannels) - 792usize];
    ["Offset of field: ma_device__bindgen_ty_3::internalSampleRate"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_3, internalSampleRate) - 796usize];
    ["Offset of field: ma_device__bindgen_ty_3::internalChannelMap"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_3, internalChannelMap) - 800usize];
    ["Offset of field: ma_device__bindgen_ty_3::internalPeriodSizeInFrames"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_3, internalPeriodSizeInFrames) - 1056usize];
    ["Offset of field: ma_device__bindgen_ty_3::internalPeriods"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_3, internalPeriods) - 1060usize];
    ["Offset of field: ma_device__bindgen_ty_3::channelMixMode"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_3, channelMixMode) - 1064usize];
    ["Offset of field: ma_device__bindgen_ty_3::calculateLFEFromSpatialChannels"][::std::mem::offset_of!(
        ma_device__bindgen_ty_3,
        calculateLFEFromSpatialChannels
    ) - 1068usize];
    ["Offset of field: ma_device__bindgen_ty_3::converter"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_3, converter) - 1072usize];
    ["Offset of field: ma_device__bindgen_ty_3::pIntermediaryBuffer"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_3, pIntermediaryBuffer) - 1384usize];
    ["Offset of field: ma_device__bindgen_ty_3::intermediaryBufferCap"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_3, intermediaryBufferCap) - 1392usize];
    ["Offset of field: ma_device__bindgen_ty_3::intermediaryBufferLen"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_3, intermediaryBufferLen) - 1396usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_device__bindgen_ty_4 {
    pub wasapi: ma_device__bindgen_ty_4__bindgen_ty_1,
    pub dsound: ma_device__bindgen_ty_4__bindgen_ty_2,
    pub winmm: ma_device__bindgen_ty_4__bindgen_ty_3,
    pub jack: ma_device__bindgen_ty_4__bindgen_ty_4,
    pub null_device: ma_device__bindgen_ty_4__bindgen_ty_5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device__bindgen_ty_4__bindgen_ty_1 {
    pub pAudioClientPlayback: ma_ptr,
    pub pAudioClientCapture: ma_ptr,
    pub pRenderClient: ma_ptr,
    pub pCaptureClient: ma_ptr,
    pub pDeviceEnumerator: ma_ptr,
    pub notificationClient: ma_IMMNotificationClient,
    pub hEventPlayback: ma_handle,
    pub hEventCapture: ma_handle,
    pub actualBufferSizeInFramesPlayback: ma_uint32,
    pub actualBufferSizeInFramesCapture: ma_uint32,
    pub originalPeriodSizeInFrames: ma_uint32,
    pub originalPeriodSizeInMilliseconds: ma_uint32,
    pub originalPeriods: ma_uint32,
    pub originalPerformanceProfile: ma_performance_profile,
    pub periodSizeInFramesPlayback: ma_uint32,
    pub periodSizeInFramesCapture: ma_uint32,
    pub pMappedBufferCapture: *mut ::std::os::raw::c_void,
    pub mappedBufferCaptureCap: ma_uint32,
    pub mappedBufferCaptureLen: ma_uint32,
    pub pMappedBufferPlayback: *mut ::std::os::raw::c_void,
    pub mappedBufferPlaybackCap: ma_uint32,
    pub mappedBufferPlaybackLen: ma_uint32,
    pub isStartedCapture: ma_atomic_bool32,
    pub isStartedPlayback: ma_atomic_bool32,
    pub loopbackProcessID: ma_uint32,
    pub loopbackProcessExclude: ma_bool8,
    pub noAutoConvertSRC: ma_bool8,
    pub noDefaultQualitySRC: ma_bool8,
    pub noHardwareOffloading: ma_bool8,
    pub allowCaptureAutoStreamRouting: ma_bool8,
    pub allowPlaybackAutoStreamRouting: ma_bool8,
    pub isDetachedPlayback: ma_bool8,
    pub isDetachedCapture: ma_bool8,
    pub usage: ma_wasapi_usage,
    pub hAvrtHandle: *mut ::std::os::raw::c_void,
    pub rerouteLock: ma_mutex,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device__bindgen_ty_4__bindgen_ty_1"]
        [::std::mem::size_of::<ma_device__bindgen_ty_4__bindgen_ty_1>() - 184usize];
    ["Alignment of ma_device__bindgen_ty_4__bindgen_ty_1"]
        [::std::mem::align_of::<ma_device__bindgen_ty_4__bindgen_ty_1>() - 8usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::pAudioClientPlayback"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        pAudioClientPlayback
    ) - 0usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::pAudioClientCapture"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        pAudioClientCapture
    ) - 8usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::pRenderClient"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_1, pRenderClient) - 16usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::pCaptureClient"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_1, pCaptureClient) - 24usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::pDeviceEnumerator"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        pDeviceEnumerator
    ) - 32usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::notificationClient"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        notificationClient
    ) - 40usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::hEventPlayback"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_1, hEventPlayback) - 64usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::hEventCapture"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_1, hEventCapture) - 72usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::actualBufferSizeInFramesPlayback"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        actualBufferSizeInFramesPlayback
    )
        - 80usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::actualBufferSizeInFramesCapture"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        actualBufferSizeInFramesCapture
    )
        - 84usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::originalPeriodSizeInFrames"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        originalPeriodSizeInFrames
    )
        - 88usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::originalPeriodSizeInMilliseconds"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        originalPeriodSizeInMilliseconds
    )
        - 92usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::originalPeriods"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_1, originalPeriods) - 96usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::originalPerformanceProfile"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        originalPerformanceProfile
    )
        - 100usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::periodSizeInFramesPlayback"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        periodSizeInFramesPlayback
    )
        - 104usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::periodSizeInFramesCapture"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        periodSizeInFramesCapture
    )
        - 108usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::pMappedBufferCapture"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        pMappedBufferCapture
    ) - 112usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::mappedBufferCaptureCap"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        mappedBufferCaptureCap
    )
        - 120usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::mappedBufferCaptureLen"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        mappedBufferCaptureLen
    )
        - 124usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::pMappedBufferPlayback"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        pMappedBufferPlayback
    ) - 128usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::mappedBufferPlaybackCap"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        mappedBufferPlaybackCap
    )
        - 136usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::mappedBufferPlaybackLen"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        mappedBufferPlaybackLen
    )
        - 140usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::isStartedCapture"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        isStartedCapture
    ) - 144usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::isStartedPlayback"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        isStartedPlayback
    ) - 148usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::loopbackProcessID"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        loopbackProcessID
    ) - 152usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::loopbackProcessExclude"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        loopbackProcessExclude
    )
        - 156usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::noAutoConvertSRC"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        noAutoConvertSRC
    ) - 157usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::noDefaultQualitySRC"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        noDefaultQualitySRC
    ) - 158usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::noHardwareOffloading"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        noHardwareOffloading
    ) - 159usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::allowCaptureAutoStreamRouting"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        allowCaptureAutoStreamRouting
    )
        - 160usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::allowPlaybackAutoStreamRouting"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        allowPlaybackAutoStreamRouting
    )
        - 161usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::isDetachedPlayback"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        isDetachedPlayback
    ) - 162usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::isDetachedCapture"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_1,
        isDetachedCapture
    ) - 163usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::usage"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_1, usage) - 164usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::hAvrtHandle"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_1, hAvrtHandle) - 168usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_1::rerouteLock"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_1, rerouteLock) - 176usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device__bindgen_ty_4__bindgen_ty_2 {
    pub pPlayback: ma_ptr,
    pub pPlaybackPrimaryBuffer: ma_ptr,
    pub pPlaybackBuffer: ma_ptr,
    pub pCapture: ma_ptr,
    pub pCaptureBuffer: ma_ptr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device__bindgen_ty_4__bindgen_ty_2"]
        [::std::mem::size_of::<ma_device__bindgen_ty_4__bindgen_ty_2>() - 40usize];
    ["Alignment of ma_device__bindgen_ty_4__bindgen_ty_2"]
        [::std::mem::align_of::<ma_device__bindgen_ty_4__bindgen_ty_2>() - 8usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_2::pPlayback"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_2, pPlayback) - 0usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_2::pPlaybackPrimaryBuffer"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_2,
        pPlaybackPrimaryBuffer
    ) - 8usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_2::pPlaybackBuffer"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_2, pPlaybackBuffer) - 16usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_2::pCapture"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_2, pCapture) - 24usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_2::pCaptureBuffer"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_2, pCaptureBuffer) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device__bindgen_ty_4__bindgen_ty_3 {
    pub hDevicePlayback: ma_handle,
    pub hDeviceCapture: ma_handle,
    pub hEventPlayback: ma_handle,
    pub hEventCapture: ma_handle,
    pub fragmentSizeInFrames: ma_uint32,
    pub iNextHeaderPlayback: ma_uint32,
    pub iNextHeaderCapture: ma_uint32,
    pub headerFramesConsumedPlayback: ma_uint32,
    pub headerFramesConsumedCapture: ma_uint32,
    pub pWAVEHDRPlayback: *mut ma_uint8,
    pub pWAVEHDRCapture: *mut ma_uint8,
    pub pIntermediaryBufferPlayback: *mut ma_uint8,
    pub pIntermediaryBufferCapture: *mut ma_uint8,
    pub _pHeapData: *mut ma_uint8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device__bindgen_ty_4__bindgen_ty_3"]
        [::std::mem::size_of::<ma_device__bindgen_ty_4__bindgen_ty_3>() - 96usize];
    ["Alignment of ma_device__bindgen_ty_4__bindgen_ty_3"]
        [::std::mem::align_of::<ma_device__bindgen_ty_4__bindgen_ty_3>() - 8usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_3::hDevicePlayback"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_3, hDevicePlayback) - 0usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_3::hDeviceCapture"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_3, hDeviceCapture) - 8usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_3::hEventPlayback"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_3, hEventPlayback) - 16usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_3::hEventCapture"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_3, hEventCapture) - 24usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_3::fragmentSizeInFrames"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_3,
        fragmentSizeInFrames
    ) - 32usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_3::iNextHeaderPlayback"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_3,
        iNextHeaderPlayback
    ) - 36usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_3::iNextHeaderCapture"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_3,
        iNextHeaderCapture
    ) - 40usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_3::headerFramesConsumedPlayback"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_3,
        headerFramesConsumedPlayback
    )
        - 44usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_3::headerFramesConsumedCapture"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_3,
        headerFramesConsumedCapture
    )
        - 48usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_3::pWAVEHDRPlayback"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_3, pWAVEHDRPlayback) - 56usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_3::pWAVEHDRCapture"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_3, pWAVEHDRCapture) - 64usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_3::pIntermediaryBufferPlayback"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_3,
        pIntermediaryBufferPlayback
    )
        - 72usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_3::pIntermediaryBufferCapture"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_3,
        pIntermediaryBufferCapture
    )
        - 80usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_3::_pHeapData"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_3, _pHeapData) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_device__bindgen_ty_4__bindgen_ty_4 {
    pub pClient: ma_ptr,
    pub ppPortsPlayback: *mut ma_ptr,
    pub ppPortsCapture: *mut ma_ptr,
    pub pIntermediaryBufferPlayback: *mut f32,
    pub pIntermediaryBufferCapture: *mut f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device__bindgen_ty_4__bindgen_ty_4"]
        [::std::mem::size_of::<ma_device__bindgen_ty_4__bindgen_ty_4>() - 40usize];
    ["Alignment of ma_device__bindgen_ty_4__bindgen_ty_4"]
        [::std::mem::align_of::<ma_device__bindgen_ty_4__bindgen_ty_4>() - 8usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_4::pClient"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_4, pClient) - 0usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_4::ppPortsPlayback"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_4, ppPortsPlayback) - 8usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_4::ppPortsCapture"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_4, ppPortsCapture) - 16usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_4::pIntermediaryBufferPlayback"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_4,
        pIntermediaryBufferPlayback
    )
        - 24usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_4::pIntermediaryBufferCapture"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_4,
        pIntermediaryBufferCapture
    )
        - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_device__bindgen_ty_4__bindgen_ty_5 {
    pub deviceThread: ma_thread,
    pub operationEvent: ma_event,
    pub operationCompletionEvent: ma_event,
    pub operationSemaphore: ma_semaphore,
    pub operation: ma_uint32,
    pub operationResult: ma_result,
    pub timer: ma_timer,
    pub priorRunTime: f64,
    pub currentPeriodFramesRemainingPlayback: ma_uint32,
    pub currentPeriodFramesRemainingCapture: ma_uint32,
    pub lastProcessedFramePlayback: ma_uint64,
    pub lastProcessedFrameCapture: ma_uint64,
    pub isStarted: ma_atomic_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device__bindgen_ty_4__bindgen_ty_5"]
        [::std::mem::size_of::<ma_device__bindgen_ty_4__bindgen_ty_5>() - 88usize];
    ["Alignment of ma_device__bindgen_ty_4__bindgen_ty_5"]
        [::std::mem::align_of::<ma_device__bindgen_ty_4__bindgen_ty_5>() - 8usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_5::deviceThread"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_5, deviceThread) - 0usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_5::operationEvent"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_5, operationEvent) - 8usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_5::operationCompletionEvent"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_5,
        operationCompletionEvent
    )
        - 16usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_5::operationSemaphore"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_5,
        operationSemaphore
    ) - 24usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_5::operation"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_5, operation) - 32usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_5::operationResult"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_5, operationResult) - 36usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_5::timer"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_5, timer) - 40usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_5::priorRunTime"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_5, priorRunTime) - 48usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_5::currentPeriodFramesRemainingPlayback"] [:: std :: mem :: offset_of ! (ma_device__bindgen_ty_4__bindgen_ty_5 , currentPeriodFramesRemainingPlayback) - 56usize] ;
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_5::currentPeriodFramesRemainingCapture"] [:: std :: mem :: offset_of ! (ma_device__bindgen_ty_4__bindgen_ty_5 , currentPeriodFramesRemainingCapture) - 60usize] ;
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_5::lastProcessedFramePlayback"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_5,
        lastProcessedFramePlayback
    )
        - 64usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_5::lastProcessedFrameCapture"][::std::mem::offset_of!(
        ma_device__bindgen_ty_4__bindgen_ty_5,
        lastProcessedFrameCapture
    )
        - 72usize];
    ["Offset of field: ma_device__bindgen_ty_4__bindgen_ty_5::isStarted"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4__bindgen_ty_5, isStarted) - 80usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device__bindgen_ty_4"]
        [::std::mem::size_of::<ma_device__bindgen_ty_4>() - 184usize];
    ["Alignment of ma_device__bindgen_ty_4"]
        [::std::mem::align_of::<ma_device__bindgen_ty_4>() - 8usize];
    ["Offset of field: ma_device__bindgen_ty_4::wasapi"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4, wasapi) - 0usize];
    ["Offset of field: ma_device__bindgen_ty_4::dsound"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4, dsound) - 0usize];
    ["Offset of field: ma_device__bindgen_ty_4::winmm"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4, winmm) - 0usize];
    ["Offset of field: ma_device__bindgen_ty_4::jack"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4, jack) - 0usize];
    ["Offset of field: ma_device__bindgen_ty_4::null_device"]
        [::std::mem::offset_of!(ma_device__bindgen_ty_4, null_device) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_device"][::std::mem::size_of::<ma_device>() - 3312usize];
    ["Alignment of ma_device"][::std::mem::align_of::<ma_device>() - 8usize];
    ["Offset of field: ma_device::pContext"][::std::mem::offset_of!(ma_device, pContext) - 0usize];
    ["Offset of field: ma_device::type_"][::std::mem::offset_of!(ma_device, type_) - 8usize];
    ["Offset of field: ma_device::sampleRate"]
        [::std::mem::offset_of!(ma_device, sampleRate) - 12usize];
    ["Offset of field: ma_device::state"][::std::mem::offset_of!(ma_device, state) - 16usize];
    ["Offset of field: ma_device::onData"][::std::mem::offset_of!(ma_device, onData) - 24usize];
    ["Offset of field: ma_device::onNotification"]
        [::std::mem::offset_of!(ma_device, onNotification) - 32usize];
    ["Offset of field: ma_device::onStop"][::std::mem::offset_of!(ma_device, onStop) - 40usize];
    ["Offset of field: ma_device::pUserData"]
        [::std::mem::offset_of!(ma_device, pUserData) - 48usize];
    ["Offset of field: ma_device::startStopLock"]
        [::std::mem::offset_of!(ma_device, startStopLock) - 56usize];
    ["Offset of field: ma_device::wakeupEvent"]
        [::std::mem::offset_of!(ma_device, wakeupEvent) - 64usize];
    ["Offset of field: ma_device::startEvent"]
        [::std::mem::offset_of!(ma_device, startEvent) - 72usize];
    ["Offset of field: ma_device::stopEvent"]
        [::std::mem::offset_of!(ma_device, stopEvent) - 80usize];
    ["Offset of field: ma_device::thread"][::std::mem::offset_of!(ma_device, thread) - 88usize];
    ["Offset of field: ma_device::workResult"]
        [::std::mem::offset_of!(ma_device, workResult) - 96usize];
    ["Offset of field: ma_device::isOwnerOfContext"]
        [::std::mem::offset_of!(ma_device, isOwnerOfContext) - 100usize];
    ["Offset of field: ma_device::noPreSilencedOutputBuffer"]
        [::std::mem::offset_of!(ma_device, noPreSilencedOutputBuffer) - 101usize];
    ["Offset of field: ma_device::noClip"][::std::mem::offset_of!(ma_device, noClip) - 102usize];
    ["Offset of field: ma_device::noDisableDenormals"]
        [::std::mem::offset_of!(ma_device, noDisableDenormals) - 103usize];
    ["Offset of field: ma_device::noFixedSizedCallback"]
        [::std::mem::offset_of!(ma_device, noFixedSizedCallback) - 104usize];
    ["Offset of field: ma_device::masterVolumeFactor"]
        [::std::mem::offset_of!(ma_device, masterVolumeFactor) - 108usize];
    ["Offset of field: ma_device::duplexRB"]
        [::std::mem::offset_of!(ma_device, duplexRB) - 112usize];
    ["Offset of field: ma_device::resampling"]
        [::std::mem::offset_of!(ma_device, resampling) - 264usize];
    ["Offset of field: ma_device::playback"]
        [::std::mem::offset_of!(ma_device, playback) - 296usize];
    ["Offset of field: ma_device::capture"][::std::mem::offset_of!(ma_device, capture) - 1728usize];
};
unsafe extern "C" {
    pub fn ma_context_config_init() -> ma_context_config;
}
unsafe extern "C" {
    pub fn ma_context_init(
        backends: *const ma_backend,
        backendCount: ma_uint32,
        pConfig: *const ma_context_config,
        pContext: *mut ma_context,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_context_uninit(pContext: *mut ma_context) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_context_sizeof() -> usize;
}
unsafe extern "C" {
    pub fn ma_context_get_log(pContext: *mut ma_context) -> *mut ma_log;
}
unsafe extern "C" {
    pub fn ma_context_enumerate_devices(
        pContext: *mut ma_context,
        callback: ma_enum_devices_callback_proc,
        pUserData: *mut ::std::os::raw::c_void,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_context_get_devices(
        pContext: *mut ma_context,
        ppPlaybackDeviceInfos: *mut *mut ma_device_info,
        pPlaybackDeviceCount: *mut ma_uint32,
        ppCaptureDeviceInfos: *mut *mut ma_device_info,
        pCaptureDeviceCount: *mut ma_uint32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_context_get_device_info(
        pContext: *mut ma_context,
        deviceType: ma_device_type,
        pDeviceID: *const ma_device_id,
        pDeviceInfo: *mut ma_device_info,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_context_is_loopback_supported(pContext: *mut ma_context) -> ma_bool32;
}
unsafe extern "C" {
    pub fn ma_device_config_init(deviceType: ma_device_type) -> ma_device_config;
}
unsafe extern "C" {
    pub fn ma_device_init(
        pContext: *mut ma_context,
        pConfig: *const ma_device_config,
        pDevice: *mut ma_device,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_device_init_ex(
        backends: *const ma_backend,
        backendCount: ma_uint32,
        pContextConfig: *const ma_context_config,
        pConfig: *const ma_device_config,
        pDevice: *mut ma_device,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_device_uninit(pDevice: *mut ma_device);
}
unsafe extern "C" {
    pub fn ma_device_get_context(pDevice: *mut ma_device) -> *mut ma_context;
}
unsafe extern "C" {
    pub fn ma_device_get_log(pDevice: *mut ma_device) -> *mut ma_log;
}
unsafe extern "C" {
    pub fn ma_device_get_info(
        pDevice: *mut ma_device,
        type_: ma_device_type,
        pDeviceInfo: *mut ma_device_info,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_device_get_name(
        pDevice: *mut ma_device,
        type_: ma_device_type,
        pName: *mut ::std::os::raw::c_char,
        nameCap: usize,
        pLengthNotIncludingNullTerminator: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_device_start(pDevice: *mut ma_device) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_device_stop(pDevice: *mut ma_device) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_device_is_started(pDevice: *const ma_device) -> ma_bool32;
}
unsafe extern "C" {
    pub fn ma_device_get_state(pDevice: *const ma_device) -> ma_device_state;
}
unsafe extern "C" {
    pub fn ma_device_post_init(
        pDevice: *mut ma_device,
        deviceType: ma_device_type,
        pPlaybackDescriptor: *const ma_device_descriptor,
        pCaptureDescriptor: *const ma_device_descriptor,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_device_set_master_volume(pDevice: *mut ma_device, volume: f32) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_device_get_master_volume(pDevice: *mut ma_device, pVolume: *mut f32) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_device_set_master_volume_db(pDevice: *mut ma_device, gainDB: f32) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_device_get_master_volume_db(pDevice: *mut ma_device, pGainDB: *mut f32) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_device_handle_backend_data_callback(
        pDevice: *mut ma_device,
        pOutput: *mut ::std::os::raw::c_void,
        pInput: *const ::std::os::raw::c_void,
        frameCount: ma_uint32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_calculate_buffer_size_in_frames_from_descriptor(
        pDescriptor: *const ma_device_descriptor,
        nativeSampleRate: ma_uint32,
        performanceProfile: ma_performance_profile,
    ) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_get_backend_name(backend: ma_backend) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ma_get_backend_from_name(
        pBackendName: *const ::std::os::raw::c_char,
        pBackend: *mut ma_backend,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_is_backend_enabled(backend: ma_backend) -> ma_bool32;
}
unsafe extern "C" {
    pub fn ma_get_enabled_backends(
        pBackends: *mut ma_backend,
        backendCap: usize,
        pBackendCount: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_is_loopback_supported(backend: ma_backend) -> ma_bool32;
}
unsafe extern "C" {
    #[doc = "Utilities"]
    pub fn ma_calculate_buffer_size_in_milliseconds_from_frames(
        bufferSizeInFrames: ma_uint32,
        sampleRate: ma_uint32,
    ) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_calculate_buffer_size_in_frames_from_milliseconds(
        bufferSizeInMilliseconds: ma_uint32,
        sampleRate: ma_uint32,
    ) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_copy_pcm_frames(
        dst: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
        format: ma_format,
        channels: ma_uint32,
    );
}
unsafe extern "C" {
    pub fn ma_silence_pcm_frames(
        p: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        format: ma_format,
        channels: ma_uint32,
    );
}
unsafe extern "C" {
    pub fn ma_offset_pcm_frames_ptr(
        p: *mut ::std::os::raw::c_void,
        offsetInFrames: ma_uint64,
        format: ma_format,
        channels: ma_uint32,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn ma_offset_pcm_frames_const_ptr(
        p: *const ::std::os::raw::c_void,
        offsetInFrames: ma_uint64,
        format: ma_format,
        channels: ma_uint32,
    ) -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn ma_clip_samples_u8(pDst: *mut ma_uint8, pSrc: *const ma_int16, count: ma_uint64);
}
unsafe extern "C" {
    pub fn ma_clip_samples_s16(pDst: *mut ma_int16, pSrc: *const ma_int32, count: ma_uint64);
}
unsafe extern "C" {
    pub fn ma_clip_samples_s24(pDst: *mut ma_uint8, pSrc: *const ma_int64, count: ma_uint64);
}
unsafe extern "C" {
    pub fn ma_clip_samples_s32(pDst: *mut ma_int32, pSrc: *const ma_int64, count: ma_uint64);
}
unsafe extern "C" {
    pub fn ma_clip_samples_f32(pDst: *mut f32, pSrc: *const f32, count: ma_uint64);
}
unsafe extern "C" {
    pub fn ma_clip_pcm_frames(
        pDst: *mut ::std::os::raw::c_void,
        pSrc: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
        format: ma_format,
        channels: ma_uint32,
    );
}
unsafe extern "C" {
    pub fn ma_copy_and_apply_volume_factor_u8(
        pSamplesOut: *mut ma_uint8,
        pSamplesIn: *const ma_uint8,
        sampleCount: ma_uint64,
        factor: f32,
    );
}
unsafe extern "C" {
    pub fn ma_copy_and_apply_volume_factor_s16(
        pSamplesOut: *mut ma_int16,
        pSamplesIn: *const ma_int16,
        sampleCount: ma_uint64,
        factor: f32,
    );
}
unsafe extern "C" {
    pub fn ma_copy_and_apply_volume_factor_s24(
        pSamplesOut: *mut ::std::os::raw::c_void,
        pSamplesIn: *const ::std::os::raw::c_void,
        sampleCount: ma_uint64,
        factor: f32,
    );
}
unsafe extern "C" {
    pub fn ma_copy_and_apply_volume_factor_s32(
        pSamplesOut: *mut ma_int32,
        pSamplesIn: *const ma_int32,
        sampleCount: ma_uint64,
        factor: f32,
    );
}
unsafe extern "C" {
    pub fn ma_copy_and_apply_volume_factor_f32(
        pSamplesOut: *mut f32,
        pSamplesIn: *const f32,
        sampleCount: ma_uint64,
        factor: f32,
    );
}
unsafe extern "C" {
    pub fn ma_apply_volume_factor_u8(pSamples: *mut ma_uint8, sampleCount: ma_uint64, factor: f32);
}
unsafe extern "C" {
    pub fn ma_apply_volume_factor_s16(pSamples: *mut ma_int16, sampleCount: ma_uint64, factor: f32);
}
unsafe extern "C" {
    pub fn ma_apply_volume_factor_s24(
        pSamples: *mut ::std::os::raw::c_void,
        sampleCount: ma_uint64,
        factor: f32,
    );
}
unsafe extern "C" {
    pub fn ma_apply_volume_factor_s32(pSamples: *mut ma_int32, sampleCount: ma_uint64, factor: f32);
}
unsafe extern "C" {
    pub fn ma_apply_volume_factor_f32(pSamples: *mut f32, sampleCount: ma_uint64, factor: f32);
}
unsafe extern "C" {
    pub fn ma_copy_and_apply_volume_factor_pcm_frames_u8(
        pFramesOut: *mut ma_uint8,
        pFramesIn: *const ma_uint8,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
unsafe extern "C" {
    pub fn ma_copy_and_apply_volume_factor_pcm_frames_s16(
        pFramesOut: *mut ma_int16,
        pFramesIn: *const ma_int16,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
unsafe extern "C" {
    pub fn ma_copy_and_apply_volume_factor_pcm_frames_s24(
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
unsafe extern "C" {
    pub fn ma_copy_and_apply_volume_factor_pcm_frames_s32(
        pFramesOut: *mut ma_int32,
        pFramesIn: *const ma_int32,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
unsafe extern "C" {
    pub fn ma_copy_and_apply_volume_factor_pcm_frames_f32(
        pFramesOut: *mut f32,
        pFramesIn: *const f32,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
unsafe extern "C" {
    pub fn ma_copy_and_apply_volume_factor_pcm_frames(
        pFramesOut: *mut ::std::os::raw::c_void,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
        format: ma_format,
        channels: ma_uint32,
        factor: f32,
    );
}
unsafe extern "C" {
    pub fn ma_apply_volume_factor_pcm_frames_u8(
        pFrames: *mut ma_uint8,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
unsafe extern "C" {
    pub fn ma_apply_volume_factor_pcm_frames_s16(
        pFrames: *mut ma_int16,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
unsafe extern "C" {
    pub fn ma_apply_volume_factor_pcm_frames_s24(
        pFrames: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
unsafe extern "C" {
    pub fn ma_apply_volume_factor_pcm_frames_s32(
        pFrames: *mut ma_int32,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
unsafe extern "C" {
    pub fn ma_apply_volume_factor_pcm_frames_f32(
        pFrames: *mut f32,
        frameCount: ma_uint64,
        channels: ma_uint32,
        factor: f32,
    );
}
unsafe extern "C" {
    pub fn ma_apply_volume_factor_pcm_frames(
        pFrames: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        format: ma_format,
        channels: ma_uint32,
        factor: f32,
    );
}
unsafe extern "C" {
    pub fn ma_copy_and_apply_volume_factor_per_channel_f32(
        pFramesOut: *mut f32,
        pFramesIn: *const f32,
        frameCount: ma_uint64,
        channels: ma_uint32,
        pChannelGains: *mut f32,
    );
}
unsafe extern "C" {
    pub fn ma_copy_and_apply_volume_and_clip_samples_u8(
        pDst: *mut ma_uint8,
        pSrc: *const ma_int16,
        count: ma_uint64,
        volume: f32,
    );
}
unsafe extern "C" {
    pub fn ma_copy_and_apply_volume_and_clip_samples_s16(
        pDst: *mut ma_int16,
        pSrc: *const ma_int32,
        count: ma_uint64,
        volume: f32,
    );
}
unsafe extern "C" {
    pub fn ma_copy_and_apply_volume_and_clip_samples_s24(
        pDst: *mut ma_uint8,
        pSrc: *const ma_int64,
        count: ma_uint64,
        volume: f32,
    );
}
unsafe extern "C" {
    pub fn ma_copy_and_apply_volume_and_clip_samples_s32(
        pDst: *mut ma_int32,
        pSrc: *const ma_int64,
        count: ma_uint64,
        volume: f32,
    );
}
unsafe extern "C" {
    pub fn ma_copy_and_apply_volume_and_clip_samples_f32(
        pDst: *mut f32,
        pSrc: *const f32,
        count: ma_uint64,
        volume: f32,
    );
}
unsafe extern "C" {
    pub fn ma_copy_and_apply_volume_and_clip_pcm_frames(
        pDst: *mut ::std::os::raw::c_void,
        pSrc: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
        format: ma_format,
        channels: ma_uint32,
        volume: f32,
    );
}
unsafe extern "C" {
    pub fn ma_volume_linear_to_db(factor: f32) -> f32;
}
unsafe extern "C" {
    pub fn ma_volume_db_to_linear(gain: f32) -> f32;
}
unsafe extern "C" {
    pub fn ma_mix_pcm_frames_f32(
        pDst: *mut f32,
        pSrc: *const f32,
        frameCount: ma_uint64,
        channels: ma_uint32,
        volume: f32,
    ) -> ma_result;
}
#[doc = "VFS\n===\n\nThe VFS object (virtual file system) is what's used to customize file access. This is useful in cases where stdio FILE* based APIs may not be entirely\nappropriate for a given situation."]
pub type ma_vfs = ::std::os::raw::c_void;
pub type ma_vfs_file = ma_handle;
pub const ma_open_mode_flags_MA_OPEN_MODE_READ: ma_open_mode_flags = 1;
pub const ma_open_mode_flags_MA_OPEN_MODE_WRITE: ma_open_mode_flags = 2;
pub type ma_open_mode_flags = ::std::os::raw::c_int;
pub const ma_seek_origin_ma_seek_origin_start: ma_seek_origin = 0;
pub const ma_seek_origin_ma_seek_origin_current: ma_seek_origin = 1;
pub const ma_seek_origin_ma_seek_origin_end: ma_seek_origin = 2;
pub type ma_seek_origin = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_file_info {
    pub sizeInBytes: ma_uint64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_file_info"][::std::mem::size_of::<ma_file_info>() - 8usize];
    ["Alignment of ma_file_info"][::std::mem::align_of::<ma_file_info>() - 8usize];
    ["Offset of field: ma_file_info::sizeInBytes"]
        [::std::mem::offset_of!(ma_file_info, sizeInBytes) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_vfs_callbacks {
    pub onOpen: ::std::option::Option<
        unsafe extern "C" fn(
            pVFS: *mut ma_vfs,
            pFilePath: *const ::std::os::raw::c_char,
            openMode: ma_uint32,
            pFile: *mut ma_vfs_file,
        ) -> ma_result,
    >,
    pub onOpenW: ::std::option::Option<
        unsafe extern "C" fn(
            pVFS: *mut ma_vfs,
            pFilePath: *const wchar_t,
            openMode: ma_uint32,
            pFile: *mut ma_vfs_file,
        ) -> ma_result,
    >,
    pub onClose: ::std::option::Option<
        unsafe extern "C" fn(pVFS: *mut ma_vfs, file: ma_vfs_file) -> ma_result,
    >,
    pub onRead: ::std::option::Option<
        unsafe extern "C" fn(
            pVFS: *mut ma_vfs,
            file: ma_vfs_file,
            pDst: *mut ::std::os::raw::c_void,
            sizeInBytes: usize,
            pBytesRead: *mut usize,
        ) -> ma_result,
    >,
    pub onWrite: ::std::option::Option<
        unsafe extern "C" fn(
            pVFS: *mut ma_vfs,
            file: ma_vfs_file,
            pSrc: *const ::std::os::raw::c_void,
            sizeInBytes: usize,
            pBytesWritten: *mut usize,
        ) -> ma_result,
    >,
    pub onSeek: ::std::option::Option<
        unsafe extern "C" fn(
            pVFS: *mut ma_vfs,
            file: ma_vfs_file,
            offset: ma_int64,
            origin: ma_seek_origin,
        ) -> ma_result,
    >,
    pub onTell: ::std::option::Option<
        unsafe extern "C" fn(
            pVFS: *mut ma_vfs,
            file: ma_vfs_file,
            pCursor: *mut ma_int64,
        ) -> ma_result,
    >,
    pub onInfo: ::std::option::Option<
        unsafe extern "C" fn(
            pVFS: *mut ma_vfs,
            file: ma_vfs_file,
            pInfo: *mut ma_file_info,
        ) -> ma_result,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_vfs_callbacks"][::std::mem::size_of::<ma_vfs_callbacks>() - 64usize];
    ["Alignment of ma_vfs_callbacks"][::std::mem::align_of::<ma_vfs_callbacks>() - 8usize];
    ["Offset of field: ma_vfs_callbacks::onOpen"]
        [::std::mem::offset_of!(ma_vfs_callbacks, onOpen) - 0usize];
    ["Offset of field: ma_vfs_callbacks::onOpenW"]
        [::std::mem::offset_of!(ma_vfs_callbacks, onOpenW) - 8usize];
    ["Offset of field: ma_vfs_callbacks::onClose"]
        [::std::mem::offset_of!(ma_vfs_callbacks, onClose) - 16usize];
    ["Offset of field: ma_vfs_callbacks::onRead"]
        [::std::mem::offset_of!(ma_vfs_callbacks, onRead) - 24usize];
    ["Offset of field: ma_vfs_callbacks::onWrite"]
        [::std::mem::offset_of!(ma_vfs_callbacks, onWrite) - 32usize];
    ["Offset of field: ma_vfs_callbacks::onSeek"]
        [::std::mem::offset_of!(ma_vfs_callbacks, onSeek) - 40usize];
    ["Offset of field: ma_vfs_callbacks::onTell"]
        [::std::mem::offset_of!(ma_vfs_callbacks, onTell) - 48usize];
    ["Offset of field: ma_vfs_callbacks::onInfo"]
        [::std::mem::offset_of!(ma_vfs_callbacks, onInfo) - 56usize];
};
unsafe extern "C" {
    pub fn ma_vfs_open(
        pVFS: *mut ma_vfs,
        pFilePath: *const ::std::os::raw::c_char,
        openMode: ma_uint32,
        pFile: *mut ma_vfs_file,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_vfs_open_w(
        pVFS: *mut ma_vfs,
        pFilePath: *const wchar_t,
        openMode: ma_uint32,
        pFile: *mut ma_vfs_file,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_vfs_close(pVFS: *mut ma_vfs, file: ma_vfs_file) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_vfs_read(
        pVFS: *mut ma_vfs,
        file: ma_vfs_file,
        pDst: *mut ::std::os::raw::c_void,
        sizeInBytes: usize,
        pBytesRead: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_vfs_write(
        pVFS: *mut ma_vfs,
        file: ma_vfs_file,
        pSrc: *const ::std::os::raw::c_void,
        sizeInBytes: usize,
        pBytesWritten: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_vfs_seek(
        pVFS: *mut ma_vfs,
        file: ma_vfs_file,
        offset: ma_int64,
        origin: ma_seek_origin,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_vfs_tell(pVFS: *mut ma_vfs, file: ma_vfs_file, pCursor: *mut ma_int64) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_vfs_info(pVFS: *mut ma_vfs, file: ma_vfs_file, pInfo: *mut ma_file_info)
        -> ma_result;
}
unsafe extern "C" {
    pub fn ma_vfs_open_and_read_file(
        pVFS: *mut ma_vfs,
        pFilePath: *const ::std::os::raw::c_char,
        ppData: *mut *mut ::std::os::raw::c_void,
        pSize: *mut usize,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    ) -> ma_result;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_default_vfs {
    pub cb: ma_vfs_callbacks,
    pub allocationCallbacks: ma_allocation_callbacks,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_default_vfs"][::std::mem::size_of::<ma_default_vfs>() - 96usize];
    ["Alignment of ma_default_vfs"][::std::mem::align_of::<ma_default_vfs>() - 8usize];
    ["Offset of field: ma_default_vfs::cb"][::std::mem::offset_of!(ma_default_vfs, cb) - 0usize];
    ["Offset of field: ma_default_vfs::allocationCallbacks"]
        [::std::mem::offset_of!(ma_default_vfs, allocationCallbacks) - 64usize];
};
unsafe extern "C" {
    pub fn ma_default_vfs_init(
        pVFS: *mut ma_default_vfs,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    ) -> ma_result;
}
pub type ma_read_proc = ::std::option::Option<
    unsafe extern "C" fn(
        pUserData: *mut ::std::os::raw::c_void,
        pBufferOut: *mut ::std::os::raw::c_void,
        bytesToRead: usize,
        pBytesRead: *mut usize,
    ) -> ma_result,
>;
pub type ma_seek_proc = ::std::option::Option<
    unsafe extern "C" fn(
        pUserData: *mut ::std::os::raw::c_void,
        offset: ma_int64,
        origin: ma_seek_origin,
    ) -> ma_result,
>;
pub type ma_tell_proc = ::std::option::Option<
    unsafe extern "C" fn(
        pUserData: *mut ::std::os::raw::c_void,
        pCursor: *mut ma_int64,
    ) -> ma_result,
>;
pub const ma_encoding_format_ma_encoding_format_unknown: ma_encoding_format = 0;
pub const ma_encoding_format_ma_encoding_format_wav: ma_encoding_format = 1;
pub const ma_encoding_format_ma_encoding_format_flac: ma_encoding_format = 2;
pub const ma_encoding_format_ma_encoding_format_mp3: ma_encoding_format = 3;
pub const ma_encoding_format_ma_encoding_format_vorbis: ma_encoding_format = 4;
pub type ma_encoding_format = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_decoding_backend_config {
    pub preferredFormat: ma_format,
    pub seekPointCount: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_decoding_backend_config"]
        [::std::mem::size_of::<ma_decoding_backend_config>() - 8usize];
    ["Alignment of ma_decoding_backend_config"]
        [::std::mem::align_of::<ma_decoding_backend_config>() - 4usize];
    ["Offset of field: ma_decoding_backend_config::preferredFormat"]
        [::std::mem::offset_of!(ma_decoding_backend_config, preferredFormat) - 0usize];
    ["Offset of field: ma_decoding_backend_config::seekPointCount"]
        [::std::mem::offset_of!(ma_decoding_backend_config, seekPointCount) - 4usize];
};
unsafe extern "C" {
    pub fn ma_decoding_backend_config_init(
        preferredFormat: ma_format,
        seekPointCount: ma_uint32,
    ) -> ma_decoding_backend_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_decoding_backend_vtable {
    pub onInit: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            onRead: ma_read_proc,
            onSeek: ma_seek_proc,
            onTell: ma_tell_proc,
            pReadSeekTellUserData: *mut ::std::os::raw::c_void,
            pConfig: *const ma_decoding_backend_config,
            pAllocationCallbacks: *const ma_allocation_callbacks,
            ppBackend: *mut *mut ma_data_source,
        ) -> ma_result,
    >,
    pub onInitFile: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pFilePath: *const ::std::os::raw::c_char,
            pConfig: *const ma_decoding_backend_config,
            pAllocationCallbacks: *const ma_allocation_callbacks,
            ppBackend: *mut *mut ma_data_source,
        ) -> ma_result,
    >,
    pub onInitFileW: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pFilePath: *const wchar_t,
            pConfig: *const ma_decoding_backend_config,
            pAllocationCallbacks: *const ma_allocation_callbacks,
            ppBackend: *mut *mut ma_data_source,
        ) -> ma_result,
    >,
    pub onInitMemory: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pData: *const ::std::os::raw::c_void,
            dataSize: usize,
            pConfig: *const ma_decoding_backend_config,
            pAllocationCallbacks: *const ma_allocation_callbacks,
            ppBackend: *mut *mut ma_data_source,
        ) -> ma_result,
    >,
    pub onUninit: ::std::option::Option<
        unsafe extern "C" fn(
            pUserData: *mut ::std::os::raw::c_void,
            pBackend: *mut ma_data_source,
            pAllocationCallbacks: *const ma_allocation_callbacks,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_decoding_backend_vtable"]
        [::std::mem::size_of::<ma_decoding_backend_vtable>() - 40usize];
    ["Alignment of ma_decoding_backend_vtable"]
        [::std::mem::align_of::<ma_decoding_backend_vtable>() - 8usize];
    ["Offset of field: ma_decoding_backend_vtable::onInit"]
        [::std::mem::offset_of!(ma_decoding_backend_vtable, onInit) - 0usize];
    ["Offset of field: ma_decoding_backend_vtable::onInitFile"]
        [::std::mem::offset_of!(ma_decoding_backend_vtable, onInitFile) - 8usize];
    ["Offset of field: ma_decoding_backend_vtable::onInitFileW"]
        [::std::mem::offset_of!(ma_decoding_backend_vtable, onInitFileW) - 16usize];
    ["Offset of field: ma_decoding_backend_vtable::onInitMemory"]
        [::std::mem::offset_of!(ma_decoding_backend_vtable, onInitMemory) - 24usize];
    ["Offset of field: ma_decoding_backend_vtable::onUninit"]
        [::std::mem::offset_of!(ma_decoding_backend_vtable, onUninit) - 32usize];
};
pub type ma_decoder_read_proc = ::std::option::Option<
    unsafe extern "C" fn(
        pDecoder: *mut ma_decoder,
        pBufferOut: *mut ::std::os::raw::c_void,
        bytesToRead: usize,
        pBytesRead: *mut usize,
    ) -> ma_result,
>;
pub type ma_decoder_seek_proc = ::std::option::Option<
    unsafe extern "C" fn(
        pDecoder: *mut ma_decoder,
        byteOffset: ma_int64,
        origin: ma_seek_origin,
    ) -> ma_result,
>;
pub type ma_decoder_tell_proc = ::std::option::Option<
    unsafe extern "C" fn(pDecoder: *mut ma_decoder, pCursor: *mut ma_int64) -> ma_result,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_decoder_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub pChannelMap: *mut ma_channel,
    pub channelMixMode: ma_channel_mix_mode,
    pub ditherMode: ma_dither_mode,
    pub resampling: ma_resampler_config,
    pub allocationCallbacks: ma_allocation_callbacks,
    pub encodingFormat: ma_encoding_format,
    pub seekPointCount: ma_uint32,
    pub ppCustomBackendVTables: *mut *mut ma_decoding_backend_vtable,
    pub customBackendCount: ma_uint32,
    pub pCustomBackendUserData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_decoder_config"][::std::mem::size_of::<ma_decoder_config>() - 144usize];
    ["Alignment of ma_decoder_config"][::std::mem::align_of::<ma_decoder_config>() - 8usize];
    ["Offset of field: ma_decoder_config::format"]
        [::std::mem::offset_of!(ma_decoder_config, format) - 0usize];
    ["Offset of field: ma_decoder_config::channels"]
        [::std::mem::offset_of!(ma_decoder_config, channels) - 4usize];
    ["Offset of field: ma_decoder_config::sampleRate"]
        [::std::mem::offset_of!(ma_decoder_config, sampleRate) - 8usize];
    ["Offset of field: ma_decoder_config::pChannelMap"]
        [::std::mem::offset_of!(ma_decoder_config, pChannelMap) - 16usize];
    ["Offset of field: ma_decoder_config::channelMixMode"]
        [::std::mem::offset_of!(ma_decoder_config, channelMixMode) - 24usize];
    ["Offset of field: ma_decoder_config::ditherMode"]
        [::std::mem::offset_of!(ma_decoder_config, ditherMode) - 28usize];
    ["Offset of field: ma_decoder_config::resampling"]
        [::std::mem::offset_of!(ma_decoder_config, resampling) - 32usize];
    ["Offset of field: ma_decoder_config::allocationCallbacks"]
        [::std::mem::offset_of!(ma_decoder_config, allocationCallbacks) - 80usize];
    ["Offset of field: ma_decoder_config::encodingFormat"]
        [::std::mem::offset_of!(ma_decoder_config, encodingFormat) - 112usize];
    ["Offset of field: ma_decoder_config::seekPointCount"]
        [::std::mem::offset_of!(ma_decoder_config, seekPointCount) - 116usize];
    ["Offset of field: ma_decoder_config::ppCustomBackendVTables"]
        [::std::mem::offset_of!(ma_decoder_config, ppCustomBackendVTables) - 120usize];
    ["Offset of field: ma_decoder_config::customBackendCount"]
        [::std::mem::offset_of!(ma_decoder_config, customBackendCount) - 128usize];
    ["Offset of field: ma_decoder_config::pCustomBackendUserData"]
        [::std::mem::offset_of!(ma_decoder_config, pCustomBackendUserData) - 136usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_decoder {
    pub ds: ma_data_source_base,
    pub pBackend: *mut ma_data_source,
    pub pBackendVTable: *const ma_decoding_backend_vtable,
    pub pBackendUserData: *mut ::std::os::raw::c_void,
    pub onRead: ma_decoder_read_proc,
    pub onSeek: ma_decoder_seek_proc,
    pub onTell: ma_decoder_tell_proc,
    pub pUserData: *mut ::std::os::raw::c_void,
    pub readPointerInPCMFrames: ma_uint64,
    pub outputFormat: ma_format,
    pub outputChannels: ma_uint32,
    pub outputSampleRate: ma_uint32,
    pub converter: ma_data_converter,
    pub pInputCache: *mut ::std::os::raw::c_void,
    pub inputCacheCap: ma_uint64,
    pub inputCacheConsumed: ma_uint64,
    pub inputCacheRemaining: ma_uint64,
    pub allocationCallbacks: ma_allocation_callbacks,
    pub data: ma_decoder__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_decoder__bindgen_ty_1 {
    pub vfs: ma_decoder__bindgen_ty_1__bindgen_ty_1,
    pub memory: ma_decoder__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_decoder__bindgen_ty_1__bindgen_ty_1 {
    pub pVFS: *mut ma_vfs,
    pub file: ma_vfs_file,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_decoder__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ma_decoder__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of ma_decoder__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ma_decoder__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: ma_decoder__bindgen_ty_1__bindgen_ty_1::pVFS"]
        [::std::mem::offset_of!(ma_decoder__bindgen_ty_1__bindgen_ty_1, pVFS) - 0usize];
    ["Offset of field: ma_decoder__bindgen_ty_1__bindgen_ty_1::file"]
        [::std::mem::offset_of!(ma_decoder__bindgen_ty_1__bindgen_ty_1, file) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_decoder__bindgen_ty_1__bindgen_ty_2 {
    pub pData: *const ma_uint8,
    pub dataSize: usize,
    pub currentReadPos: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_decoder__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<ma_decoder__bindgen_ty_1__bindgen_ty_2>() - 24usize];
    ["Alignment of ma_decoder__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<ma_decoder__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: ma_decoder__bindgen_ty_1__bindgen_ty_2::pData"]
        [::std::mem::offset_of!(ma_decoder__bindgen_ty_1__bindgen_ty_2, pData) - 0usize];
    ["Offset of field: ma_decoder__bindgen_ty_1__bindgen_ty_2::dataSize"]
        [::std::mem::offset_of!(ma_decoder__bindgen_ty_1__bindgen_ty_2, dataSize) - 8usize];
    ["Offset of field: ma_decoder__bindgen_ty_1__bindgen_ty_2::currentReadPos"]
        [::std::mem::offset_of!(ma_decoder__bindgen_ty_1__bindgen_ty_2, currentReadPos) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_decoder__bindgen_ty_1"]
        [::std::mem::size_of::<ma_decoder__bindgen_ty_1>() - 24usize];
    ["Alignment of ma_decoder__bindgen_ty_1"]
        [::std::mem::align_of::<ma_decoder__bindgen_ty_1>() - 8usize];
    ["Offset of field: ma_decoder__bindgen_ty_1::vfs"]
        [::std::mem::offset_of!(ma_decoder__bindgen_ty_1, vfs) - 0usize];
    ["Offset of field: ma_decoder__bindgen_ty_1::memory"]
        [::std::mem::offset_of!(ma_decoder__bindgen_ty_1, memory) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_decoder"][::std::mem::size_of::<ma_decoder>() - 552usize];
    ["Alignment of ma_decoder"][::std::mem::align_of::<ma_decoder>() - 8usize];
    ["Offset of field: ma_decoder::ds"][::std::mem::offset_of!(ma_decoder, ds) - 0usize];
    ["Offset of field: ma_decoder::pBackend"]
        [::std::mem::offset_of!(ma_decoder, pBackend) - 72usize];
    ["Offset of field: ma_decoder::pBackendVTable"]
        [::std::mem::offset_of!(ma_decoder, pBackendVTable) - 80usize];
    ["Offset of field: ma_decoder::pBackendUserData"]
        [::std::mem::offset_of!(ma_decoder, pBackendUserData) - 88usize];
    ["Offset of field: ma_decoder::onRead"][::std::mem::offset_of!(ma_decoder, onRead) - 96usize];
    ["Offset of field: ma_decoder::onSeek"][::std::mem::offset_of!(ma_decoder, onSeek) - 104usize];
    ["Offset of field: ma_decoder::onTell"][::std::mem::offset_of!(ma_decoder, onTell) - 112usize];
    ["Offset of field: ma_decoder::pUserData"]
        [::std::mem::offset_of!(ma_decoder, pUserData) - 120usize];
    ["Offset of field: ma_decoder::readPointerInPCMFrames"]
        [::std::mem::offset_of!(ma_decoder, readPointerInPCMFrames) - 128usize];
    ["Offset of field: ma_decoder::outputFormat"]
        [::std::mem::offset_of!(ma_decoder, outputFormat) - 136usize];
    ["Offset of field: ma_decoder::outputChannels"]
        [::std::mem::offset_of!(ma_decoder, outputChannels) - 140usize];
    ["Offset of field: ma_decoder::outputSampleRate"]
        [::std::mem::offset_of!(ma_decoder, outputSampleRate) - 144usize];
    ["Offset of field: ma_decoder::converter"]
        [::std::mem::offset_of!(ma_decoder, converter) - 152usize];
    ["Offset of field: ma_decoder::pInputCache"]
        [::std::mem::offset_of!(ma_decoder, pInputCache) - 464usize];
    ["Offset of field: ma_decoder::inputCacheCap"]
        [::std::mem::offset_of!(ma_decoder, inputCacheCap) - 472usize];
    ["Offset of field: ma_decoder::inputCacheConsumed"]
        [::std::mem::offset_of!(ma_decoder, inputCacheConsumed) - 480usize];
    ["Offset of field: ma_decoder::inputCacheRemaining"]
        [::std::mem::offset_of!(ma_decoder, inputCacheRemaining) - 488usize];
    ["Offset of field: ma_decoder::allocationCallbacks"]
        [::std::mem::offset_of!(ma_decoder, allocationCallbacks) - 496usize];
    ["Offset of field: ma_decoder::data"][::std::mem::offset_of!(ma_decoder, data) - 528usize];
};
unsafe extern "C" {
    pub fn ma_decoder_config_init(
        outputFormat: ma_format,
        outputChannels: ma_uint32,
        outputSampleRate: ma_uint32,
    ) -> ma_decoder_config;
}
unsafe extern "C" {
    pub fn ma_decoder_config_init_default() -> ma_decoder_config;
}
unsafe extern "C" {
    pub fn ma_decoder_init(
        onRead: ma_decoder_read_proc,
        onSeek: ma_decoder_seek_proc,
        pUserData: *mut ::std::os::raw::c_void,
        pConfig: *const ma_decoder_config,
        pDecoder: *mut ma_decoder,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_decoder_init_memory(
        pData: *const ::std::os::raw::c_void,
        dataSize: usize,
        pConfig: *const ma_decoder_config,
        pDecoder: *mut ma_decoder,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_decoder_init_vfs(
        pVFS: *mut ma_vfs,
        pFilePath: *const ::std::os::raw::c_char,
        pConfig: *const ma_decoder_config,
        pDecoder: *mut ma_decoder,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_decoder_init_vfs_w(
        pVFS: *mut ma_vfs,
        pFilePath: *const wchar_t,
        pConfig: *const ma_decoder_config,
        pDecoder: *mut ma_decoder,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_decoder_init_file(
        pFilePath: *const ::std::os::raw::c_char,
        pConfig: *const ma_decoder_config,
        pDecoder: *mut ma_decoder,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_decoder_init_file_w(
        pFilePath: *const wchar_t,
        pConfig: *const ma_decoder_config,
        pDecoder: *mut ma_decoder,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_decoder_uninit(pDecoder: *mut ma_decoder) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_decoder_read_pcm_frames(
        pDecoder: *mut ma_decoder,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        pFramesRead: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_decoder_seek_to_pcm_frame(
        pDecoder: *mut ma_decoder,
        frameIndex: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_decoder_get_data_format(
        pDecoder: *mut ma_decoder,
        pFormat: *mut ma_format,
        pChannels: *mut ma_uint32,
        pSampleRate: *mut ma_uint32,
        pChannelMap: *mut ma_channel,
        channelMapCap: usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_decoder_get_cursor_in_pcm_frames(
        pDecoder: *mut ma_decoder,
        pCursor: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_decoder_get_length_in_pcm_frames(
        pDecoder: *mut ma_decoder,
        pLength: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_decoder_get_available_frames(
        pDecoder: *mut ma_decoder,
        pAvailableFrames: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_decode_from_vfs(
        pVFS: *mut ma_vfs,
        pFilePath: *const ::std::os::raw::c_char,
        pConfig: *mut ma_decoder_config,
        pFrameCountOut: *mut ma_uint64,
        ppPCMFramesOut: *mut *mut ::std::os::raw::c_void,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_decode_file(
        pFilePath: *const ::std::os::raw::c_char,
        pConfig: *mut ma_decoder_config,
        pFrameCountOut: *mut ma_uint64,
        ppPCMFramesOut: *mut *mut ::std::os::raw::c_void,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_decode_memory(
        pData: *const ::std::os::raw::c_void,
        dataSize: usize,
        pConfig: *mut ma_decoder_config,
        pFrameCountOut: *mut ma_uint64,
        ppPCMFramesOut: *mut *mut ::std::os::raw::c_void,
    ) -> ma_result;
}
pub type ma_encoder_write_proc = ::std::option::Option<
    unsafe extern "C" fn(
        pEncoder: *mut ma_encoder,
        pBufferIn: *const ::std::os::raw::c_void,
        bytesToWrite: usize,
        pBytesWritten: *mut usize,
    ) -> ma_result,
>;
pub type ma_encoder_seek_proc = ::std::option::Option<
    unsafe extern "C" fn(
        pEncoder: *mut ma_encoder,
        offset: ma_int64,
        origin: ma_seek_origin,
    ) -> ma_result,
>;
pub type ma_encoder_init_proc =
    ::std::option::Option<unsafe extern "C" fn(pEncoder: *mut ma_encoder) -> ma_result>;
pub type ma_encoder_uninit_proc =
    ::std::option::Option<unsafe extern "C" fn(pEncoder: *mut ma_encoder)>;
pub type ma_encoder_write_pcm_frames_proc = ::std::option::Option<
    unsafe extern "C" fn(
        pEncoder: *mut ma_encoder,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
        pFramesWritten: *mut ma_uint64,
    ) -> ma_result,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_encoder_config {
    pub encodingFormat: ma_encoding_format,
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub allocationCallbacks: ma_allocation_callbacks,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_encoder_config"][::std::mem::size_of::<ma_encoder_config>() - 48usize];
    ["Alignment of ma_encoder_config"][::std::mem::align_of::<ma_encoder_config>() - 8usize];
    ["Offset of field: ma_encoder_config::encodingFormat"]
        [::std::mem::offset_of!(ma_encoder_config, encodingFormat) - 0usize];
    ["Offset of field: ma_encoder_config::format"]
        [::std::mem::offset_of!(ma_encoder_config, format) - 4usize];
    ["Offset of field: ma_encoder_config::channels"]
        [::std::mem::offset_of!(ma_encoder_config, channels) - 8usize];
    ["Offset of field: ma_encoder_config::sampleRate"]
        [::std::mem::offset_of!(ma_encoder_config, sampleRate) - 12usize];
    ["Offset of field: ma_encoder_config::allocationCallbacks"]
        [::std::mem::offset_of!(ma_encoder_config, allocationCallbacks) - 16usize];
};
unsafe extern "C" {
    pub fn ma_encoder_config_init(
        encodingFormat: ma_encoding_format,
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
    ) -> ma_encoder_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_encoder {
    pub config: ma_encoder_config,
    pub onWrite: ma_encoder_write_proc,
    pub onSeek: ma_encoder_seek_proc,
    pub onInit: ma_encoder_init_proc,
    pub onUninit: ma_encoder_uninit_proc,
    pub onWritePCMFrames: ma_encoder_write_pcm_frames_proc,
    pub pUserData: *mut ::std::os::raw::c_void,
    pub pInternalEncoder: *mut ::std::os::raw::c_void,
    pub data: ma_encoder__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_encoder__bindgen_ty_1 {
    pub vfs: ma_encoder__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_encoder__bindgen_ty_1__bindgen_ty_1 {
    pub pVFS: *mut ma_vfs,
    pub file: ma_vfs_file,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_encoder__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ma_encoder__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of ma_encoder__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ma_encoder__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: ma_encoder__bindgen_ty_1__bindgen_ty_1::pVFS"]
        [::std::mem::offset_of!(ma_encoder__bindgen_ty_1__bindgen_ty_1, pVFS) - 0usize];
    ["Offset of field: ma_encoder__bindgen_ty_1__bindgen_ty_1::file"]
        [::std::mem::offset_of!(ma_encoder__bindgen_ty_1__bindgen_ty_1, file) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_encoder__bindgen_ty_1"]
        [::std::mem::size_of::<ma_encoder__bindgen_ty_1>() - 16usize];
    ["Alignment of ma_encoder__bindgen_ty_1"]
        [::std::mem::align_of::<ma_encoder__bindgen_ty_1>() - 8usize];
    ["Offset of field: ma_encoder__bindgen_ty_1::vfs"]
        [::std::mem::offset_of!(ma_encoder__bindgen_ty_1, vfs) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_encoder"][::std::mem::size_of::<ma_encoder>() - 120usize];
    ["Alignment of ma_encoder"][::std::mem::align_of::<ma_encoder>() - 8usize];
    ["Offset of field: ma_encoder::config"][::std::mem::offset_of!(ma_encoder, config) - 0usize];
    ["Offset of field: ma_encoder::onWrite"][::std::mem::offset_of!(ma_encoder, onWrite) - 48usize];
    ["Offset of field: ma_encoder::onSeek"][::std::mem::offset_of!(ma_encoder, onSeek) - 56usize];
    ["Offset of field: ma_encoder::onInit"][::std::mem::offset_of!(ma_encoder, onInit) - 64usize];
    ["Offset of field: ma_encoder::onUninit"]
        [::std::mem::offset_of!(ma_encoder, onUninit) - 72usize];
    ["Offset of field: ma_encoder::onWritePCMFrames"]
        [::std::mem::offset_of!(ma_encoder, onWritePCMFrames) - 80usize];
    ["Offset of field: ma_encoder::pUserData"]
        [::std::mem::offset_of!(ma_encoder, pUserData) - 88usize];
    ["Offset of field: ma_encoder::pInternalEncoder"]
        [::std::mem::offset_of!(ma_encoder, pInternalEncoder) - 96usize];
    ["Offset of field: ma_encoder::data"][::std::mem::offset_of!(ma_encoder, data) - 104usize];
};
unsafe extern "C" {
    pub fn ma_encoder_init(
        onWrite: ma_encoder_write_proc,
        onSeek: ma_encoder_seek_proc,
        pUserData: *mut ::std::os::raw::c_void,
        pConfig: *const ma_encoder_config,
        pEncoder: *mut ma_encoder,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_encoder_init_vfs(
        pVFS: *mut ma_vfs,
        pFilePath: *const ::std::os::raw::c_char,
        pConfig: *const ma_encoder_config,
        pEncoder: *mut ma_encoder,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_encoder_init_vfs_w(
        pVFS: *mut ma_vfs,
        pFilePath: *const wchar_t,
        pConfig: *const ma_encoder_config,
        pEncoder: *mut ma_encoder,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_encoder_init_file(
        pFilePath: *const ::std::os::raw::c_char,
        pConfig: *const ma_encoder_config,
        pEncoder: *mut ma_encoder,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_encoder_init_file_w(
        pFilePath: *const wchar_t,
        pConfig: *const ma_encoder_config,
        pEncoder: *mut ma_encoder,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_encoder_uninit(pEncoder: *mut ma_encoder);
}
unsafe extern "C" {
    pub fn ma_encoder_write_pcm_frames(
        pEncoder: *mut ma_encoder,
        pFramesIn: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
        pFramesWritten: *mut ma_uint64,
    ) -> ma_result;
}
pub const ma_waveform_type_ma_waveform_type_sine: ma_waveform_type = 0;
pub const ma_waveform_type_ma_waveform_type_square: ma_waveform_type = 1;
pub const ma_waveform_type_ma_waveform_type_triangle: ma_waveform_type = 2;
pub const ma_waveform_type_ma_waveform_type_sawtooth: ma_waveform_type = 3;
pub type ma_waveform_type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_waveform_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub type_: ma_waveform_type,
    pub amplitude: f64,
    pub frequency: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_waveform_config"][::std::mem::size_of::<ma_waveform_config>() - 32usize];
    ["Alignment of ma_waveform_config"][::std::mem::align_of::<ma_waveform_config>() - 8usize];
    ["Offset of field: ma_waveform_config::format"]
        [::std::mem::offset_of!(ma_waveform_config, format) - 0usize];
    ["Offset of field: ma_waveform_config::channels"]
        [::std::mem::offset_of!(ma_waveform_config, channels) - 4usize];
    ["Offset of field: ma_waveform_config::sampleRate"]
        [::std::mem::offset_of!(ma_waveform_config, sampleRate) - 8usize];
    ["Offset of field: ma_waveform_config::type_"]
        [::std::mem::offset_of!(ma_waveform_config, type_) - 12usize];
    ["Offset of field: ma_waveform_config::amplitude"]
        [::std::mem::offset_of!(ma_waveform_config, amplitude) - 16usize];
    ["Offset of field: ma_waveform_config::frequency"]
        [::std::mem::offset_of!(ma_waveform_config, frequency) - 24usize];
};
unsafe extern "C" {
    pub fn ma_waveform_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        type_: ma_waveform_type,
        amplitude: f64,
        frequency: f64,
    ) -> ma_waveform_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_waveform {
    pub ds: ma_data_source_base,
    pub config: ma_waveform_config,
    pub advance: f64,
    pub time: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_waveform"][::std::mem::size_of::<ma_waveform>() - 120usize];
    ["Alignment of ma_waveform"][::std::mem::align_of::<ma_waveform>() - 8usize];
    ["Offset of field: ma_waveform::ds"][::std::mem::offset_of!(ma_waveform, ds) - 0usize];
    ["Offset of field: ma_waveform::config"][::std::mem::offset_of!(ma_waveform, config) - 72usize];
    ["Offset of field: ma_waveform::advance"]
        [::std::mem::offset_of!(ma_waveform, advance) - 104usize];
    ["Offset of field: ma_waveform::time"][::std::mem::offset_of!(ma_waveform, time) - 112usize];
};
unsafe extern "C" {
    pub fn ma_waveform_init(
        pConfig: *const ma_waveform_config,
        pWaveform: *mut ma_waveform,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_waveform_uninit(pWaveform: *mut ma_waveform);
}
unsafe extern "C" {
    pub fn ma_waveform_read_pcm_frames(
        pWaveform: *mut ma_waveform,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        pFramesRead: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_waveform_seek_to_pcm_frame(
        pWaveform: *mut ma_waveform,
        frameIndex: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_waveform_set_amplitude(pWaveform: *mut ma_waveform, amplitude: f64) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_waveform_set_frequency(pWaveform: *mut ma_waveform, frequency: f64) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_waveform_set_type(pWaveform: *mut ma_waveform, type_: ma_waveform_type) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_waveform_set_sample_rate(
        pWaveform: *mut ma_waveform,
        sampleRate: ma_uint32,
    ) -> ma_result;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_pulsewave_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub dutyCycle: f64,
    pub amplitude: f64,
    pub frequency: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_pulsewave_config"][::std::mem::size_of::<ma_pulsewave_config>() - 40usize];
    ["Alignment of ma_pulsewave_config"][::std::mem::align_of::<ma_pulsewave_config>() - 8usize];
    ["Offset of field: ma_pulsewave_config::format"]
        [::std::mem::offset_of!(ma_pulsewave_config, format) - 0usize];
    ["Offset of field: ma_pulsewave_config::channels"]
        [::std::mem::offset_of!(ma_pulsewave_config, channels) - 4usize];
    ["Offset of field: ma_pulsewave_config::sampleRate"]
        [::std::mem::offset_of!(ma_pulsewave_config, sampleRate) - 8usize];
    ["Offset of field: ma_pulsewave_config::dutyCycle"]
        [::std::mem::offset_of!(ma_pulsewave_config, dutyCycle) - 16usize];
    ["Offset of field: ma_pulsewave_config::amplitude"]
        [::std::mem::offset_of!(ma_pulsewave_config, amplitude) - 24usize];
    ["Offset of field: ma_pulsewave_config::frequency"]
        [::std::mem::offset_of!(ma_pulsewave_config, frequency) - 32usize];
};
unsafe extern "C" {
    pub fn ma_pulsewave_config_init(
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
        dutyCycle: f64,
        amplitude: f64,
        frequency: f64,
    ) -> ma_pulsewave_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_pulsewave {
    pub waveform: ma_waveform,
    pub config: ma_pulsewave_config,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_pulsewave"][::std::mem::size_of::<ma_pulsewave>() - 160usize];
    ["Alignment of ma_pulsewave"][::std::mem::align_of::<ma_pulsewave>() - 8usize];
    ["Offset of field: ma_pulsewave::waveform"]
        [::std::mem::offset_of!(ma_pulsewave, waveform) - 0usize];
    ["Offset of field: ma_pulsewave::config"]
        [::std::mem::offset_of!(ma_pulsewave, config) - 120usize];
};
unsafe extern "C" {
    pub fn ma_pulsewave_init(
        pConfig: *const ma_pulsewave_config,
        pWaveform: *mut ma_pulsewave,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_pulsewave_uninit(pWaveform: *mut ma_pulsewave);
}
unsafe extern "C" {
    pub fn ma_pulsewave_read_pcm_frames(
        pWaveform: *mut ma_pulsewave,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        pFramesRead: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_pulsewave_seek_to_pcm_frame(
        pWaveform: *mut ma_pulsewave,
        frameIndex: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_pulsewave_set_amplitude(pWaveform: *mut ma_pulsewave, amplitude: f64) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_pulsewave_set_frequency(pWaveform: *mut ma_pulsewave, frequency: f64) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_pulsewave_set_sample_rate(
        pWaveform: *mut ma_pulsewave,
        sampleRate: ma_uint32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_pulsewave_set_duty_cycle(pWaveform: *mut ma_pulsewave, dutyCycle: f64) -> ma_result;
}
pub const ma_noise_type_ma_noise_type_white: ma_noise_type = 0;
pub const ma_noise_type_ma_noise_type_pink: ma_noise_type = 1;
pub const ma_noise_type_ma_noise_type_brownian: ma_noise_type = 2;
pub type ma_noise_type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_noise_config {
    pub format: ma_format,
    pub channels: ma_uint32,
    pub type_: ma_noise_type,
    pub seed: ma_int32,
    pub amplitude: f64,
    pub duplicateChannels: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_noise_config"][::std::mem::size_of::<ma_noise_config>() - 32usize];
    ["Alignment of ma_noise_config"][::std::mem::align_of::<ma_noise_config>() - 8usize];
    ["Offset of field: ma_noise_config::format"]
        [::std::mem::offset_of!(ma_noise_config, format) - 0usize];
    ["Offset of field: ma_noise_config::channels"]
        [::std::mem::offset_of!(ma_noise_config, channels) - 4usize];
    ["Offset of field: ma_noise_config::type_"]
        [::std::mem::offset_of!(ma_noise_config, type_) - 8usize];
    ["Offset of field: ma_noise_config::seed"]
        [::std::mem::offset_of!(ma_noise_config, seed) - 12usize];
    ["Offset of field: ma_noise_config::amplitude"]
        [::std::mem::offset_of!(ma_noise_config, amplitude) - 16usize];
    ["Offset of field: ma_noise_config::duplicateChannels"]
        [::std::mem::offset_of!(ma_noise_config, duplicateChannels) - 24usize];
};
unsafe extern "C" {
    pub fn ma_noise_config_init(
        format: ma_format,
        channels: ma_uint32,
        type_: ma_noise_type,
        seed: ma_int32,
        amplitude: f64,
    ) -> ma_noise_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_noise {
    pub ds: ma_data_source_base,
    pub config: ma_noise_config,
    pub lcg: ma_lcg,
    pub state: ma_noise__bindgen_ty_1,
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_noise__bindgen_ty_1 {
    pub pink: ma_noise__bindgen_ty_1__bindgen_ty_1,
    pub brownian: ma_noise__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_noise__bindgen_ty_1__bindgen_ty_1 {
    pub bin: *mut *mut f64,
    pub accumulation: *mut f64,
    pub counter: *mut ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_noise__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ma_noise__bindgen_ty_1__bindgen_ty_1>() - 24usize];
    ["Alignment of ma_noise__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ma_noise__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: ma_noise__bindgen_ty_1__bindgen_ty_1::bin"]
        [::std::mem::offset_of!(ma_noise__bindgen_ty_1__bindgen_ty_1, bin) - 0usize];
    ["Offset of field: ma_noise__bindgen_ty_1__bindgen_ty_1::accumulation"]
        [::std::mem::offset_of!(ma_noise__bindgen_ty_1__bindgen_ty_1, accumulation) - 8usize];
    ["Offset of field: ma_noise__bindgen_ty_1__bindgen_ty_1::counter"]
        [::std::mem::offset_of!(ma_noise__bindgen_ty_1__bindgen_ty_1, counter) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_noise__bindgen_ty_1__bindgen_ty_2 {
    pub accumulation: *mut f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_noise__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<ma_noise__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Alignment of ma_noise__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<ma_noise__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: ma_noise__bindgen_ty_1__bindgen_ty_2::accumulation"]
        [::std::mem::offset_of!(ma_noise__bindgen_ty_1__bindgen_ty_2, accumulation) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_noise__bindgen_ty_1"][::std::mem::size_of::<ma_noise__bindgen_ty_1>() - 24usize];
    ["Alignment of ma_noise__bindgen_ty_1"]
        [::std::mem::align_of::<ma_noise__bindgen_ty_1>() - 8usize];
    ["Offset of field: ma_noise__bindgen_ty_1::pink"]
        [::std::mem::offset_of!(ma_noise__bindgen_ty_1, pink) - 0usize];
    ["Offset of field: ma_noise__bindgen_ty_1::brownian"]
        [::std::mem::offset_of!(ma_noise__bindgen_ty_1, brownian) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_noise"][::std::mem::size_of::<ma_noise>() - 152usize];
    ["Alignment of ma_noise"][::std::mem::align_of::<ma_noise>() - 8usize];
    ["Offset of field: ma_noise::ds"][::std::mem::offset_of!(ma_noise, ds) - 0usize];
    ["Offset of field: ma_noise::config"][::std::mem::offset_of!(ma_noise, config) - 72usize];
    ["Offset of field: ma_noise::lcg"][::std::mem::offset_of!(ma_noise, lcg) - 104usize];
    ["Offset of field: ma_noise::state"][::std::mem::offset_of!(ma_noise, state) - 112usize];
    ["Offset of field: ma_noise::_pHeap"][::std::mem::offset_of!(ma_noise, _pHeap) - 136usize];
    ["Offset of field: ma_noise::_ownsHeap"]
        [::std::mem::offset_of!(ma_noise, _ownsHeap) - 144usize];
};
unsafe extern "C" {
    pub fn ma_noise_get_heap_size(
        pConfig: *const ma_noise_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_noise_init_preallocated(
        pConfig: *const ma_noise_config,
        pHeap: *mut ::std::os::raw::c_void,
        pNoise: *mut ma_noise,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_noise_init(
        pConfig: *const ma_noise_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pNoise: *mut ma_noise,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_noise_uninit(
        pNoise: *mut ma_noise,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
unsafe extern "C" {
    pub fn ma_noise_read_pcm_frames(
        pNoise: *mut ma_noise,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        pFramesRead: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_noise_set_amplitude(pNoise: *mut ma_noise, amplitude: f64) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_noise_set_seed(pNoise: *mut ma_noise, seed: ma_int32) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_noise_set_type(pNoise: *mut ma_noise, type_: ma_noise_type) -> ma_result;
}
pub const ma_resource_manager_data_source_flags_MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_STREAM:
    ma_resource_manager_data_source_flags = 1;
pub const ma_resource_manager_data_source_flags_MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_DECODE:
    ma_resource_manager_data_source_flags = 2;
pub const ma_resource_manager_data_source_flags_MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_ASYNC:
    ma_resource_manager_data_source_flags = 4;
pub const ma_resource_manager_data_source_flags_MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_WAIT_INIT:
    ma_resource_manager_data_source_flags = 8;
pub const ma_resource_manager_data_source_flags_MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_UNKNOWN_LENGTH : ma_resource_manager_data_source_flags = 16 ;
pub const ma_resource_manager_data_source_flags_MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_LOOPING:
    ma_resource_manager_data_source_flags = 32;
pub type ma_resource_manager_data_source_flags = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_resource_manager_pipeline_stage_notification {
    pub pNotification: *mut ma_async_notification,
    pub pFence: *mut ma_fence,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_resource_manager_pipeline_stage_notification"]
        [::std::mem::size_of::<ma_resource_manager_pipeline_stage_notification>() - 16usize];
    ["Alignment of ma_resource_manager_pipeline_stage_notification"]
        [::std::mem::align_of::<ma_resource_manager_pipeline_stage_notification>() - 8usize];
    ["Offset of field: ma_resource_manager_pipeline_stage_notification::pNotification"][::std::mem::offset_of!(
        ma_resource_manager_pipeline_stage_notification,
        pNotification
    ) - 0usize];
    ["Offset of field: ma_resource_manager_pipeline_stage_notification::pFence"]
        [::std::mem::offset_of!(ma_resource_manager_pipeline_stage_notification, pFence) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_resource_manager_pipeline_notifications {
    pub init: ma_resource_manager_pipeline_stage_notification,
    pub done: ma_resource_manager_pipeline_stage_notification,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_resource_manager_pipeline_notifications"]
        [::std::mem::size_of::<ma_resource_manager_pipeline_notifications>() - 32usize];
    ["Alignment of ma_resource_manager_pipeline_notifications"]
        [::std::mem::align_of::<ma_resource_manager_pipeline_notifications>() - 8usize];
    ["Offset of field: ma_resource_manager_pipeline_notifications::init"]
        [::std::mem::offset_of!(ma_resource_manager_pipeline_notifications, init) - 0usize];
    ["Offset of field: ma_resource_manager_pipeline_notifications::done"]
        [::std::mem::offset_of!(ma_resource_manager_pipeline_notifications, done) - 16usize];
};
unsafe extern "C" {
    pub fn ma_resource_manager_pipeline_notifications_init(
    ) -> ma_resource_manager_pipeline_notifications;
}
pub const ma_resource_manager_flags_MA_RESOURCE_MANAGER_FLAG_NON_BLOCKING:
    ma_resource_manager_flags = 1;
pub const ma_resource_manager_flags_MA_RESOURCE_MANAGER_FLAG_NO_THREADING:
    ma_resource_manager_flags = 2;
pub type ma_resource_manager_flags = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_resource_manager_data_source_config {
    pub pFilePath: *const ::std::os::raw::c_char,
    pub pFilePathW: *const wchar_t,
    pub pNotifications: *const ma_resource_manager_pipeline_notifications,
    pub initialSeekPointInPCMFrames: ma_uint64,
    pub rangeBegInPCMFrames: ma_uint64,
    pub rangeEndInPCMFrames: ma_uint64,
    pub loopPointBegInPCMFrames: ma_uint64,
    pub loopPointEndInPCMFrames: ma_uint64,
    pub flags: ma_uint32,
    pub isLooping: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_resource_manager_data_source_config"]
        [::std::mem::size_of::<ma_resource_manager_data_source_config>() - 72usize];
    ["Alignment of ma_resource_manager_data_source_config"]
        [::std::mem::align_of::<ma_resource_manager_data_source_config>() - 8usize];
    ["Offset of field: ma_resource_manager_data_source_config::pFilePath"]
        [::std::mem::offset_of!(ma_resource_manager_data_source_config, pFilePath) - 0usize];
    ["Offset of field: ma_resource_manager_data_source_config::pFilePathW"]
        [::std::mem::offset_of!(ma_resource_manager_data_source_config, pFilePathW) - 8usize];
    ["Offset of field: ma_resource_manager_data_source_config::pNotifications"]
        [::std::mem::offset_of!(ma_resource_manager_data_source_config, pNotifications) - 16usize];
    ["Offset of field: ma_resource_manager_data_source_config::initialSeekPointInPCMFrames"][::std::mem::offset_of!(
        ma_resource_manager_data_source_config,
        initialSeekPointInPCMFrames
    )
        - 24usize];
    ["Offset of field: ma_resource_manager_data_source_config::rangeBegInPCMFrames"][::std::mem::offset_of!(
        ma_resource_manager_data_source_config,
        rangeBegInPCMFrames
    ) - 32usize];
    ["Offset of field: ma_resource_manager_data_source_config::rangeEndInPCMFrames"][::std::mem::offset_of!(
        ma_resource_manager_data_source_config,
        rangeEndInPCMFrames
    ) - 40usize];
    ["Offset of field: ma_resource_manager_data_source_config::loopPointBegInPCMFrames"][::std::mem::offset_of!(
        ma_resource_manager_data_source_config,
        loopPointBegInPCMFrames
    )
        - 48usize];
    ["Offset of field: ma_resource_manager_data_source_config::loopPointEndInPCMFrames"][::std::mem::offset_of!(
        ma_resource_manager_data_source_config,
        loopPointEndInPCMFrames
    )
        - 56usize];
    ["Offset of field: ma_resource_manager_data_source_config::flags"]
        [::std::mem::offset_of!(ma_resource_manager_data_source_config, flags) - 64usize];
    ["Offset of field: ma_resource_manager_data_source_config::isLooping"]
        [::std::mem::offset_of!(ma_resource_manager_data_source_config, isLooping) - 68usize];
};
unsafe extern "C" {
    pub fn ma_resource_manager_data_source_config_init() -> ma_resource_manager_data_source_config;
}
pub const ma_resource_manager_data_supply_type_ma_resource_manager_data_supply_type_unknown:
    ma_resource_manager_data_supply_type = 0;
pub const ma_resource_manager_data_supply_type_ma_resource_manager_data_supply_type_encoded:
    ma_resource_manager_data_supply_type = 1;
pub const ma_resource_manager_data_supply_type_ma_resource_manager_data_supply_type_decoded:
    ma_resource_manager_data_supply_type = 2;
pub const ma_resource_manager_data_supply_type_ma_resource_manager_data_supply_type_decoded_paged : ma_resource_manager_data_supply_type = 3 ;
pub type ma_resource_manager_data_supply_type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_resource_manager_data_supply {
    pub type_: ma_resource_manager_data_supply_type,
    pub backend: ma_resource_manager_data_supply__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_resource_manager_data_supply__bindgen_ty_1 {
    pub encoded: ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_1,
    pub decoded: ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2,
    pub decodedPaged: ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_1 {
    pub pData: *const ::std::os::raw::c_void,
    pub sizeInBytes: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_1,
    >() - 16usize];
    ["Alignment of ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_1::pData"][::std::mem::offset_of!(
        ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_1,
        pData
    )
        - 0usize];
    ["Offset of field: ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_1::sizeInBytes"][::std::mem::offset_of!(
        ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_1,
        sizeInBytes
    )
        - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2 {
    pub pData: *const ::std::os::raw::c_void,
    pub totalFrameCount: ma_uint64,
    pub decodedFrameCount: ma_uint64,
    pub format: ma_format,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2"][::std::mem::size_of::<
        ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2,
    >() - 40usize];
    ["Alignment of ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2>()
            - 8usize];
    ["Offset of field: ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2::pData"][::std::mem::offset_of!(
        ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2,
        pData
    )
        - 0usize];
    ["Offset of field: ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2::totalFrameCount"] [:: std :: mem :: offset_of ! (ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2 , totalFrameCount) - 8usize] ;
    ["Offset of field: ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2::decodedFrameCount"] [:: std :: mem :: offset_of ! (ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2 , decodedFrameCount) - 16usize] ;
    ["Offset of field: ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2::format"][::std::mem::offset_of!(
        ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2,
        format
    )
        - 24usize];
    ["Offset of field: ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2::channels"][::std::mem::offset_of!(
        ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2,
        channels
    )
        - 28usize];
    ["Offset of field: ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2::sampleRate"][::std::mem::offset_of!(
        ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_2,
        sampleRate
    )
        - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_3 {
    pub data: ma_paged_audio_buffer_data,
    pub decodedFrameCount: ma_uint64,
    pub sampleRate: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_3"][::std::mem::size_of::<
        ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_3,
    >() - 56usize];
    ["Alignment of ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_3>()
            - 8usize];
    ["Offset of field: ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_3::data"][::std::mem::offset_of!(
        ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_3,
        data
    )
        - 0usize];
    ["Offset of field: ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_3::decodedFrameCount"] [:: std :: mem :: offset_of ! (ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_3 , decodedFrameCount) - 40usize] ;
    ["Offset of field: ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_3::sampleRate"][::std::mem::offset_of!(
        ma_resource_manager_data_supply__bindgen_ty_1__bindgen_ty_3,
        sampleRate
    )
        - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_resource_manager_data_supply__bindgen_ty_1"]
        [::std::mem::size_of::<ma_resource_manager_data_supply__bindgen_ty_1>() - 56usize];
    ["Alignment of ma_resource_manager_data_supply__bindgen_ty_1"]
        [::std::mem::align_of::<ma_resource_manager_data_supply__bindgen_ty_1>() - 8usize];
    ["Offset of field: ma_resource_manager_data_supply__bindgen_ty_1::encoded"]
        [::std::mem::offset_of!(ma_resource_manager_data_supply__bindgen_ty_1, encoded) - 0usize];
    ["Offset of field: ma_resource_manager_data_supply__bindgen_ty_1::decoded"]
        [::std::mem::offset_of!(ma_resource_manager_data_supply__bindgen_ty_1, decoded) - 0usize];
    ["Offset of field: ma_resource_manager_data_supply__bindgen_ty_1::decodedPaged"][::std::mem::offset_of!(
        ma_resource_manager_data_supply__bindgen_ty_1,
        decodedPaged
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_resource_manager_data_supply"]
        [::std::mem::size_of::<ma_resource_manager_data_supply>() - 64usize];
    ["Alignment of ma_resource_manager_data_supply"]
        [::std::mem::align_of::<ma_resource_manager_data_supply>() - 8usize];
    ["Offset of field: ma_resource_manager_data_supply::type_"]
        [::std::mem::offset_of!(ma_resource_manager_data_supply, type_) - 0usize];
    ["Offset of field: ma_resource_manager_data_supply::backend"]
        [::std::mem::offset_of!(ma_resource_manager_data_supply, backend) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_resource_manager_data_buffer_node {
    pub hashedName32: ma_uint32,
    pub refCount: ma_uint32,
    pub result: ma_result,
    pub executionCounter: ma_uint32,
    pub executionPointer: ma_uint32,
    pub isDataOwnedByResourceManager: ma_bool32,
    pub data: ma_resource_manager_data_supply,
    pub pParent: *mut ma_resource_manager_data_buffer_node,
    pub pChildLo: *mut ma_resource_manager_data_buffer_node,
    pub pChildHi: *mut ma_resource_manager_data_buffer_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_resource_manager_data_buffer_node"]
        [::std::mem::size_of::<ma_resource_manager_data_buffer_node>() - 112usize];
    ["Alignment of ma_resource_manager_data_buffer_node"]
        [::std::mem::align_of::<ma_resource_manager_data_buffer_node>() - 8usize];
    ["Offset of field: ma_resource_manager_data_buffer_node::hashedName32"]
        [::std::mem::offset_of!(ma_resource_manager_data_buffer_node, hashedName32) - 0usize];
    ["Offset of field: ma_resource_manager_data_buffer_node::refCount"]
        [::std::mem::offset_of!(ma_resource_manager_data_buffer_node, refCount) - 4usize];
    ["Offset of field: ma_resource_manager_data_buffer_node::result"]
        [::std::mem::offset_of!(ma_resource_manager_data_buffer_node, result) - 8usize];
    ["Offset of field: ma_resource_manager_data_buffer_node::executionCounter"]
        [::std::mem::offset_of!(ma_resource_manager_data_buffer_node, executionCounter) - 12usize];
    ["Offset of field: ma_resource_manager_data_buffer_node::executionPointer"]
        [::std::mem::offset_of!(ma_resource_manager_data_buffer_node, executionPointer) - 16usize];
    ["Offset of field: ma_resource_manager_data_buffer_node::isDataOwnedByResourceManager"][::std::mem::offset_of!(
        ma_resource_manager_data_buffer_node,
        isDataOwnedByResourceManager
    )
        - 20usize];
    ["Offset of field: ma_resource_manager_data_buffer_node::data"]
        [::std::mem::offset_of!(ma_resource_manager_data_buffer_node, data) - 24usize];
    ["Offset of field: ma_resource_manager_data_buffer_node::pParent"]
        [::std::mem::offset_of!(ma_resource_manager_data_buffer_node, pParent) - 88usize];
    ["Offset of field: ma_resource_manager_data_buffer_node::pChildLo"]
        [::std::mem::offset_of!(ma_resource_manager_data_buffer_node, pChildLo) - 96usize];
    ["Offset of field: ma_resource_manager_data_buffer_node::pChildHi"]
        [::std::mem::offset_of!(ma_resource_manager_data_buffer_node, pChildHi) - 104usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_resource_manager_data_buffer {
    pub ds: ma_data_source_base,
    pub pResourceManager: *mut ma_resource_manager,
    pub pNode: *mut ma_resource_manager_data_buffer_node,
    pub flags: ma_uint32,
    pub executionCounter: ma_uint32,
    pub executionPointer: ma_uint32,
    pub seekTargetInPCMFrames: ma_uint64,
    pub seekToCursorOnNextRead: ma_bool32,
    pub result: ma_result,
    pub isLooping: ma_bool32,
    pub isConnectorInitialized: ma_atomic_bool32,
    pub connector: ma_resource_manager_data_buffer__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_resource_manager_data_buffer__bindgen_ty_1 {
    pub decoder: ma_decoder,
    pub buffer: ma_audio_buffer,
    pub pagedBuffer: ma_paged_audio_buffer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_resource_manager_data_buffer__bindgen_ty_1"]
        [::std::mem::size_of::<ma_resource_manager_data_buffer__bindgen_ty_1>() - 552usize];
    ["Alignment of ma_resource_manager_data_buffer__bindgen_ty_1"]
        [::std::mem::align_of::<ma_resource_manager_data_buffer__bindgen_ty_1>() - 8usize];
    ["Offset of field: ma_resource_manager_data_buffer__bindgen_ty_1::decoder"]
        [::std::mem::offset_of!(ma_resource_manager_data_buffer__bindgen_ty_1, decoder) - 0usize];
    ["Offset of field: ma_resource_manager_data_buffer__bindgen_ty_1::buffer"]
        [::std::mem::offset_of!(ma_resource_manager_data_buffer__bindgen_ty_1, buffer) - 0usize];
    ["Offset of field: ma_resource_manager_data_buffer__bindgen_ty_1::pagedBuffer"][::std::mem::offset_of!(
        ma_resource_manager_data_buffer__bindgen_ty_1,
        pagedBuffer
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_resource_manager_data_buffer"]
        [::std::mem::size_of::<ma_resource_manager_data_buffer>() - 680usize];
    ["Alignment of ma_resource_manager_data_buffer"]
        [::std::mem::align_of::<ma_resource_manager_data_buffer>() - 8usize];
    ["Offset of field: ma_resource_manager_data_buffer::ds"]
        [::std::mem::offset_of!(ma_resource_manager_data_buffer, ds) - 0usize];
    ["Offset of field: ma_resource_manager_data_buffer::pResourceManager"]
        [::std::mem::offset_of!(ma_resource_manager_data_buffer, pResourceManager) - 72usize];
    ["Offset of field: ma_resource_manager_data_buffer::pNode"]
        [::std::mem::offset_of!(ma_resource_manager_data_buffer, pNode) - 80usize];
    ["Offset of field: ma_resource_manager_data_buffer::flags"]
        [::std::mem::offset_of!(ma_resource_manager_data_buffer, flags) - 88usize];
    ["Offset of field: ma_resource_manager_data_buffer::executionCounter"]
        [::std::mem::offset_of!(ma_resource_manager_data_buffer, executionCounter) - 92usize];
    ["Offset of field: ma_resource_manager_data_buffer::executionPointer"]
        [::std::mem::offset_of!(ma_resource_manager_data_buffer, executionPointer) - 96usize];
    ["Offset of field: ma_resource_manager_data_buffer::seekTargetInPCMFrames"]
        [::std::mem::offset_of!(ma_resource_manager_data_buffer, seekTargetInPCMFrames) - 104usize];
    ["Offset of field: ma_resource_manager_data_buffer::seekToCursorOnNextRead"][::std::mem::offset_of!(
        ma_resource_manager_data_buffer,
        seekToCursorOnNextRead
    ) - 112usize];
    ["Offset of field: ma_resource_manager_data_buffer::result"]
        [::std::mem::offset_of!(ma_resource_manager_data_buffer, result) - 116usize];
    ["Offset of field: ma_resource_manager_data_buffer::isLooping"]
        [::std::mem::offset_of!(ma_resource_manager_data_buffer, isLooping) - 120usize];
    ["Offset of field: ma_resource_manager_data_buffer::isConnectorInitialized"][::std::mem::offset_of!(
        ma_resource_manager_data_buffer,
        isConnectorInitialized
    ) - 124usize];
    ["Offset of field: ma_resource_manager_data_buffer::connector"]
        [::std::mem::offset_of!(ma_resource_manager_data_buffer, connector) - 128usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_resource_manager_data_stream {
    pub ds: ma_data_source_base,
    pub pResourceManager: *mut ma_resource_manager,
    pub flags: ma_uint32,
    pub decoder: ma_decoder,
    pub isDecoderInitialized: ma_bool32,
    pub totalLengthInPCMFrames: ma_uint64,
    pub relativeCursor: ma_uint32,
    pub absoluteCursor: ma_uint64,
    pub currentPageIndex: ma_uint32,
    pub executionCounter: ma_uint32,
    pub executionPointer: ma_uint32,
    pub isLooping: ma_bool32,
    pub pPageData: *mut ::std::os::raw::c_void,
    pub pageFrameCount: [ma_uint32; 2usize],
    pub result: ma_result,
    pub isDecoderAtEnd: ma_bool32,
    pub isPageValid: [ma_bool32; 2usize],
    pub seekCounter: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_resource_manager_data_stream"]
        [::std::mem::size_of::<ma_resource_manager_data_stream>() - 728usize];
    ["Alignment of ma_resource_manager_data_stream"]
        [::std::mem::align_of::<ma_resource_manager_data_stream>() - 8usize];
    ["Offset of field: ma_resource_manager_data_stream::ds"]
        [::std::mem::offset_of!(ma_resource_manager_data_stream, ds) - 0usize];
    ["Offset of field: ma_resource_manager_data_stream::pResourceManager"]
        [::std::mem::offset_of!(ma_resource_manager_data_stream, pResourceManager) - 72usize];
    ["Offset of field: ma_resource_manager_data_stream::flags"]
        [::std::mem::offset_of!(ma_resource_manager_data_stream, flags) - 80usize];
    ["Offset of field: ma_resource_manager_data_stream::decoder"]
        [::std::mem::offset_of!(ma_resource_manager_data_stream, decoder) - 88usize];
    ["Offset of field: ma_resource_manager_data_stream::isDecoderInitialized"]
        [::std::mem::offset_of!(ma_resource_manager_data_stream, isDecoderInitialized) - 640usize];
    ["Offset of field: ma_resource_manager_data_stream::totalLengthInPCMFrames"][::std::mem::offset_of!(
        ma_resource_manager_data_stream,
        totalLengthInPCMFrames
    ) - 648usize];
    ["Offset of field: ma_resource_manager_data_stream::relativeCursor"]
        [::std::mem::offset_of!(ma_resource_manager_data_stream, relativeCursor) - 656usize];
    ["Offset of field: ma_resource_manager_data_stream::absoluteCursor"]
        [::std::mem::offset_of!(ma_resource_manager_data_stream, absoluteCursor) - 664usize];
    ["Offset of field: ma_resource_manager_data_stream::currentPageIndex"]
        [::std::mem::offset_of!(ma_resource_manager_data_stream, currentPageIndex) - 672usize];
    ["Offset of field: ma_resource_manager_data_stream::executionCounter"]
        [::std::mem::offset_of!(ma_resource_manager_data_stream, executionCounter) - 676usize];
    ["Offset of field: ma_resource_manager_data_stream::executionPointer"]
        [::std::mem::offset_of!(ma_resource_manager_data_stream, executionPointer) - 680usize];
    ["Offset of field: ma_resource_manager_data_stream::isLooping"]
        [::std::mem::offset_of!(ma_resource_manager_data_stream, isLooping) - 684usize];
    ["Offset of field: ma_resource_manager_data_stream::pPageData"]
        [::std::mem::offset_of!(ma_resource_manager_data_stream, pPageData) - 688usize];
    ["Offset of field: ma_resource_manager_data_stream::pageFrameCount"]
        [::std::mem::offset_of!(ma_resource_manager_data_stream, pageFrameCount) - 696usize];
    ["Offset of field: ma_resource_manager_data_stream::result"]
        [::std::mem::offset_of!(ma_resource_manager_data_stream, result) - 704usize];
    ["Offset of field: ma_resource_manager_data_stream::isDecoderAtEnd"]
        [::std::mem::offset_of!(ma_resource_manager_data_stream, isDecoderAtEnd) - 708usize];
    ["Offset of field: ma_resource_manager_data_stream::isPageValid"]
        [::std::mem::offset_of!(ma_resource_manager_data_stream, isPageValid) - 712usize];
    ["Offset of field: ma_resource_manager_data_stream::seekCounter"]
        [::std::mem::offset_of!(ma_resource_manager_data_stream, seekCounter) - 720usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_resource_manager_data_source {
    pub backend: ma_resource_manager_data_source__bindgen_ty_1,
    pub flags: ma_uint32,
    pub executionCounter: ma_uint32,
    pub executionPointer: ma_uint32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ma_resource_manager_data_source__bindgen_ty_1 {
    pub buffer: ma_resource_manager_data_buffer,
    pub stream: ma_resource_manager_data_stream,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_resource_manager_data_source__bindgen_ty_1"]
        [::std::mem::size_of::<ma_resource_manager_data_source__bindgen_ty_1>() - 728usize];
    ["Alignment of ma_resource_manager_data_source__bindgen_ty_1"]
        [::std::mem::align_of::<ma_resource_manager_data_source__bindgen_ty_1>() - 8usize];
    ["Offset of field: ma_resource_manager_data_source__bindgen_ty_1::buffer"]
        [::std::mem::offset_of!(ma_resource_manager_data_source__bindgen_ty_1, buffer) - 0usize];
    ["Offset of field: ma_resource_manager_data_source__bindgen_ty_1::stream"]
        [::std::mem::offset_of!(ma_resource_manager_data_source__bindgen_ty_1, stream) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_resource_manager_data_source"]
        [::std::mem::size_of::<ma_resource_manager_data_source>() - 744usize];
    ["Alignment of ma_resource_manager_data_source"]
        [::std::mem::align_of::<ma_resource_manager_data_source>() - 8usize];
    ["Offset of field: ma_resource_manager_data_source::backend"]
        [::std::mem::offset_of!(ma_resource_manager_data_source, backend) - 0usize];
    ["Offset of field: ma_resource_manager_data_source::flags"]
        [::std::mem::offset_of!(ma_resource_manager_data_source, flags) - 728usize];
    ["Offset of field: ma_resource_manager_data_source::executionCounter"]
        [::std::mem::offset_of!(ma_resource_manager_data_source, executionCounter) - 732usize];
    ["Offset of field: ma_resource_manager_data_source::executionPointer"]
        [::std::mem::offset_of!(ma_resource_manager_data_source, executionPointer) - 736usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_resource_manager_config {
    pub allocationCallbacks: ma_allocation_callbacks,
    pub pLog: *mut ma_log,
    pub decodedFormat: ma_format,
    pub decodedChannels: ma_uint32,
    pub decodedSampleRate: ma_uint32,
    pub jobThreadCount: ma_uint32,
    pub jobThreadStackSize: usize,
    pub jobQueueCapacity: ma_uint32,
    pub flags: ma_uint32,
    pub pVFS: *mut ma_vfs,
    pub ppCustomDecodingBackendVTables: *mut *mut ma_decoding_backend_vtable,
    pub customDecodingBackendCount: ma_uint32,
    pub pCustomDecodingBackendUserData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_resource_manager_config"]
        [::std::mem::size_of::<ma_resource_manager_config>() - 104usize];
    ["Alignment of ma_resource_manager_config"]
        [::std::mem::align_of::<ma_resource_manager_config>() - 8usize];
    ["Offset of field: ma_resource_manager_config::allocationCallbacks"]
        [::std::mem::offset_of!(ma_resource_manager_config, allocationCallbacks) - 0usize];
    ["Offset of field: ma_resource_manager_config::pLog"]
        [::std::mem::offset_of!(ma_resource_manager_config, pLog) - 32usize];
    ["Offset of field: ma_resource_manager_config::decodedFormat"]
        [::std::mem::offset_of!(ma_resource_manager_config, decodedFormat) - 40usize];
    ["Offset of field: ma_resource_manager_config::decodedChannels"]
        [::std::mem::offset_of!(ma_resource_manager_config, decodedChannels) - 44usize];
    ["Offset of field: ma_resource_manager_config::decodedSampleRate"]
        [::std::mem::offset_of!(ma_resource_manager_config, decodedSampleRate) - 48usize];
    ["Offset of field: ma_resource_manager_config::jobThreadCount"]
        [::std::mem::offset_of!(ma_resource_manager_config, jobThreadCount) - 52usize];
    ["Offset of field: ma_resource_manager_config::jobThreadStackSize"]
        [::std::mem::offset_of!(ma_resource_manager_config, jobThreadStackSize) - 56usize];
    ["Offset of field: ma_resource_manager_config::jobQueueCapacity"]
        [::std::mem::offset_of!(ma_resource_manager_config, jobQueueCapacity) - 64usize];
    ["Offset of field: ma_resource_manager_config::flags"]
        [::std::mem::offset_of!(ma_resource_manager_config, flags) - 68usize];
    ["Offset of field: ma_resource_manager_config::pVFS"]
        [::std::mem::offset_of!(ma_resource_manager_config, pVFS) - 72usize];
    ["Offset of field: ma_resource_manager_config::ppCustomDecodingBackendVTables"][::std::mem::offset_of!(
        ma_resource_manager_config,
        ppCustomDecodingBackendVTables
    ) - 80usize];
    ["Offset of field: ma_resource_manager_config::customDecodingBackendCount"]
        [::std::mem::offset_of!(ma_resource_manager_config, customDecodingBackendCount) - 88usize];
    ["Offset of field: ma_resource_manager_config::pCustomDecodingBackendUserData"][::std::mem::offset_of!(
        ma_resource_manager_config,
        pCustomDecodingBackendUserData
    ) - 96usize];
};
unsafe extern "C" {
    pub fn ma_resource_manager_config_init() -> ma_resource_manager_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_resource_manager {
    pub config: ma_resource_manager_config,
    pub pRootDataBufferNode: *mut ma_resource_manager_data_buffer_node,
    pub dataBufferBSTLock: ma_mutex,
    pub jobThreads: [ma_thread; 64usize],
    pub jobQueue: ma_job_queue,
    pub defaultVFS: ma_default_vfs,
    pub log: ma_log,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_resource_manager"][::std::mem::size_of::<ma_resource_manager>() - 944usize];
    ["Alignment of ma_resource_manager"][::std::mem::align_of::<ma_resource_manager>() - 8usize];
    ["Offset of field: ma_resource_manager::config"]
        [::std::mem::offset_of!(ma_resource_manager, config) - 0usize];
    ["Offset of field: ma_resource_manager::pRootDataBufferNode"]
        [::std::mem::offset_of!(ma_resource_manager, pRootDataBufferNode) - 104usize];
    ["Offset of field: ma_resource_manager::dataBufferBSTLock"]
        [::std::mem::offset_of!(ma_resource_manager, dataBufferBSTLock) - 112usize];
    ["Offset of field: ma_resource_manager::jobThreads"]
        [::std::mem::offset_of!(ma_resource_manager, jobThreads) - 120usize];
    ["Offset of field: ma_resource_manager::jobQueue"]
        [::std::mem::offset_of!(ma_resource_manager, jobQueue) - 632usize];
    ["Offset of field: ma_resource_manager::defaultVFS"]
        [::std::mem::offset_of!(ma_resource_manager, defaultVFS) - 736usize];
    ["Offset of field: ma_resource_manager::log"]
        [::std::mem::offset_of!(ma_resource_manager, log) - 832usize];
};
unsafe extern "C" {
    pub fn ma_resource_manager_init(
        pConfig: *const ma_resource_manager_config,
        pResourceManager: *mut ma_resource_manager,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_uninit(pResourceManager: *mut ma_resource_manager);
}
unsafe extern "C" {
    pub fn ma_resource_manager_get_log(pResourceManager: *mut ma_resource_manager) -> *mut ma_log;
}
unsafe extern "C" {
    pub fn ma_resource_manager_register_file(
        pResourceManager: *mut ma_resource_manager,
        pFilePath: *const ::std::os::raw::c_char,
        flags: ma_uint32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_register_file_w(
        pResourceManager: *mut ma_resource_manager,
        pFilePath: *const wchar_t,
        flags: ma_uint32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_register_decoded_data(
        pResourceManager: *mut ma_resource_manager,
        pName: *const ::std::os::raw::c_char,
        pData: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_register_decoded_data_w(
        pResourceManager: *mut ma_resource_manager,
        pName: *const wchar_t,
        pData: *const ::std::os::raw::c_void,
        frameCount: ma_uint64,
        format: ma_format,
        channels: ma_uint32,
        sampleRate: ma_uint32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_register_encoded_data(
        pResourceManager: *mut ma_resource_manager,
        pName: *const ::std::os::raw::c_char,
        pData: *const ::std::os::raw::c_void,
        sizeInBytes: usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_register_encoded_data_w(
        pResourceManager: *mut ma_resource_manager,
        pName: *const wchar_t,
        pData: *const ::std::os::raw::c_void,
        sizeInBytes: usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_unregister_file(
        pResourceManager: *mut ma_resource_manager,
        pFilePath: *const ::std::os::raw::c_char,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_unregister_file_w(
        pResourceManager: *mut ma_resource_manager,
        pFilePath: *const wchar_t,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_unregister_data(
        pResourceManager: *mut ma_resource_manager,
        pName: *const ::std::os::raw::c_char,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_unregister_data_w(
        pResourceManager: *mut ma_resource_manager,
        pName: *const wchar_t,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_buffer_init_ex(
        pResourceManager: *mut ma_resource_manager,
        pConfig: *const ma_resource_manager_data_source_config,
        pDataBuffer: *mut ma_resource_manager_data_buffer,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_buffer_init(
        pResourceManager: *mut ma_resource_manager,
        pFilePath: *const ::std::os::raw::c_char,
        flags: ma_uint32,
        pNotifications: *const ma_resource_manager_pipeline_notifications,
        pDataBuffer: *mut ma_resource_manager_data_buffer,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_buffer_init_w(
        pResourceManager: *mut ma_resource_manager,
        pFilePath: *const wchar_t,
        flags: ma_uint32,
        pNotifications: *const ma_resource_manager_pipeline_notifications,
        pDataBuffer: *mut ma_resource_manager_data_buffer,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_buffer_init_copy(
        pResourceManager: *mut ma_resource_manager,
        pExistingDataBuffer: *const ma_resource_manager_data_buffer,
        pDataBuffer: *mut ma_resource_manager_data_buffer,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_buffer_uninit(
        pDataBuffer: *mut ma_resource_manager_data_buffer,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_buffer_read_pcm_frames(
        pDataBuffer: *mut ma_resource_manager_data_buffer,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        pFramesRead: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_buffer_seek_to_pcm_frame(
        pDataBuffer: *mut ma_resource_manager_data_buffer,
        frameIndex: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_buffer_get_data_format(
        pDataBuffer: *mut ma_resource_manager_data_buffer,
        pFormat: *mut ma_format,
        pChannels: *mut ma_uint32,
        pSampleRate: *mut ma_uint32,
        pChannelMap: *mut ma_channel,
        channelMapCap: usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_buffer_get_cursor_in_pcm_frames(
        pDataBuffer: *mut ma_resource_manager_data_buffer,
        pCursor: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_buffer_get_length_in_pcm_frames(
        pDataBuffer: *mut ma_resource_manager_data_buffer,
        pLength: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_buffer_result(
        pDataBuffer: *const ma_resource_manager_data_buffer,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_buffer_set_looping(
        pDataBuffer: *mut ma_resource_manager_data_buffer,
        isLooping: ma_bool32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_buffer_is_looping(
        pDataBuffer: *const ma_resource_manager_data_buffer,
    ) -> ma_bool32;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_buffer_get_available_frames(
        pDataBuffer: *mut ma_resource_manager_data_buffer,
        pAvailableFrames: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_stream_init_ex(
        pResourceManager: *mut ma_resource_manager,
        pConfig: *const ma_resource_manager_data_source_config,
        pDataStream: *mut ma_resource_manager_data_stream,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_stream_init(
        pResourceManager: *mut ma_resource_manager,
        pFilePath: *const ::std::os::raw::c_char,
        flags: ma_uint32,
        pNotifications: *const ma_resource_manager_pipeline_notifications,
        pDataStream: *mut ma_resource_manager_data_stream,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_stream_init_w(
        pResourceManager: *mut ma_resource_manager,
        pFilePath: *const wchar_t,
        flags: ma_uint32,
        pNotifications: *const ma_resource_manager_pipeline_notifications,
        pDataStream: *mut ma_resource_manager_data_stream,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_stream_uninit(
        pDataStream: *mut ma_resource_manager_data_stream,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_stream_read_pcm_frames(
        pDataStream: *mut ma_resource_manager_data_stream,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        pFramesRead: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_stream_seek_to_pcm_frame(
        pDataStream: *mut ma_resource_manager_data_stream,
        frameIndex: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_stream_get_data_format(
        pDataStream: *mut ma_resource_manager_data_stream,
        pFormat: *mut ma_format,
        pChannels: *mut ma_uint32,
        pSampleRate: *mut ma_uint32,
        pChannelMap: *mut ma_channel,
        channelMapCap: usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_stream_get_cursor_in_pcm_frames(
        pDataStream: *mut ma_resource_manager_data_stream,
        pCursor: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_stream_get_length_in_pcm_frames(
        pDataStream: *mut ma_resource_manager_data_stream,
        pLength: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_stream_result(
        pDataStream: *const ma_resource_manager_data_stream,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_stream_set_looping(
        pDataStream: *mut ma_resource_manager_data_stream,
        isLooping: ma_bool32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_stream_is_looping(
        pDataStream: *const ma_resource_manager_data_stream,
    ) -> ma_bool32;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_stream_get_available_frames(
        pDataStream: *mut ma_resource_manager_data_stream,
        pAvailableFrames: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_source_init_ex(
        pResourceManager: *mut ma_resource_manager,
        pConfig: *const ma_resource_manager_data_source_config,
        pDataSource: *mut ma_resource_manager_data_source,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_source_init(
        pResourceManager: *mut ma_resource_manager,
        pName: *const ::std::os::raw::c_char,
        flags: ma_uint32,
        pNotifications: *const ma_resource_manager_pipeline_notifications,
        pDataSource: *mut ma_resource_manager_data_source,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_source_init_w(
        pResourceManager: *mut ma_resource_manager,
        pName: *const wchar_t,
        flags: ma_uint32,
        pNotifications: *const ma_resource_manager_pipeline_notifications,
        pDataSource: *mut ma_resource_manager_data_source,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_source_init_copy(
        pResourceManager: *mut ma_resource_manager,
        pExistingDataSource: *const ma_resource_manager_data_source,
        pDataSource: *mut ma_resource_manager_data_source,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_source_uninit(
        pDataSource: *mut ma_resource_manager_data_source,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_source_read_pcm_frames(
        pDataSource: *mut ma_resource_manager_data_source,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        pFramesRead: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_source_seek_to_pcm_frame(
        pDataSource: *mut ma_resource_manager_data_source,
        frameIndex: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_source_get_data_format(
        pDataSource: *mut ma_resource_manager_data_source,
        pFormat: *mut ma_format,
        pChannels: *mut ma_uint32,
        pSampleRate: *mut ma_uint32,
        pChannelMap: *mut ma_channel,
        channelMapCap: usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_source_get_cursor_in_pcm_frames(
        pDataSource: *mut ma_resource_manager_data_source,
        pCursor: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_source_get_length_in_pcm_frames(
        pDataSource: *mut ma_resource_manager_data_source,
        pLength: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_source_result(
        pDataSource: *const ma_resource_manager_data_source,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_source_set_looping(
        pDataSource: *mut ma_resource_manager_data_source,
        isLooping: ma_bool32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_source_is_looping(
        pDataSource: *const ma_resource_manager_data_source,
    ) -> ma_bool32;
}
unsafe extern "C" {
    pub fn ma_resource_manager_data_source_get_available_frames(
        pDataSource: *mut ma_resource_manager_data_source,
        pAvailableFrames: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_post_job(
        pResourceManager: *mut ma_resource_manager,
        pJob: *const ma_job,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_post_job_quit(
        pResourceManager: *mut ma_resource_manager,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_next_job(
        pResourceManager: *mut ma_resource_manager,
        pJob: *mut ma_job,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_process_job(
        pResourceManager: *mut ma_resource_manager,
        pJob: *mut ma_job,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_resource_manager_process_next_job(
        pResourceManager: *mut ma_resource_manager,
    ) -> ma_result;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_stack {
    pub offset: usize,
    pub sizeInBytes: usize,
    pub _data: [::std::os::raw::c_uchar; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_stack"][::std::mem::size_of::<ma_stack>() - 24usize];
    ["Alignment of ma_stack"][::std::mem::align_of::<ma_stack>() - 8usize];
    ["Offset of field: ma_stack::offset"][::std::mem::offset_of!(ma_stack, offset) - 0usize];
    ["Offset of field: ma_stack::sizeInBytes"]
        [::std::mem::offset_of!(ma_stack, sizeInBytes) - 8usize];
    ["Offset of field: ma_stack::_data"][::std::mem::offset_of!(ma_stack, _data) - 16usize];
};
pub type ma_node = ::std::os::raw::c_void;
pub const ma_node_flags_MA_NODE_FLAG_PASSTHROUGH: ma_node_flags = 1;
pub const ma_node_flags_MA_NODE_FLAG_CONTINUOUS_PROCESSING: ma_node_flags = 2;
pub const ma_node_flags_MA_NODE_FLAG_ALLOW_NULL_INPUT: ma_node_flags = 4;
pub const ma_node_flags_MA_NODE_FLAG_DIFFERENT_PROCESSING_RATES: ma_node_flags = 8;
pub const ma_node_flags_MA_NODE_FLAG_SILENT_OUTPUT: ma_node_flags = 16;
pub type ma_node_flags = ::std::os::raw::c_int;
pub const ma_node_state_ma_node_state_started: ma_node_state = 0;
pub const ma_node_state_ma_node_state_stopped: ma_node_state = 1;
pub type ma_node_state = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_node_vtable {
    pub onProcess: ::std::option::Option<
        unsafe extern "C" fn(
            pNode: *mut ma_node,
            ppFramesIn: *mut *const f32,
            pFrameCountIn: *mut ma_uint32,
            ppFramesOut: *mut *mut f32,
            pFrameCountOut: *mut ma_uint32,
        ),
    >,
    pub onGetRequiredInputFrameCount: ::std::option::Option<
        unsafe extern "C" fn(
            pNode: *mut ma_node,
            outputFrameCount: ma_uint32,
            pInputFrameCount: *mut ma_uint32,
        ) -> ma_result,
    >,
    pub inputBusCount: ma_uint8,
    pub outputBusCount: ma_uint8,
    pub flags: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_node_vtable"][::std::mem::size_of::<ma_node_vtable>() - 24usize];
    ["Alignment of ma_node_vtable"][::std::mem::align_of::<ma_node_vtable>() - 8usize];
    ["Offset of field: ma_node_vtable::onProcess"]
        [::std::mem::offset_of!(ma_node_vtable, onProcess) - 0usize];
    ["Offset of field: ma_node_vtable::onGetRequiredInputFrameCount"]
        [::std::mem::offset_of!(ma_node_vtable, onGetRequiredInputFrameCount) - 8usize];
    ["Offset of field: ma_node_vtable::inputBusCount"]
        [::std::mem::offset_of!(ma_node_vtable, inputBusCount) - 16usize];
    ["Offset of field: ma_node_vtable::outputBusCount"]
        [::std::mem::offset_of!(ma_node_vtable, outputBusCount) - 17usize];
    ["Offset of field: ma_node_vtable::flags"]
        [::std::mem::offset_of!(ma_node_vtable, flags) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_node_config {
    pub vtable: *const ma_node_vtable,
    pub initialState: ma_node_state,
    pub inputBusCount: ma_uint32,
    pub outputBusCount: ma_uint32,
    pub pInputChannels: *const ma_uint32,
    pub pOutputChannels: *const ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_node_config"][::std::mem::size_of::<ma_node_config>() - 40usize];
    ["Alignment of ma_node_config"][::std::mem::align_of::<ma_node_config>() - 8usize];
    ["Offset of field: ma_node_config::vtable"]
        [::std::mem::offset_of!(ma_node_config, vtable) - 0usize];
    ["Offset of field: ma_node_config::initialState"]
        [::std::mem::offset_of!(ma_node_config, initialState) - 8usize];
    ["Offset of field: ma_node_config::inputBusCount"]
        [::std::mem::offset_of!(ma_node_config, inputBusCount) - 12usize];
    ["Offset of field: ma_node_config::outputBusCount"]
        [::std::mem::offset_of!(ma_node_config, outputBusCount) - 16usize];
    ["Offset of field: ma_node_config::pInputChannels"]
        [::std::mem::offset_of!(ma_node_config, pInputChannels) - 24usize];
    ["Offset of field: ma_node_config::pOutputChannels"]
        [::std::mem::offset_of!(ma_node_config, pOutputChannels) - 32usize];
};
unsafe extern "C" {
    pub fn ma_node_config_init() -> ma_node_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_node_output_bus {
    pub pNode: *mut ma_node,
    pub outputBusIndex: ma_uint8,
    pub channels: ma_uint8,
    pub inputNodeInputBusIndex: ma_uint8,
    pub flags: ma_uint32,
    pub refCount: ma_uint32,
    pub isAttached: ma_bool32,
    pub lock: ma_spinlock,
    pub volume: f32,
    pub pNext: *mut ma_node_output_bus,
    pub pPrev: *mut ma_node_output_bus,
    pub pInputNode: *mut ma_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_node_output_bus"][::std::mem::size_of::<ma_node_output_bus>() - 56usize];
    ["Alignment of ma_node_output_bus"][::std::mem::align_of::<ma_node_output_bus>() - 8usize];
    ["Offset of field: ma_node_output_bus::pNode"]
        [::std::mem::offset_of!(ma_node_output_bus, pNode) - 0usize];
    ["Offset of field: ma_node_output_bus::outputBusIndex"]
        [::std::mem::offset_of!(ma_node_output_bus, outputBusIndex) - 8usize];
    ["Offset of field: ma_node_output_bus::channels"]
        [::std::mem::offset_of!(ma_node_output_bus, channels) - 9usize];
    ["Offset of field: ma_node_output_bus::inputNodeInputBusIndex"]
        [::std::mem::offset_of!(ma_node_output_bus, inputNodeInputBusIndex) - 10usize];
    ["Offset of field: ma_node_output_bus::flags"]
        [::std::mem::offset_of!(ma_node_output_bus, flags) - 12usize];
    ["Offset of field: ma_node_output_bus::refCount"]
        [::std::mem::offset_of!(ma_node_output_bus, refCount) - 16usize];
    ["Offset of field: ma_node_output_bus::isAttached"]
        [::std::mem::offset_of!(ma_node_output_bus, isAttached) - 20usize];
    ["Offset of field: ma_node_output_bus::lock"]
        [::std::mem::offset_of!(ma_node_output_bus, lock) - 24usize];
    ["Offset of field: ma_node_output_bus::volume"]
        [::std::mem::offset_of!(ma_node_output_bus, volume) - 28usize];
    ["Offset of field: ma_node_output_bus::pNext"]
        [::std::mem::offset_of!(ma_node_output_bus, pNext) - 32usize];
    ["Offset of field: ma_node_output_bus::pPrev"]
        [::std::mem::offset_of!(ma_node_output_bus, pPrev) - 40usize];
    ["Offset of field: ma_node_output_bus::pInputNode"]
        [::std::mem::offset_of!(ma_node_output_bus, pInputNode) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_node_input_bus {
    pub head: ma_node_output_bus,
    pub nextCounter: ma_uint32,
    pub lock: ma_spinlock,
    pub channels: ma_uint8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_node_input_bus"][::std::mem::size_of::<ma_node_input_bus>() - 72usize];
    ["Alignment of ma_node_input_bus"][::std::mem::align_of::<ma_node_input_bus>() - 8usize];
    ["Offset of field: ma_node_input_bus::head"]
        [::std::mem::offset_of!(ma_node_input_bus, head) - 0usize];
    ["Offset of field: ma_node_input_bus::nextCounter"]
        [::std::mem::offset_of!(ma_node_input_bus, nextCounter) - 56usize];
    ["Offset of field: ma_node_input_bus::lock"]
        [::std::mem::offset_of!(ma_node_input_bus, lock) - 60usize];
    ["Offset of field: ma_node_input_bus::channels"]
        [::std::mem::offset_of!(ma_node_input_bus, channels) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_node_base {
    pub pNodeGraph: *mut ma_node_graph,
    pub vtable: *const ma_node_vtable,
    pub inputBusCount: ma_uint32,
    pub outputBusCount: ma_uint32,
    pub pInputBuses: *mut ma_node_input_bus,
    pub pOutputBuses: *mut ma_node_output_bus,
    pub pCachedData: *mut f32,
    pub cachedDataCapInFramesPerBus: ma_uint16,
    pub cachedFrameCountOut: ma_uint16,
    pub cachedFrameCountIn: ma_uint16,
    pub consumedFrameCountIn: ma_uint16,
    pub state: ma_node_state,
    pub stateTimes: [ma_uint64; 2usize],
    pub localTime: ma_uint64,
    pub _inputBuses: [ma_node_input_bus; 2usize],
    pub _outputBuses: [ma_node_output_bus; 2usize],
    pub _pHeap: *mut ::std::os::raw::c_void,
    pub _ownsHeap: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_node_base"][::std::mem::size_of::<ma_node_base>() - 360usize];
    ["Alignment of ma_node_base"][::std::mem::align_of::<ma_node_base>() - 8usize];
    ["Offset of field: ma_node_base::pNodeGraph"]
        [::std::mem::offset_of!(ma_node_base, pNodeGraph) - 0usize];
    ["Offset of field: ma_node_base::vtable"]
        [::std::mem::offset_of!(ma_node_base, vtable) - 8usize];
    ["Offset of field: ma_node_base::inputBusCount"]
        [::std::mem::offset_of!(ma_node_base, inputBusCount) - 16usize];
    ["Offset of field: ma_node_base::outputBusCount"]
        [::std::mem::offset_of!(ma_node_base, outputBusCount) - 20usize];
    ["Offset of field: ma_node_base::pInputBuses"]
        [::std::mem::offset_of!(ma_node_base, pInputBuses) - 24usize];
    ["Offset of field: ma_node_base::pOutputBuses"]
        [::std::mem::offset_of!(ma_node_base, pOutputBuses) - 32usize];
    ["Offset of field: ma_node_base::pCachedData"]
        [::std::mem::offset_of!(ma_node_base, pCachedData) - 40usize];
    ["Offset of field: ma_node_base::cachedDataCapInFramesPerBus"]
        [::std::mem::offset_of!(ma_node_base, cachedDataCapInFramesPerBus) - 48usize];
    ["Offset of field: ma_node_base::cachedFrameCountOut"]
        [::std::mem::offset_of!(ma_node_base, cachedFrameCountOut) - 50usize];
    ["Offset of field: ma_node_base::cachedFrameCountIn"]
        [::std::mem::offset_of!(ma_node_base, cachedFrameCountIn) - 52usize];
    ["Offset of field: ma_node_base::consumedFrameCountIn"]
        [::std::mem::offset_of!(ma_node_base, consumedFrameCountIn) - 54usize];
    ["Offset of field: ma_node_base::state"][::std::mem::offset_of!(ma_node_base, state) - 56usize];
    ["Offset of field: ma_node_base::stateTimes"]
        [::std::mem::offset_of!(ma_node_base, stateTimes) - 64usize];
    ["Offset of field: ma_node_base::localTime"]
        [::std::mem::offset_of!(ma_node_base, localTime) - 80usize];
    ["Offset of field: ma_node_base::_inputBuses"]
        [::std::mem::offset_of!(ma_node_base, _inputBuses) - 88usize];
    ["Offset of field: ma_node_base::_outputBuses"]
        [::std::mem::offset_of!(ma_node_base, _outputBuses) - 232usize];
    ["Offset of field: ma_node_base::_pHeap"]
        [::std::mem::offset_of!(ma_node_base, _pHeap) - 344usize];
    ["Offset of field: ma_node_base::_ownsHeap"]
        [::std::mem::offset_of!(ma_node_base, _ownsHeap) - 352usize];
};
unsafe extern "C" {
    pub fn ma_node_get_heap_size(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_node_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_node_init_preallocated(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_node_config,
        pHeap: *mut ::std::os::raw::c_void,
        pNode: *mut ma_node,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_node_init(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_node_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pNode: *mut ma_node,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_node_uninit(
        pNode: *mut ma_node,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
unsafe extern "C" {
    pub fn ma_node_get_node_graph(pNode: *const ma_node) -> *mut ma_node_graph;
}
unsafe extern "C" {
    pub fn ma_node_get_input_bus_count(pNode: *const ma_node) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_node_get_output_bus_count(pNode: *const ma_node) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_node_get_input_channels(pNode: *const ma_node, inputBusIndex: ma_uint32)
        -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_node_get_output_channels(
        pNode: *const ma_node,
        outputBusIndex: ma_uint32,
    ) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_node_attach_output_bus(
        pNode: *mut ma_node,
        outputBusIndex: ma_uint32,
        pOtherNode: *mut ma_node,
        otherNodeInputBusIndex: ma_uint32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_node_detach_output_bus(pNode: *mut ma_node, outputBusIndex: ma_uint32) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_node_detach_all_output_buses(pNode: *mut ma_node) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_node_set_output_bus_volume(
        pNode: *mut ma_node,
        outputBusIndex: ma_uint32,
        volume: f32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_node_get_output_bus_volume(pNode: *const ma_node, outputBusIndex: ma_uint32) -> f32;
}
unsafe extern "C" {
    pub fn ma_node_set_state(pNode: *mut ma_node, state: ma_node_state) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_node_get_state(pNode: *const ma_node) -> ma_node_state;
}
unsafe extern "C" {
    pub fn ma_node_set_state_time(
        pNode: *mut ma_node,
        state: ma_node_state,
        globalTime: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_node_get_state_time(pNode: *const ma_node, state: ma_node_state) -> ma_uint64;
}
unsafe extern "C" {
    pub fn ma_node_get_state_by_time(pNode: *const ma_node, globalTime: ma_uint64)
        -> ma_node_state;
}
unsafe extern "C" {
    pub fn ma_node_get_state_by_time_range(
        pNode: *const ma_node,
        globalTimeBeg: ma_uint64,
        globalTimeEnd: ma_uint64,
    ) -> ma_node_state;
}
unsafe extern "C" {
    pub fn ma_node_get_time(pNode: *const ma_node) -> ma_uint64;
}
unsafe extern "C" {
    pub fn ma_node_set_time(pNode: *mut ma_node, localTime: ma_uint64) -> ma_result;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_node_graph_config {
    pub channels: ma_uint32,
    pub processingSizeInFrames: ma_uint32,
    pub preMixStackSizeInBytes: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_node_graph_config"][::std::mem::size_of::<ma_node_graph_config>() - 16usize];
    ["Alignment of ma_node_graph_config"][::std::mem::align_of::<ma_node_graph_config>() - 8usize];
    ["Offset of field: ma_node_graph_config::channels"]
        [::std::mem::offset_of!(ma_node_graph_config, channels) - 0usize];
    ["Offset of field: ma_node_graph_config::processingSizeInFrames"]
        [::std::mem::offset_of!(ma_node_graph_config, processingSizeInFrames) - 4usize];
    ["Offset of field: ma_node_graph_config::preMixStackSizeInBytes"]
        [::std::mem::offset_of!(ma_node_graph_config, preMixStackSizeInBytes) - 8usize];
};
unsafe extern "C" {
    pub fn ma_node_graph_config_init(channels: ma_uint32) -> ma_node_graph_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_node_graph {
    pub base: ma_node_base,
    pub endpoint: ma_node_base,
    pub pProcessingCache: *mut f32,
    pub processingCacheFramesRemaining: ma_uint32,
    pub processingSizeInFrames: ma_uint32,
    pub isReading: ma_bool32,
    pub pPreMixStack: *mut ma_stack,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_node_graph"][::std::mem::size_of::<ma_node_graph>() - 752usize];
    ["Alignment of ma_node_graph"][::std::mem::align_of::<ma_node_graph>() - 8usize];
    ["Offset of field: ma_node_graph::base"][::std::mem::offset_of!(ma_node_graph, base) - 0usize];
    ["Offset of field: ma_node_graph::endpoint"]
        [::std::mem::offset_of!(ma_node_graph, endpoint) - 360usize];
    ["Offset of field: ma_node_graph::pProcessingCache"]
        [::std::mem::offset_of!(ma_node_graph, pProcessingCache) - 720usize];
    ["Offset of field: ma_node_graph::processingCacheFramesRemaining"]
        [::std::mem::offset_of!(ma_node_graph, processingCacheFramesRemaining) - 728usize];
    ["Offset of field: ma_node_graph::processingSizeInFrames"]
        [::std::mem::offset_of!(ma_node_graph, processingSizeInFrames) - 732usize];
    ["Offset of field: ma_node_graph::isReading"]
        [::std::mem::offset_of!(ma_node_graph, isReading) - 736usize];
    ["Offset of field: ma_node_graph::pPreMixStack"]
        [::std::mem::offset_of!(ma_node_graph, pPreMixStack) - 744usize];
};
unsafe extern "C" {
    pub fn ma_node_graph_init(
        pConfig: *const ma_node_graph_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pNodeGraph: *mut ma_node_graph,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_node_graph_uninit(
        pNodeGraph: *mut ma_node_graph,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
unsafe extern "C" {
    pub fn ma_node_graph_get_endpoint(pNodeGraph: *mut ma_node_graph) -> *mut ma_node;
}
unsafe extern "C" {
    pub fn ma_node_graph_read_pcm_frames(
        pNodeGraph: *mut ma_node_graph,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        pFramesRead: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_node_graph_get_channels(pNodeGraph: *const ma_node_graph) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_node_graph_get_time(pNodeGraph: *const ma_node_graph) -> ma_uint64;
}
unsafe extern "C" {
    pub fn ma_node_graph_set_time(
        pNodeGraph: *mut ma_node_graph,
        globalTime: ma_uint64,
    ) -> ma_result;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_data_source_node_config {
    pub nodeConfig: ma_node_config,
    pub pDataSource: *mut ma_data_source,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_data_source_node_config"]
        [::std::mem::size_of::<ma_data_source_node_config>() - 48usize];
    ["Alignment of ma_data_source_node_config"]
        [::std::mem::align_of::<ma_data_source_node_config>() - 8usize];
    ["Offset of field: ma_data_source_node_config::nodeConfig"]
        [::std::mem::offset_of!(ma_data_source_node_config, nodeConfig) - 0usize];
    ["Offset of field: ma_data_source_node_config::pDataSource"]
        [::std::mem::offset_of!(ma_data_source_node_config, pDataSource) - 40usize];
};
unsafe extern "C" {
    pub fn ma_data_source_node_config_init(
        pDataSource: *mut ma_data_source,
    ) -> ma_data_source_node_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_data_source_node {
    pub base: ma_node_base,
    pub pDataSource: *mut ma_data_source,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_data_source_node"][::std::mem::size_of::<ma_data_source_node>() - 368usize];
    ["Alignment of ma_data_source_node"][::std::mem::align_of::<ma_data_source_node>() - 8usize];
    ["Offset of field: ma_data_source_node::base"]
        [::std::mem::offset_of!(ma_data_source_node, base) - 0usize];
    ["Offset of field: ma_data_source_node::pDataSource"]
        [::std::mem::offset_of!(ma_data_source_node, pDataSource) - 360usize];
};
unsafe extern "C" {
    pub fn ma_data_source_node_init(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_data_source_node_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pDataSourceNode: *mut ma_data_source_node,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_source_node_uninit(
        pDataSourceNode: *mut ma_data_source_node,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
unsafe extern "C" {
    pub fn ma_data_source_node_set_looping(
        pDataSourceNode: *mut ma_data_source_node,
        isLooping: ma_bool32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_data_source_node_is_looping(pDataSourceNode: *mut ma_data_source_node) -> ma_bool32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_splitter_node_config {
    pub nodeConfig: ma_node_config,
    pub channels: ma_uint32,
    pub outputBusCount: ma_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_splitter_node_config"][::std::mem::size_of::<ma_splitter_node_config>() - 48usize];
    ["Alignment of ma_splitter_node_config"]
        [::std::mem::align_of::<ma_splitter_node_config>() - 8usize];
    ["Offset of field: ma_splitter_node_config::nodeConfig"]
        [::std::mem::offset_of!(ma_splitter_node_config, nodeConfig) - 0usize];
    ["Offset of field: ma_splitter_node_config::channels"]
        [::std::mem::offset_of!(ma_splitter_node_config, channels) - 40usize];
    ["Offset of field: ma_splitter_node_config::outputBusCount"]
        [::std::mem::offset_of!(ma_splitter_node_config, outputBusCount) - 44usize];
};
unsafe extern "C" {
    pub fn ma_splitter_node_config_init(channels: ma_uint32) -> ma_splitter_node_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_splitter_node {
    pub base: ma_node_base,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_splitter_node"][::std::mem::size_of::<ma_splitter_node>() - 360usize];
    ["Alignment of ma_splitter_node"][::std::mem::align_of::<ma_splitter_node>() - 8usize];
    ["Offset of field: ma_splitter_node::base"]
        [::std::mem::offset_of!(ma_splitter_node, base) - 0usize];
};
unsafe extern "C" {
    pub fn ma_splitter_node_init(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_splitter_node_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pSplitterNode: *mut ma_splitter_node,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_splitter_node_uninit(
        pSplitterNode: *mut ma_splitter_node,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_biquad_node_config {
    pub nodeConfig: ma_node_config,
    pub biquad: ma_biquad_config,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_biquad_node_config"][::std::mem::size_of::<ma_biquad_node_config>() - 96usize];
    ["Alignment of ma_biquad_node_config"]
        [::std::mem::align_of::<ma_biquad_node_config>() - 8usize];
    ["Offset of field: ma_biquad_node_config::nodeConfig"]
        [::std::mem::offset_of!(ma_biquad_node_config, nodeConfig) - 0usize];
    ["Offset of field: ma_biquad_node_config::biquad"]
        [::std::mem::offset_of!(ma_biquad_node_config, biquad) - 40usize];
};
unsafe extern "C" {
    pub fn ma_biquad_node_config_init(
        channels: ma_uint32,
        b0: f32,
        b1: f32,
        b2: f32,
        a0: f32,
        a1: f32,
        a2: f32,
    ) -> ma_biquad_node_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_biquad_node {
    pub baseNode: ma_node_base,
    pub biquad: ma_biquad,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_biquad_node"][::std::mem::size_of::<ma_biquad_node>() - 424usize];
    ["Alignment of ma_biquad_node"][::std::mem::align_of::<ma_biquad_node>() - 8usize];
    ["Offset of field: ma_biquad_node::baseNode"]
        [::std::mem::offset_of!(ma_biquad_node, baseNode) - 0usize];
    ["Offset of field: ma_biquad_node::biquad"]
        [::std::mem::offset_of!(ma_biquad_node, biquad) - 360usize];
};
unsafe extern "C" {
    pub fn ma_biquad_node_init(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_biquad_node_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pNode: *mut ma_biquad_node,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_biquad_node_reinit(
        pConfig: *const ma_biquad_config,
        pNode: *mut ma_biquad_node,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_biquad_node_uninit(
        pNode: *mut ma_biquad_node,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_lpf_node_config {
    pub nodeConfig: ma_node_config,
    pub lpf: ma_lpf_config,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_lpf_node_config"][::std::mem::size_of::<ma_lpf_node_config>() - 72usize];
    ["Alignment of ma_lpf_node_config"][::std::mem::align_of::<ma_lpf_node_config>() - 8usize];
    ["Offset of field: ma_lpf_node_config::nodeConfig"]
        [::std::mem::offset_of!(ma_lpf_node_config, nodeConfig) - 0usize];
    ["Offset of field: ma_lpf_node_config::lpf"]
        [::std::mem::offset_of!(ma_lpf_node_config, lpf) - 40usize];
};
unsafe extern "C" {
    pub fn ma_lpf_node_config_init(
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
        order: ma_uint32,
    ) -> ma_lpf_node_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_lpf_node {
    pub baseNode: ma_node_base,
    pub lpf: ma_lpf,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_lpf_node"][::std::mem::size_of::<ma_lpf_node>() - 416usize];
    ["Alignment of ma_lpf_node"][::std::mem::align_of::<ma_lpf_node>() - 8usize];
    ["Offset of field: ma_lpf_node::baseNode"]
        [::std::mem::offset_of!(ma_lpf_node, baseNode) - 0usize];
    ["Offset of field: ma_lpf_node::lpf"][::std::mem::offset_of!(ma_lpf_node, lpf) - 360usize];
};
unsafe extern "C" {
    pub fn ma_lpf_node_init(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_lpf_node_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pNode: *mut ma_lpf_node,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_lpf_node_reinit(pConfig: *const ma_lpf_config, pNode: *mut ma_lpf_node) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_lpf_node_uninit(
        pNode: *mut ma_lpf_node,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_hpf_node_config {
    pub nodeConfig: ma_node_config,
    pub hpf: ma_hpf_config,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_hpf_node_config"][::std::mem::size_of::<ma_hpf_node_config>() - 72usize];
    ["Alignment of ma_hpf_node_config"][::std::mem::align_of::<ma_hpf_node_config>() - 8usize];
    ["Offset of field: ma_hpf_node_config::nodeConfig"]
        [::std::mem::offset_of!(ma_hpf_node_config, nodeConfig) - 0usize];
    ["Offset of field: ma_hpf_node_config::hpf"]
        [::std::mem::offset_of!(ma_hpf_node_config, hpf) - 40usize];
};
unsafe extern "C" {
    pub fn ma_hpf_node_config_init(
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
        order: ma_uint32,
    ) -> ma_hpf_node_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_hpf_node {
    pub baseNode: ma_node_base,
    pub hpf: ma_hpf,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_hpf_node"][::std::mem::size_of::<ma_hpf_node>() - 416usize];
    ["Alignment of ma_hpf_node"][::std::mem::align_of::<ma_hpf_node>() - 8usize];
    ["Offset of field: ma_hpf_node::baseNode"]
        [::std::mem::offset_of!(ma_hpf_node, baseNode) - 0usize];
    ["Offset of field: ma_hpf_node::hpf"][::std::mem::offset_of!(ma_hpf_node, hpf) - 360usize];
};
unsafe extern "C" {
    pub fn ma_hpf_node_init(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_hpf_node_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pNode: *mut ma_hpf_node,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_hpf_node_reinit(pConfig: *const ma_hpf_config, pNode: *mut ma_hpf_node) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_hpf_node_uninit(
        pNode: *mut ma_hpf_node,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_bpf_node_config {
    pub nodeConfig: ma_node_config,
    pub bpf: ma_bpf_config,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_bpf_node_config"][::std::mem::size_of::<ma_bpf_node_config>() - 72usize];
    ["Alignment of ma_bpf_node_config"][::std::mem::align_of::<ma_bpf_node_config>() - 8usize];
    ["Offset of field: ma_bpf_node_config::nodeConfig"]
        [::std::mem::offset_of!(ma_bpf_node_config, nodeConfig) - 0usize];
    ["Offset of field: ma_bpf_node_config::bpf"]
        [::std::mem::offset_of!(ma_bpf_node_config, bpf) - 40usize];
};
unsafe extern "C" {
    pub fn ma_bpf_node_config_init(
        channels: ma_uint32,
        sampleRate: ma_uint32,
        cutoffFrequency: f64,
        order: ma_uint32,
    ) -> ma_bpf_node_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_bpf_node {
    pub baseNode: ma_node_base,
    pub bpf: ma_bpf,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_bpf_node"][::std::mem::size_of::<ma_bpf_node>() - 400usize];
    ["Alignment of ma_bpf_node"][::std::mem::align_of::<ma_bpf_node>() - 8usize];
    ["Offset of field: ma_bpf_node::baseNode"]
        [::std::mem::offset_of!(ma_bpf_node, baseNode) - 0usize];
    ["Offset of field: ma_bpf_node::bpf"][::std::mem::offset_of!(ma_bpf_node, bpf) - 360usize];
};
unsafe extern "C" {
    pub fn ma_bpf_node_init(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_bpf_node_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pNode: *mut ma_bpf_node,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_bpf_node_reinit(pConfig: *const ma_bpf_config, pNode: *mut ma_bpf_node) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_bpf_node_uninit(
        pNode: *mut ma_bpf_node,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_notch_node_config {
    pub nodeConfig: ma_node_config,
    pub notch: ma_notch_config,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_notch_node_config"][::std::mem::size_of::<ma_notch_node_config>() - 72usize];
    ["Alignment of ma_notch_node_config"][::std::mem::align_of::<ma_notch_node_config>() - 8usize];
    ["Offset of field: ma_notch_node_config::nodeConfig"]
        [::std::mem::offset_of!(ma_notch_node_config, nodeConfig) - 0usize];
    ["Offset of field: ma_notch_node_config::notch"]
        [::std::mem::offset_of!(ma_notch_node_config, notch) - 40usize];
};
unsafe extern "C" {
    pub fn ma_notch_node_config_init(
        channels: ma_uint32,
        sampleRate: ma_uint32,
        q: f64,
        frequency: f64,
    ) -> ma_notch_node_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_notch_node {
    pub baseNode: ma_node_base,
    pub notch: ma_notch2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_notch_node"][::std::mem::size_of::<ma_notch_node>() - 424usize];
    ["Alignment of ma_notch_node"][::std::mem::align_of::<ma_notch_node>() - 8usize];
    ["Offset of field: ma_notch_node::baseNode"]
        [::std::mem::offset_of!(ma_notch_node, baseNode) - 0usize];
    ["Offset of field: ma_notch_node::notch"]
        [::std::mem::offset_of!(ma_notch_node, notch) - 360usize];
};
unsafe extern "C" {
    pub fn ma_notch_node_init(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_notch_node_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pNode: *mut ma_notch_node,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_notch_node_reinit(
        pConfig: *const ma_notch_config,
        pNode: *mut ma_notch_node,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_notch_node_uninit(
        pNode: *mut ma_notch_node,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_peak_node_config {
    pub nodeConfig: ma_node_config,
    pub peak: ma_peak_config,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_peak_node_config"][::std::mem::size_of::<ma_peak_node_config>() - 80usize];
    ["Alignment of ma_peak_node_config"][::std::mem::align_of::<ma_peak_node_config>() - 8usize];
    ["Offset of field: ma_peak_node_config::nodeConfig"]
        [::std::mem::offset_of!(ma_peak_node_config, nodeConfig) - 0usize];
    ["Offset of field: ma_peak_node_config::peak"]
        [::std::mem::offset_of!(ma_peak_node_config, peak) - 40usize];
};
unsafe extern "C" {
    pub fn ma_peak_node_config_init(
        channels: ma_uint32,
        sampleRate: ma_uint32,
        gainDB: f64,
        q: f64,
        frequency: f64,
    ) -> ma_peak_node_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_peak_node {
    pub baseNode: ma_node_base,
    pub peak: ma_peak2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_peak_node"][::std::mem::size_of::<ma_peak_node>() - 424usize];
    ["Alignment of ma_peak_node"][::std::mem::align_of::<ma_peak_node>() - 8usize];
    ["Offset of field: ma_peak_node::baseNode"]
        [::std::mem::offset_of!(ma_peak_node, baseNode) - 0usize];
    ["Offset of field: ma_peak_node::peak"][::std::mem::offset_of!(ma_peak_node, peak) - 360usize];
};
unsafe extern "C" {
    pub fn ma_peak_node_init(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_peak_node_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pNode: *mut ma_peak_node,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_peak_node_reinit(
        pConfig: *const ma_peak_config,
        pNode: *mut ma_peak_node,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_peak_node_uninit(
        pNode: *mut ma_peak_node,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_loshelf_node_config {
    pub nodeConfig: ma_node_config,
    pub loshelf: ma_loshelf_config,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_loshelf_node_config"][::std::mem::size_of::<ma_loshelf_node_config>() - 80usize];
    ["Alignment of ma_loshelf_node_config"]
        [::std::mem::align_of::<ma_loshelf_node_config>() - 8usize];
    ["Offset of field: ma_loshelf_node_config::nodeConfig"]
        [::std::mem::offset_of!(ma_loshelf_node_config, nodeConfig) - 0usize];
    ["Offset of field: ma_loshelf_node_config::loshelf"]
        [::std::mem::offset_of!(ma_loshelf_node_config, loshelf) - 40usize];
};
unsafe extern "C" {
    pub fn ma_loshelf_node_config_init(
        channels: ma_uint32,
        sampleRate: ma_uint32,
        gainDB: f64,
        q: f64,
        frequency: f64,
    ) -> ma_loshelf_node_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_loshelf_node {
    pub baseNode: ma_node_base,
    pub loshelf: ma_loshelf2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_loshelf_node"][::std::mem::size_of::<ma_loshelf_node>() - 424usize];
    ["Alignment of ma_loshelf_node"][::std::mem::align_of::<ma_loshelf_node>() - 8usize];
    ["Offset of field: ma_loshelf_node::baseNode"]
        [::std::mem::offset_of!(ma_loshelf_node, baseNode) - 0usize];
    ["Offset of field: ma_loshelf_node::loshelf"]
        [::std::mem::offset_of!(ma_loshelf_node, loshelf) - 360usize];
};
unsafe extern "C" {
    pub fn ma_loshelf_node_init(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_loshelf_node_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pNode: *mut ma_loshelf_node,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_loshelf_node_reinit(
        pConfig: *const ma_loshelf_config,
        pNode: *mut ma_loshelf_node,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_loshelf_node_uninit(
        pNode: *mut ma_loshelf_node,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_hishelf_node_config {
    pub nodeConfig: ma_node_config,
    pub hishelf: ma_hishelf_config,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_hishelf_node_config"][::std::mem::size_of::<ma_hishelf_node_config>() - 80usize];
    ["Alignment of ma_hishelf_node_config"]
        [::std::mem::align_of::<ma_hishelf_node_config>() - 8usize];
    ["Offset of field: ma_hishelf_node_config::nodeConfig"]
        [::std::mem::offset_of!(ma_hishelf_node_config, nodeConfig) - 0usize];
    ["Offset of field: ma_hishelf_node_config::hishelf"]
        [::std::mem::offset_of!(ma_hishelf_node_config, hishelf) - 40usize];
};
unsafe extern "C" {
    pub fn ma_hishelf_node_config_init(
        channels: ma_uint32,
        sampleRate: ma_uint32,
        gainDB: f64,
        q: f64,
        frequency: f64,
    ) -> ma_hishelf_node_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_hishelf_node {
    pub baseNode: ma_node_base,
    pub hishelf: ma_hishelf2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_hishelf_node"][::std::mem::size_of::<ma_hishelf_node>() - 424usize];
    ["Alignment of ma_hishelf_node"][::std::mem::align_of::<ma_hishelf_node>() - 8usize];
    ["Offset of field: ma_hishelf_node::baseNode"]
        [::std::mem::offset_of!(ma_hishelf_node, baseNode) - 0usize];
    ["Offset of field: ma_hishelf_node::hishelf"]
        [::std::mem::offset_of!(ma_hishelf_node, hishelf) - 360usize];
};
unsafe extern "C" {
    pub fn ma_hishelf_node_init(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_hishelf_node_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pNode: *mut ma_hishelf_node,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_hishelf_node_reinit(
        pConfig: *const ma_hishelf_config,
        pNode: *mut ma_hishelf_node,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_hishelf_node_uninit(
        pNode: *mut ma_hishelf_node,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_delay_node_config {
    pub nodeConfig: ma_node_config,
    pub delay: ma_delay_config,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_delay_node_config"][::std::mem::size_of::<ma_delay_node_config>() - 72usize];
    ["Alignment of ma_delay_node_config"][::std::mem::align_of::<ma_delay_node_config>() - 8usize];
    ["Offset of field: ma_delay_node_config::nodeConfig"]
        [::std::mem::offset_of!(ma_delay_node_config, nodeConfig) - 0usize];
    ["Offset of field: ma_delay_node_config::delay"]
        [::std::mem::offset_of!(ma_delay_node_config, delay) - 40usize];
};
unsafe extern "C" {
    pub fn ma_delay_node_config_init(
        channels: ma_uint32,
        sampleRate: ma_uint32,
        delayInFrames: ma_uint32,
        decay: f32,
    ) -> ma_delay_node_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_delay_node {
    pub baseNode: ma_node_base,
    pub delay: ma_delay,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_delay_node"][::std::mem::size_of::<ma_delay_node>() - 408usize];
    ["Alignment of ma_delay_node"][::std::mem::align_of::<ma_delay_node>() - 8usize];
    ["Offset of field: ma_delay_node::baseNode"]
        [::std::mem::offset_of!(ma_delay_node, baseNode) - 0usize];
    ["Offset of field: ma_delay_node::delay"]
        [::std::mem::offset_of!(ma_delay_node, delay) - 360usize];
};
unsafe extern "C" {
    pub fn ma_delay_node_init(
        pNodeGraph: *mut ma_node_graph,
        pConfig: *const ma_delay_node_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pDelayNode: *mut ma_delay_node,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_delay_node_uninit(
        pDelayNode: *mut ma_delay_node,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
unsafe extern "C" {
    pub fn ma_delay_node_set_wet(pDelayNode: *mut ma_delay_node, value: f32);
}
unsafe extern "C" {
    pub fn ma_delay_node_get_wet(pDelayNode: *const ma_delay_node) -> f32;
}
unsafe extern "C" {
    pub fn ma_delay_node_set_dry(pDelayNode: *mut ma_delay_node, value: f32);
}
unsafe extern "C" {
    pub fn ma_delay_node_get_dry(pDelayNode: *const ma_delay_node) -> f32;
}
unsafe extern "C" {
    pub fn ma_delay_node_set_decay(pDelayNode: *mut ma_delay_node, value: f32);
}
unsafe extern "C" {
    pub fn ma_delay_node_get_decay(pDelayNode: *const ma_delay_node) -> f32;
}
pub const ma_sound_flags_MA_SOUND_FLAG_STREAM: ma_sound_flags = 1;
pub const ma_sound_flags_MA_SOUND_FLAG_DECODE: ma_sound_flags = 2;
pub const ma_sound_flags_MA_SOUND_FLAG_ASYNC: ma_sound_flags = 4;
pub const ma_sound_flags_MA_SOUND_FLAG_WAIT_INIT: ma_sound_flags = 8;
pub const ma_sound_flags_MA_SOUND_FLAG_UNKNOWN_LENGTH: ma_sound_flags = 16;
pub const ma_sound_flags_MA_SOUND_FLAG_LOOPING: ma_sound_flags = 32;
pub const ma_sound_flags_MA_SOUND_FLAG_NO_DEFAULT_ATTACHMENT: ma_sound_flags = 4096;
pub const ma_sound_flags_MA_SOUND_FLAG_NO_PITCH: ma_sound_flags = 8192;
pub const ma_sound_flags_MA_SOUND_FLAG_NO_SPATIALIZATION: ma_sound_flags = 16384;
pub type ma_sound_flags = ::std::os::raw::c_int;
pub const ma_engine_node_type_ma_engine_node_type_sound: ma_engine_node_type = 0;
pub const ma_engine_node_type_ma_engine_node_type_group: ma_engine_node_type = 1;
pub type ma_engine_node_type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_engine_node_config {
    pub pEngine: *mut ma_engine,
    pub type_: ma_engine_node_type,
    pub channelsIn: ma_uint32,
    pub channelsOut: ma_uint32,
    pub sampleRate: ma_uint32,
    pub volumeSmoothTimeInPCMFrames: ma_uint32,
    pub monoExpansionMode: ma_mono_expansion_mode,
    pub isPitchDisabled: ma_bool8,
    pub isSpatializationDisabled: ma_bool8,
    pub pinnedListenerIndex: ma_uint8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_engine_node_config"][::std::mem::size_of::<ma_engine_node_config>() - 40usize];
    ["Alignment of ma_engine_node_config"]
        [::std::mem::align_of::<ma_engine_node_config>() - 8usize];
    ["Offset of field: ma_engine_node_config::pEngine"]
        [::std::mem::offset_of!(ma_engine_node_config, pEngine) - 0usize];
    ["Offset of field: ma_engine_node_config::type_"]
        [::std::mem::offset_of!(ma_engine_node_config, type_) - 8usize];
    ["Offset of field: ma_engine_node_config::channelsIn"]
        [::std::mem::offset_of!(ma_engine_node_config, channelsIn) - 12usize];
    ["Offset of field: ma_engine_node_config::channelsOut"]
        [::std::mem::offset_of!(ma_engine_node_config, channelsOut) - 16usize];
    ["Offset of field: ma_engine_node_config::sampleRate"]
        [::std::mem::offset_of!(ma_engine_node_config, sampleRate) - 20usize];
    ["Offset of field: ma_engine_node_config::volumeSmoothTimeInPCMFrames"]
        [::std::mem::offset_of!(ma_engine_node_config, volumeSmoothTimeInPCMFrames) - 24usize];
    ["Offset of field: ma_engine_node_config::monoExpansionMode"]
        [::std::mem::offset_of!(ma_engine_node_config, monoExpansionMode) - 28usize];
    ["Offset of field: ma_engine_node_config::isPitchDisabled"]
        [::std::mem::offset_of!(ma_engine_node_config, isPitchDisabled) - 32usize];
    ["Offset of field: ma_engine_node_config::isSpatializationDisabled"]
        [::std::mem::offset_of!(ma_engine_node_config, isSpatializationDisabled) - 33usize];
    ["Offset of field: ma_engine_node_config::pinnedListenerIndex"]
        [::std::mem::offset_of!(ma_engine_node_config, pinnedListenerIndex) - 34usize];
};
unsafe extern "C" {
    pub fn ma_engine_node_config_init(
        pEngine: *mut ma_engine,
        type_: ma_engine_node_type,
        flags: ma_uint32,
    ) -> ma_engine_node_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_engine_node {
    pub baseNode: ma_node_base,
    pub pEngine: *mut ma_engine,
    pub sampleRate: ma_uint32,
    pub volumeSmoothTimeInPCMFrames: ma_uint32,
    pub monoExpansionMode: ma_mono_expansion_mode,
    pub fader: ma_fader,
    pub resampler: ma_linear_resampler,
    pub spatializer: ma_spatializer,
    pub panner: ma_panner,
    pub volumeGainer: ma_gainer,
    pub volume: ma_atomic_float,
    pub pitch: f32,
    pub oldPitch: f32,
    pub oldDopplerPitch: f32,
    pub isPitchDisabled: ma_bool32,
    pub isSpatializationDisabled: ma_bool32,
    pub pinnedListenerIndex: ma_uint32,
    pub fadeSettings: ma_engine_node__bindgen_ty_1,
    pub _ownsHeap: ma_bool8,
    pub _pHeap: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_engine_node__bindgen_ty_1 {
    pub volumeBeg: ma_atomic_float,
    pub volumeEnd: ma_atomic_float,
    pub fadeLengthInFrames: ma_atomic_uint64,
    pub absoluteGlobalTimeInFrames: ma_atomic_uint64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_engine_node__bindgen_ty_1"]
        [::std::mem::size_of::<ma_engine_node__bindgen_ty_1>() - 24usize];
    ["Alignment of ma_engine_node__bindgen_ty_1"]
        [::std::mem::align_of::<ma_engine_node__bindgen_ty_1>() - 8usize];
    ["Offset of field: ma_engine_node__bindgen_ty_1::volumeBeg"]
        [::std::mem::offset_of!(ma_engine_node__bindgen_ty_1, volumeBeg) - 0usize];
    ["Offset of field: ma_engine_node__bindgen_ty_1::volumeEnd"]
        [::std::mem::offset_of!(ma_engine_node__bindgen_ty_1, volumeEnd) - 4usize];
    ["Offset of field: ma_engine_node__bindgen_ty_1::fadeLengthInFrames"]
        [::std::mem::offset_of!(ma_engine_node__bindgen_ty_1, fadeLengthInFrames) - 8usize];
    ["Offset of field: ma_engine_node__bindgen_ty_1::absoluteGlobalTimeInFrames"][::std::mem::offset_of!(
        ma_engine_node__bindgen_ty_1,
        absoluteGlobalTimeInFrames
    ) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_engine_node"][::std::mem::size_of::<ma_engine_node>() - 896usize];
    ["Alignment of ma_engine_node"][::std::mem::align_of::<ma_engine_node>() - 8usize];
    ["Offset of field: ma_engine_node::baseNode"]
        [::std::mem::offset_of!(ma_engine_node, baseNode) - 0usize];
    ["Offset of field: ma_engine_node::pEngine"]
        [::std::mem::offset_of!(ma_engine_node, pEngine) - 360usize];
    ["Offset of field: ma_engine_node::sampleRate"]
        [::std::mem::offset_of!(ma_engine_node, sampleRate) - 368usize];
    ["Offset of field: ma_engine_node::volumeSmoothTimeInPCMFrames"]
        [::std::mem::offset_of!(ma_engine_node, volumeSmoothTimeInPCMFrames) - 372usize];
    ["Offset of field: ma_engine_node::monoExpansionMode"]
        [::std::mem::offset_of!(ma_engine_node, monoExpansionMode) - 376usize];
    ["Offset of field: ma_engine_node::fader"]
        [::std::mem::offset_of!(ma_engine_node, fader) - 384usize];
    ["Offset of field: ma_engine_node::resampler"]
        [::std::mem::offset_of!(ma_engine_node, resampler) - 424usize];
    ["Offset of field: ma_engine_node::spatializer"]
        [::std::mem::offset_of!(ma_engine_node, spatializer) - 560usize];
    ["Offset of field: ma_engine_node::panner"]
        [::std::mem::offset_of!(ma_engine_node, panner) - 760usize];
    ["Offset of field: ma_engine_node::volumeGainer"]
        [::std::mem::offset_of!(ma_engine_node, volumeGainer) - 776usize];
    ["Offset of field: ma_engine_node::volume"]
        [::std::mem::offset_of!(ma_engine_node, volume) - 824usize];
    ["Offset of field: ma_engine_node::pitch"]
        [::std::mem::offset_of!(ma_engine_node, pitch) - 828usize];
    ["Offset of field: ma_engine_node::oldPitch"]
        [::std::mem::offset_of!(ma_engine_node, oldPitch) - 832usize];
    ["Offset of field: ma_engine_node::oldDopplerPitch"]
        [::std::mem::offset_of!(ma_engine_node, oldDopplerPitch) - 836usize];
    ["Offset of field: ma_engine_node::isPitchDisabled"]
        [::std::mem::offset_of!(ma_engine_node, isPitchDisabled) - 840usize];
    ["Offset of field: ma_engine_node::isSpatializationDisabled"]
        [::std::mem::offset_of!(ma_engine_node, isSpatializationDisabled) - 844usize];
    ["Offset of field: ma_engine_node::pinnedListenerIndex"]
        [::std::mem::offset_of!(ma_engine_node, pinnedListenerIndex) - 848usize];
    ["Offset of field: ma_engine_node::fadeSettings"]
        [::std::mem::offset_of!(ma_engine_node, fadeSettings) - 856usize];
    ["Offset of field: ma_engine_node::_ownsHeap"]
        [::std::mem::offset_of!(ma_engine_node, _ownsHeap) - 880usize];
    ["Offset of field: ma_engine_node::_pHeap"]
        [::std::mem::offset_of!(ma_engine_node, _pHeap) - 888usize];
};
unsafe extern "C" {
    pub fn ma_engine_node_get_heap_size(
        pConfig: *const ma_engine_node_config,
        pHeapSizeInBytes: *mut usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_engine_node_init_preallocated(
        pConfig: *const ma_engine_node_config,
        pHeap: *mut ::std::os::raw::c_void,
        pEngineNode: *mut ma_engine_node,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_engine_node_init(
        pConfig: *const ma_engine_node_config,
        pAllocationCallbacks: *const ma_allocation_callbacks,
        pEngineNode: *mut ma_engine_node,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_engine_node_uninit(
        pEngineNode: *mut ma_engine_node,
        pAllocationCallbacks: *const ma_allocation_callbacks,
    );
}
pub type ma_sound_end_proc = ::std::option::Option<
    unsafe extern "C" fn(pUserData: *mut ::std::os::raw::c_void, pSound: *mut ma_sound),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_sound_config {
    pub pFilePath: *const ::std::os::raw::c_char,
    pub pFilePathW: *const wchar_t,
    pub pDataSource: *mut ma_data_source,
    pub pInitialAttachment: *mut ma_node,
    pub initialAttachmentInputBusIndex: ma_uint32,
    pub channelsIn: ma_uint32,
    pub channelsOut: ma_uint32,
    pub monoExpansionMode: ma_mono_expansion_mode,
    pub flags: ma_uint32,
    pub volumeSmoothTimeInPCMFrames: ma_uint32,
    pub initialSeekPointInPCMFrames: ma_uint64,
    pub rangeBegInPCMFrames: ma_uint64,
    pub rangeEndInPCMFrames: ma_uint64,
    pub loopPointBegInPCMFrames: ma_uint64,
    pub loopPointEndInPCMFrames: ma_uint64,
    pub endCallback: ma_sound_end_proc,
    pub pEndCallbackUserData: *mut ::std::os::raw::c_void,
    pub initNotifications: ma_resource_manager_pipeline_notifications,
    pub pDoneFence: *mut ma_fence,
    pub isLooping: ma_bool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_sound_config"][::std::mem::size_of::<ma_sound_config>() - 160usize];
    ["Alignment of ma_sound_config"][::std::mem::align_of::<ma_sound_config>() - 8usize];
    ["Offset of field: ma_sound_config::pFilePath"]
        [::std::mem::offset_of!(ma_sound_config, pFilePath) - 0usize];
    ["Offset of field: ma_sound_config::pFilePathW"]
        [::std::mem::offset_of!(ma_sound_config, pFilePathW) - 8usize];
    ["Offset of field: ma_sound_config::pDataSource"]
        [::std::mem::offset_of!(ma_sound_config, pDataSource) - 16usize];
    ["Offset of field: ma_sound_config::pInitialAttachment"]
        [::std::mem::offset_of!(ma_sound_config, pInitialAttachment) - 24usize];
    ["Offset of field: ma_sound_config::initialAttachmentInputBusIndex"]
        [::std::mem::offset_of!(ma_sound_config, initialAttachmentInputBusIndex) - 32usize];
    ["Offset of field: ma_sound_config::channelsIn"]
        [::std::mem::offset_of!(ma_sound_config, channelsIn) - 36usize];
    ["Offset of field: ma_sound_config::channelsOut"]
        [::std::mem::offset_of!(ma_sound_config, channelsOut) - 40usize];
    ["Offset of field: ma_sound_config::monoExpansionMode"]
        [::std::mem::offset_of!(ma_sound_config, monoExpansionMode) - 44usize];
    ["Offset of field: ma_sound_config::flags"]
        [::std::mem::offset_of!(ma_sound_config, flags) - 48usize];
    ["Offset of field: ma_sound_config::volumeSmoothTimeInPCMFrames"]
        [::std::mem::offset_of!(ma_sound_config, volumeSmoothTimeInPCMFrames) - 52usize];
    ["Offset of field: ma_sound_config::initialSeekPointInPCMFrames"]
        [::std::mem::offset_of!(ma_sound_config, initialSeekPointInPCMFrames) - 56usize];
    ["Offset of field: ma_sound_config::rangeBegInPCMFrames"]
        [::std::mem::offset_of!(ma_sound_config, rangeBegInPCMFrames) - 64usize];
    ["Offset of field: ma_sound_config::rangeEndInPCMFrames"]
        [::std::mem::offset_of!(ma_sound_config, rangeEndInPCMFrames) - 72usize];
    ["Offset of field: ma_sound_config::loopPointBegInPCMFrames"]
        [::std::mem::offset_of!(ma_sound_config, loopPointBegInPCMFrames) - 80usize];
    ["Offset of field: ma_sound_config::loopPointEndInPCMFrames"]
        [::std::mem::offset_of!(ma_sound_config, loopPointEndInPCMFrames) - 88usize];
    ["Offset of field: ma_sound_config::endCallback"]
        [::std::mem::offset_of!(ma_sound_config, endCallback) - 96usize];
    ["Offset of field: ma_sound_config::pEndCallbackUserData"]
        [::std::mem::offset_of!(ma_sound_config, pEndCallbackUserData) - 104usize];
    ["Offset of field: ma_sound_config::initNotifications"]
        [::std::mem::offset_of!(ma_sound_config, initNotifications) - 112usize];
    ["Offset of field: ma_sound_config::pDoneFence"]
        [::std::mem::offset_of!(ma_sound_config, pDoneFence) - 144usize];
    ["Offset of field: ma_sound_config::isLooping"]
        [::std::mem::offset_of!(ma_sound_config, isLooping) - 152usize];
};
unsafe extern "C" {
    pub fn ma_sound_config_init() -> ma_sound_config;
}
unsafe extern "C" {
    pub fn ma_sound_config_init_2(pEngine: *mut ma_engine) -> ma_sound_config;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_sound {
    pub engineNode: ma_engine_node,
    pub pDataSource: *mut ma_data_source,
    pub seekTarget: ma_uint64,
    pub atEnd: ma_bool32,
    pub endCallback: ma_sound_end_proc,
    pub pEndCallbackUserData: *mut ::std::os::raw::c_void,
    pub ownsDataSource: ma_bool8,
    pub pResourceManagerDataSource: *mut ma_resource_manager_data_source,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_sound"][::std::mem::size_of::<ma_sound>() - 952usize];
    ["Alignment of ma_sound"][::std::mem::align_of::<ma_sound>() - 8usize];
    ["Offset of field: ma_sound::engineNode"]
        [::std::mem::offset_of!(ma_sound, engineNode) - 0usize];
    ["Offset of field: ma_sound::pDataSource"]
        [::std::mem::offset_of!(ma_sound, pDataSource) - 896usize];
    ["Offset of field: ma_sound::seekTarget"]
        [::std::mem::offset_of!(ma_sound, seekTarget) - 904usize];
    ["Offset of field: ma_sound::atEnd"][::std::mem::offset_of!(ma_sound, atEnd) - 912usize];
    ["Offset of field: ma_sound::endCallback"]
        [::std::mem::offset_of!(ma_sound, endCallback) - 920usize];
    ["Offset of field: ma_sound::pEndCallbackUserData"]
        [::std::mem::offset_of!(ma_sound, pEndCallbackUserData) - 928usize];
    ["Offset of field: ma_sound::ownsDataSource"]
        [::std::mem::offset_of!(ma_sound, ownsDataSource) - 936usize];
    ["Offset of field: ma_sound::pResourceManagerDataSource"]
        [::std::mem::offset_of!(ma_sound, pResourceManagerDataSource) - 944usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ma_sound_inlined {
    pub sound: ma_sound,
    pub pNext: *mut ma_sound_inlined,
    pub pPrev: *mut ma_sound_inlined,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_sound_inlined"][::std::mem::size_of::<ma_sound_inlined>() - 968usize];
    ["Alignment of ma_sound_inlined"][::std::mem::align_of::<ma_sound_inlined>() - 8usize];
    ["Offset of field: ma_sound_inlined::sound"]
        [::std::mem::offset_of!(ma_sound_inlined, sound) - 0usize];
    ["Offset of field: ma_sound_inlined::pNext"]
        [::std::mem::offset_of!(ma_sound_inlined, pNext) - 952usize];
    ["Offset of field: ma_sound_inlined::pPrev"]
        [::std::mem::offset_of!(ma_sound_inlined, pPrev) - 960usize];
};
pub type ma_sound_group_config = ma_sound_config;
pub type ma_sound_group = ma_sound;
unsafe extern "C" {
    pub fn ma_sound_group_config_init() -> ma_sound_group_config;
}
unsafe extern "C" {
    pub fn ma_sound_group_config_init_2(pEngine: *mut ma_engine) -> ma_sound_group_config;
}
pub type ma_engine_process_proc = ::std::option::Option<
    unsafe extern "C" fn(
        pUserData: *mut ::std::os::raw::c_void,
        pFramesOut: *mut f32,
        frameCount: ma_uint64,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_engine_config {
    pub pResourceManager: *mut ma_resource_manager,
    pub pContext: *mut ma_context,
    pub pDevice: *mut ma_device,
    pub pPlaybackDeviceID: *mut ma_device_id,
    pub dataCallback: ma_device_data_proc,
    pub notificationCallback: ma_device_notification_proc,
    pub pLog: *mut ma_log,
    pub listenerCount: ma_uint32,
    pub channels: ma_uint32,
    pub sampleRate: ma_uint32,
    pub periodSizeInFrames: ma_uint32,
    pub periodSizeInMilliseconds: ma_uint32,
    pub gainSmoothTimeInFrames: ma_uint32,
    pub gainSmoothTimeInMilliseconds: ma_uint32,
    pub defaultVolumeSmoothTimeInPCMFrames: ma_uint32,
    pub preMixStackSizeInBytes: ma_uint32,
    pub allocationCallbacks: ma_allocation_callbacks,
    pub noAutoStart: ma_bool32,
    pub noDevice: ma_bool32,
    pub monoExpansionMode: ma_mono_expansion_mode,
    pub pResourceManagerVFS: *mut ma_vfs,
    pub onProcess: ma_engine_process_proc,
    pub pProcessUserData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_engine_config"][::std::mem::size_of::<ma_engine_config>() - 168usize];
    ["Alignment of ma_engine_config"][::std::mem::align_of::<ma_engine_config>() - 8usize];
    ["Offset of field: ma_engine_config::pResourceManager"]
        [::std::mem::offset_of!(ma_engine_config, pResourceManager) - 0usize];
    ["Offset of field: ma_engine_config::pContext"]
        [::std::mem::offset_of!(ma_engine_config, pContext) - 8usize];
    ["Offset of field: ma_engine_config::pDevice"]
        [::std::mem::offset_of!(ma_engine_config, pDevice) - 16usize];
    ["Offset of field: ma_engine_config::pPlaybackDeviceID"]
        [::std::mem::offset_of!(ma_engine_config, pPlaybackDeviceID) - 24usize];
    ["Offset of field: ma_engine_config::dataCallback"]
        [::std::mem::offset_of!(ma_engine_config, dataCallback) - 32usize];
    ["Offset of field: ma_engine_config::notificationCallback"]
        [::std::mem::offset_of!(ma_engine_config, notificationCallback) - 40usize];
    ["Offset of field: ma_engine_config::pLog"]
        [::std::mem::offset_of!(ma_engine_config, pLog) - 48usize];
    ["Offset of field: ma_engine_config::listenerCount"]
        [::std::mem::offset_of!(ma_engine_config, listenerCount) - 56usize];
    ["Offset of field: ma_engine_config::channels"]
        [::std::mem::offset_of!(ma_engine_config, channels) - 60usize];
    ["Offset of field: ma_engine_config::sampleRate"]
        [::std::mem::offset_of!(ma_engine_config, sampleRate) - 64usize];
    ["Offset of field: ma_engine_config::periodSizeInFrames"]
        [::std::mem::offset_of!(ma_engine_config, periodSizeInFrames) - 68usize];
    ["Offset of field: ma_engine_config::periodSizeInMilliseconds"]
        [::std::mem::offset_of!(ma_engine_config, periodSizeInMilliseconds) - 72usize];
    ["Offset of field: ma_engine_config::gainSmoothTimeInFrames"]
        [::std::mem::offset_of!(ma_engine_config, gainSmoothTimeInFrames) - 76usize];
    ["Offset of field: ma_engine_config::gainSmoothTimeInMilliseconds"]
        [::std::mem::offset_of!(ma_engine_config, gainSmoothTimeInMilliseconds) - 80usize];
    ["Offset of field: ma_engine_config::defaultVolumeSmoothTimeInPCMFrames"]
        [::std::mem::offset_of!(ma_engine_config, defaultVolumeSmoothTimeInPCMFrames) - 84usize];
    ["Offset of field: ma_engine_config::preMixStackSizeInBytes"]
        [::std::mem::offset_of!(ma_engine_config, preMixStackSizeInBytes) - 88usize];
    ["Offset of field: ma_engine_config::allocationCallbacks"]
        [::std::mem::offset_of!(ma_engine_config, allocationCallbacks) - 96usize];
    ["Offset of field: ma_engine_config::noAutoStart"]
        [::std::mem::offset_of!(ma_engine_config, noAutoStart) - 128usize];
    ["Offset of field: ma_engine_config::noDevice"]
        [::std::mem::offset_of!(ma_engine_config, noDevice) - 132usize];
    ["Offset of field: ma_engine_config::monoExpansionMode"]
        [::std::mem::offset_of!(ma_engine_config, monoExpansionMode) - 136usize];
    ["Offset of field: ma_engine_config::pResourceManagerVFS"]
        [::std::mem::offset_of!(ma_engine_config, pResourceManagerVFS) - 144usize];
    ["Offset of field: ma_engine_config::onProcess"]
        [::std::mem::offset_of!(ma_engine_config, onProcess) - 152usize];
    ["Offset of field: ma_engine_config::pProcessUserData"]
        [::std::mem::offset_of!(ma_engine_config, pProcessUserData) - 160usize];
};
unsafe extern "C" {
    pub fn ma_engine_config_init() -> ma_engine_config;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ma_engine {
    pub nodeGraph: ma_node_graph,
    pub pResourceManager: *mut ma_resource_manager,
    pub pDevice: *mut ma_device,
    pub pLog: *mut ma_log,
    pub sampleRate: ma_uint32,
    pub listenerCount: ma_uint32,
    pub listeners: [ma_spatializer_listener; 4usize],
    pub allocationCallbacks: ma_allocation_callbacks,
    pub ownsResourceManager: ma_bool8,
    pub ownsDevice: ma_bool8,
    pub inlinedSoundLock: ma_spinlock,
    pub pInlinedSoundHead: *mut ma_sound_inlined,
    pub inlinedSoundCount: ma_uint32,
    pub gainSmoothTimeInFrames: ma_uint32,
    pub defaultVolumeSmoothTimeInPCMFrames: ma_uint32,
    pub monoExpansionMode: ma_mono_expansion_mode,
    pub onProcess: ma_engine_process_proc,
    pub pProcessUserData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ma_engine"][::std::mem::size_of::<ma_engine>() - 1312usize];
    ["Alignment of ma_engine"][::std::mem::align_of::<ma_engine>() - 8usize];
    ["Offset of field: ma_engine::nodeGraph"]
        [::std::mem::offset_of!(ma_engine, nodeGraph) - 0usize];
    ["Offset of field: ma_engine::pResourceManager"]
        [::std::mem::offset_of!(ma_engine, pResourceManager) - 752usize];
    ["Offset of field: ma_engine::pDevice"][::std::mem::offset_of!(ma_engine, pDevice) - 760usize];
    ["Offset of field: ma_engine::pLog"][::std::mem::offset_of!(ma_engine, pLog) - 768usize];
    ["Offset of field: ma_engine::sampleRate"]
        [::std::mem::offset_of!(ma_engine, sampleRate) - 776usize];
    ["Offset of field: ma_engine::listenerCount"]
        [::std::mem::offset_of!(ma_engine, listenerCount) - 780usize];
    ["Offset of field: ma_engine::listeners"]
        [::std::mem::offset_of!(ma_engine, listeners) - 784usize];
    ["Offset of field: ma_engine::allocationCallbacks"]
        [::std::mem::offset_of!(ma_engine, allocationCallbacks) - 1232usize];
    ["Offset of field: ma_engine::ownsResourceManager"]
        [::std::mem::offset_of!(ma_engine, ownsResourceManager) - 1264usize];
    ["Offset of field: ma_engine::ownsDevice"]
        [::std::mem::offset_of!(ma_engine, ownsDevice) - 1265usize];
    ["Offset of field: ma_engine::inlinedSoundLock"]
        [::std::mem::offset_of!(ma_engine, inlinedSoundLock) - 1268usize];
    ["Offset of field: ma_engine::pInlinedSoundHead"]
        [::std::mem::offset_of!(ma_engine, pInlinedSoundHead) - 1272usize];
    ["Offset of field: ma_engine::inlinedSoundCount"]
        [::std::mem::offset_of!(ma_engine, inlinedSoundCount) - 1280usize];
    ["Offset of field: ma_engine::gainSmoothTimeInFrames"]
        [::std::mem::offset_of!(ma_engine, gainSmoothTimeInFrames) - 1284usize];
    ["Offset of field: ma_engine::defaultVolumeSmoothTimeInPCMFrames"]
        [::std::mem::offset_of!(ma_engine, defaultVolumeSmoothTimeInPCMFrames) - 1288usize];
    ["Offset of field: ma_engine::monoExpansionMode"]
        [::std::mem::offset_of!(ma_engine, monoExpansionMode) - 1292usize];
    ["Offset of field: ma_engine::onProcess"]
        [::std::mem::offset_of!(ma_engine, onProcess) - 1296usize];
    ["Offset of field: ma_engine::pProcessUserData"]
        [::std::mem::offset_of!(ma_engine, pProcessUserData) - 1304usize];
};
unsafe extern "C" {
    pub fn ma_engine_init(pConfig: *const ma_engine_config, pEngine: *mut ma_engine) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_engine_uninit(pEngine: *mut ma_engine);
}
unsafe extern "C" {
    pub fn ma_engine_read_pcm_frames(
        pEngine: *mut ma_engine,
        pFramesOut: *mut ::std::os::raw::c_void,
        frameCount: ma_uint64,
        pFramesRead: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_engine_get_node_graph(pEngine: *mut ma_engine) -> *mut ma_node_graph;
}
unsafe extern "C" {
    pub fn ma_engine_get_resource_manager(pEngine: *mut ma_engine) -> *mut ma_resource_manager;
}
unsafe extern "C" {
    pub fn ma_engine_get_device(pEngine: *mut ma_engine) -> *mut ma_device;
}
unsafe extern "C" {
    pub fn ma_engine_get_log(pEngine: *mut ma_engine) -> *mut ma_log;
}
unsafe extern "C" {
    pub fn ma_engine_get_endpoint(pEngine: *mut ma_engine) -> *mut ma_node;
}
unsafe extern "C" {
    pub fn ma_engine_get_time_in_pcm_frames(pEngine: *const ma_engine) -> ma_uint64;
}
unsafe extern "C" {
    pub fn ma_engine_get_time_in_milliseconds(pEngine: *const ma_engine) -> ma_uint64;
}
unsafe extern "C" {
    pub fn ma_engine_set_time_in_pcm_frames(
        pEngine: *mut ma_engine,
        globalTime: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_engine_set_time_in_milliseconds(
        pEngine: *mut ma_engine,
        globalTime: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_engine_get_time(pEngine: *const ma_engine) -> ma_uint64;
}
unsafe extern "C" {
    pub fn ma_engine_set_time(pEngine: *mut ma_engine, globalTime: ma_uint64) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_engine_get_channels(pEngine: *const ma_engine) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_engine_get_sample_rate(pEngine: *const ma_engine) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_engine_start(pEngine: *mut ma_engine) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_engine_stop(pEngine: *mut ma_engine) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_engine_set_volume(pEngine: *mut ma_engine, volume: f32) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_engine_get_volume(pEngine: *mut ma_engine) -> f32;
}
unsafe extern "C" {
    pub fn ma_engine_set_gain_db(pEngine: *mut ma_engine, gainDB: f32) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_engine_get_gain_db(pEngine: *mut ma_engine) -> f32;
}
unsafe extern "C" {
    pub fn ma_engine_get_listener_count(pEngine: *const ma_engine) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_engine_find_closest_listener(
        pEngine: *const ma_engine,
        absolutePosX: f32,
        absolutePosY: f32,
        absolutePosZ: f32,
    ) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_engine_listener_set_position(
        pEngine: *mut ma_engine,
        listenerIndex: ma_uint32,
        x: f32,
        y: f32,
        z: f32,
    );
}
unsafe extern "C" {
    pub fn ma_engine_listener_get_position(
        pEngine: *const ma_engine,
        listenerIndex: ma_uint32,
    ) -> ma_vec3f;
}
unsafe extern "C" {
    pub fn ma_engine_listener_set_direction(
        pEngine: *mut ma_engine,
        listenerIndex: ma_uint32,
        x: f32,
        y: f32,
        z: f32,
    );
}
unsafe extern "C" {
    pub fn ma_engine_listener_get_direction(
        pEngine: *const ma_engine,
        listenerIndex: ma_uint32,
    ) -> ma_vec3f;
}
unsafe extern "C" {
    pub fn ma_engine_listener_set_velocity(
        pEngine: *mut ma_engine,
        listenerIndex: ma_uint32,
        x: f32,
        y: f32,
        z: f32,
    );
}
unsafe extern "C" {
    pub fn ma_engine_listener_get_velocity(
        pEngine: *const ma_engine,
        listenerIndex: ma_uint32,
    ) -> ma_vec3f;
}
unsafe extern "C" {
    pub fn ma_engine_listener_set_cone(
        pEngine: *mut ma_engine,
        listenerIndex: ma_uint32,
        innerAngleInRadians: f32,
        outerAngleInRadians: f32,
        outerGain: f32,
    );
}
unsafe extern "C" {
    pub fn ma_engine_listener_get_cone(
        pEngine: *const ma_engine,
        listenerIndex: ma_uint32,
        pInnerAngleInRadians: *mut f32,
        pOuterAngleInRadians: *mut f32,
        pOuterGain: *mut f32,
    );
}
unsafe extern "C" {
    pub fn ma_engine_listener_set_world_up(
        pEngine: *mut ma_engine,
        listenerIndex: ma_uint32,
        x: f32,
        y: f32,
        z: f32,
    );
}
unsafe extern "C" {
    pub fn ma_engine_listener_get_world_up(
        pEngine: *const ma_engine,
        listenerIndex: ma_uint32,
    ) -> ma_vec3f;
}
unsafe extern "C" {
    pub fn ma_engine_listener_set_enabled(
        pEngine: *mut ma_engine,
        listenerIndex: ma_uint32,
        isEnabled: ma_bool32,
    );
}
unsafe extern "C" {
    pub fn ma_engine_listener_is_enabled(
        pEngine: *const ma_engine,
        listenerIndex: ma_uint32,
    ) -> ma_bool32;
}
unsafe extern "C" {
    pub fn ma_engine_play_sound_ex(
        pEngine: *mut ma_engine,
        pFilePath: *const ::std::os::raw::c_char,
        pNode: *mut ma_node,
        nodeInputBusIndex: ma_uint32,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_engine_play_sound(
        pEngine: *mut ma_engine,
        pFilePath: *const ::std::os::raw::c_char,
        pGroup: *mut ma_sound_group,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_sound_init_from_file(
        pEngine: *mut ma_engine,
        pFilePath: *const ::std::os::raw::c_char,
        flags: ma_uint32,
        pGroup: *mut ma_sound_group,
        pDoneFence: *mut ma_fence,
        pSound: *mut ma_sound,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_sound_init_from_file_w(
        pEngine: *mut ma_engine,
        pFilePath: *const wchar_t,
        flags: ma_uint32,
        pGroup: *mut ma_sound_group,
        pDoneFence: *mut ma_fence,
        pSound: *mut ma_sound,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_sound_init_copy(
        pEngine: *mut ma_engine,
        pExistingSound: *const ma_sound,
        flags: ma_uint32,
        pGroup: *mut ma_sound_group,
        pSound: *mut ma_sound,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_sound_init_from_data_source(
        pEngine: *mut ma_engine,
        pDataSource: *mut ma_data_source,
        flags: ma_uint32,
        pGroup: *mut ma_sound_group,
        pSound: *mut ma_sound,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_sound_init_ex(
        pEngine: *mut ma_engine,
        pConfig: *const ma_sound_config,
        pSound: *mut ma_sound,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_sound_uninit(pSound: *mut ma_sound);
}
unsafe extern "C" {
    pub fn ma_sound_get_engine(pSound: *const ma_sound) -> *mut ma_engine;
}
unsafe extern "C" {
    pub fn ma_sound_get_data_source(pSound: *const ma_sound) -> *mut ma_data_source;
}
unsafe extern "C" {
    pub fn ma_sound_start(pSound: *mut ma_sound) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_sound_stop(pSound: *mut ma_sound) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_sound_stop_with_fade_in_pcm_frames(
        pSound: *mut ma_sound,
        fadeLengthInFrames: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_sound_stop_with_fade_in_milliseconds(
        pSound: *mut ma_sound,
        fadeLengthInFrames: ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_sound_set_volume(pSound: *mut ma_sound, volume: f32);
}
unsafe extern "C" {
    pub fn ma_sound_get_volume(pSound: *const ma_sound) -> f32;
}
unsafe extern "C" {
    pub fn ma_sound_set_pan(pSound: *mut ma_sound, pan: f32);
}
unsafe extern "C" {
    pub fn ma_sound_get_pan(pSound: *const ma_sound) -> f32;
}
unsafe extern "C" {
    pub fn ma_sound_set_pan_mode(pSound: *mut ma_sound, panMode: ma_pan_mode);
}
unsafe extern "C" {
    pub fn ma_sound_get_pan_mode(pSound: *const ma_sound) -> ma_pan_mode;
}
unsafe extern "C" {
    pub fn ma_sound_set_pitch(pSound: *mut ma_sound, pitch: f32);
}
unsafe extern "C" {
    pub fn ma_sound_get_pitch(pSound: *const ma_sound) -> f32;
}
unsafe extern "C" {
    pub fn ma_sound_set_spatialization_enabled(pSound: *mut ma_sound, enabled: ma_bool32);
}
unsafe extern "C" {
    pub fn ma_sound_is_spatialization_enabled(pSound: *const ma_sound) -> ma_bool32;
}
unsafe extern "C" {
    pub fn ma_sound_set_pinned_listener_index(pSound: *mut ma_sound, listenerIndex: ma_uint32);
}
unsafe extern "C" {
    pub fn ma_sound_get_pinned_listener_index(pSound: *const ma_sound) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_sound_get_listener_index(pSound: *const ma_sound) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_sound_get_direction_to_listener(pSound: *const ma_sound) -> ma_vec3f;
}
unsafe extern "C" {
    pub fn ma_sound_set_position(pSound: *mut ma_sound, x: f32, y: f32, z: f32);
}
unsafe extern "C" {
    pub fn ma_sound_get_position(pSound: *const ma_sound) -> ma_vec3f;
}
unsafe extern "C" {
    pub fn ma_sound_set_direction(pSound: *mut ma_sound, x: f32, y: f32, z: f32);
}
unsafe extern "C" {
    pub fn ma_sound_get_direction(pSound: *const ma_sound) -> ma_vec3f;
}
unsafe extern "C" {
    pub fn ma_sound_set_velocity(pSound: *mut ma_sound, x: f32, y: f32, z: f32);
}
unsafe extern "C" {
    pub fn ma_sound_get_velocity(pSound: *const ma_sound) -> ma_vec3f;
}
unsafe extern "C" {
    pub fn ma_sound_set_attenuation_model(
        pSound: *mut ma_sound,
        attenuationModel: ma_attenuation_model,
    );
}
unsafe extern "C" {
    pub fn ma_sound_get_attenuation_model(pSound: *const ma_sound) -> ma_attenuation_model;
}
unsafe extern "C" {
    pub fn ma_sound_set_positioning(pSound: *mut ma_sound, positioning: ma_positioning);
}
unsafe extern "C" {
    pub fn ma_sound_get_positioning(pSound: *const ma_sound) -> ma_positioning;
}
unsafe extern "C" {
    pub fn ma_sound_set_rolloff(pSound: *mut ma_sound, rolloff: f32);
}
unsafe extern "C" {
    pub fn ma_sound_get_rolloff(pSound: *const ma_sound) -> f32;
}
unsafe extern "C" {
    pub fn ma_sound_set_min_gain(pSound: *mut ma_sound, minGain: f32);
}
unsafe extern "C" {
    pub fn ma_sound_get_min_gain(pSound: *const ma_sound) -> f32;
}
unsafe extern "C" {
    pub fn ma_sound_set_max_gain(pSound: *mut ma_sound, maxGain: f32);
}
unsafe extern "C" {
    pub fn ma_sound_get_max_gain(pSound: *const ma_sound) -> f32;
}
unsafe extern "C" {
    pub fn ma_sound_set_min_distance(pSound: *mut ma_sound, minDistance: f32);
}
unsafe extern "C" {
    pub fn ma_sound_get_min_distance(pSound: *const ma_sound) -> f32;
}
unsafe extern "C" {
    pub fn ma_sound_set_max_distance(pSound: *mut ma_sound, maxDistance: f32);
}
unsafe extern "C" {
    pub fn ma_sound_get_max_distance(pSound: *const ma_sound) -> f32;
}
unsafe extern "C" {
    pub fn ma_sound_set_cone(
        pSound: *mut ma_sound,
        innerAngleInRadians: f32,
        outerAngleInRadians: f32,
        outerGain: f32,
    );
}
unsafe extern "C" {
    pub fn ma_sound_get_cone(
        pSound: *const ma_sound,
        pInnerAngleInRadians: *mut f32,
        pOuterAngleInRadians: *mut f32,
        pOuterGain: *mut f32,
    );
}
unsafe extern "C" {
    pub fn ma_sound_set_doppler_factor(pSound: *mut ma_sound, dopplerFactor: f32);
}
unsafe extern "C" {
    pub fn ma_sound_get_doppler_factor(pSound: *const ma_sound) -> f32;
}
unsafe extern "C" {
    pub fn ma_sound_set_directional_attenuation_factor(
        pSound: *mut ma_sound,
        directionalAttenuationFactor: f32,
    );
}
unsafe extern "C" {
    pub fn ma_sound_get_directional_attenuation_factor(pSound: *const ma_sound) -> f32;
}
unsafe extern "C" {
    pub fn ma_sound_set_fade_in_pcm_frames(
        pSound: *mut ma_sound,
        volumeBeg: f32,
        volumeEnd: f32,
        fadeLengthInFrames: ma_uint64,
    );
}
unsafe extern "C" {
    pub fn ma_sound_set_fade_in_milliseconds(
        pSound: *mut ma_sound,
        volumeBeg: f32,
        volumeEnd: f32,
        fadeLengthInMilliseconds: ma_uint64,
    );
}
unsafe extern "C" {
    pub fn ma_sound_set_fade_start_in_pcm_frames(
        pSound: *mut ma_sound,
        volumeBeg: f32,
        volumeEnd: f32,
        fadeLengthInFrames: ma_uint64,
        absoluteGlobalTimeInFrames: ma_uint64,
    );
}
unsafe extern "C" {
    pub fn ma_sound_set_fade_start_in_milliseconds(
        pSound: *mut ma_sound,
        volumeBeg: f32,
        volumeEnd: f32,
        fadeLengthInMilliseconds: ma_uint64,
        absoluteGlobalTimeInMilliseconds: ma_uint64,
    );
}
unsafe extern "C" {
    pub fn ma_sound_get_current_fade_volume(pSound: *const ma_sound) -> f32;
}
unsafe extern "C" {
    pub fn ma_sound_set_start_time_in_pcm_frames(
        pSound: *mut ma_sound,
        absoluteGlobalTimeInFrames: ma_uint64,
    );
}
unsafe extern "C" {
    pub fn ma_sound_set_start_time_in_milliseconds(
        pSound: *mut ma_sound,
        absoluteGlobalTimeInMilliseconds: ma_uint64,
    );
}
unsafe extern "C" {
    pub fn ma_sound_set_stop_time_in_pcm_frames(
        pSound: *mut ma_sound,
        absoluteGlobalTimeInFrames: ma_uint64,
    );
}
unsafe extern "C" {
    pub fn ma_sound_set_stop_time_in_milliseconds(
        pSound: *mut ma_sound,
        absoluteGlobalTimeInMilliseconds: ma_uint64,
    );
}
unsafe extern "C" {
    pub fn ma_sound_set_stop_time_with_fade_in_pcm_frames(
        pSound: *mut ma_sound,
        stopAbsoluteGlobalTimeInFrames: ma_uint64,
        fadeLengthInFrames: ma_uint64,
    );
}
unsafe extern "C" {
    pub fn ma_sound_set_stop_time_with_fade_in_milliseconds(
        pSound: *mut ma_sound,
        stopAbsoluteGlobalTimeInMilliseconds: ma_uint64,
        fadeLengthInMilliseconds: ma_uint64,
    );
}
unsafe extern "C" {
    pub fn ma_sound_is_playing(pSound: *const ma_sound) -> ma_bool32;
}
unsafe extern "C" {
    pub fn ma_sound_get_time_in_pcm_frames(pSound: *const ma_sound) -> ma_uint64;
}
unsafe extern "C" {
    pub fn ma_sound_get_time_in_milliseconds(pSound: *const ma_sound) -> ma_uint64;
}
unsafe extern "C" {
    pub fn ma_sound_set_looping(pSound: *mut ma_sound, isLooping: ma_bool32);
}
unsafe extern "C" {
    pub fn ma_sound_is_looping(pSound: *const ma_sound) -> ma_bool32;
}
unsafe extern "C" {
    pub fn ma_sound_at_end(pSound: *const ma_sound) -> ma_bool32;
}
unsafe extern "C" {
    pub fn ma_sound_seek_to_pcm_frame(pSound: *mut ma_sound, frameIndex: ma_uint64) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_sound_seek_to_second(pSound: *mut ma_sound, seekPointInSeconds: f32) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_sound_get_data_format(
        pSound: *mut ma_sound,
        pFormat: *mut ma_format,
        pChannels: *mut ma_uint32,
        pSampleRate: *mut ma_uint32,
        pChannelMap: *mut ma_channel,
        channelMapCap: usize,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_sound_get_cursor_in_pcm_frames(
        pSound: *mut ma_sound,
        pCursor: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_sound_get_length_in_pcm_frames(
        pSound: *mut ma_sound,
        pLength: *mut ma_uint64,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_sound_get_cursor_in_seconds(pSound: *mut ma_sound, pCursor: *mut f32) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_sound_get_length_in_seconds(pSound: *mut ma_sound, pLength: *mut f32) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_sound_set_end_callback(
        pSound: *mut ma_sound,
        callback: ma_sound_end_proc,
        pUserData: *mut ::std::os::raw::c_void,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_sound_group_init(
        pEngine: *mut ma_engine,
        flags: ma_uint32,
        pParentGroup: *mut ma_sound_group,
        pGroup: *mut ma_sound_group,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_sound_group_init_ex(
        pEngine: *mut ma_engine,
        pConfig: *const ma_sound_group_config,
        pGroup: *mut ma_sound_group,
    ) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_sound_group_uninit(pGroup: *mut ma_sound_group);
}
unsafe extern "C" {
    pub fn ma_sound_group_get_engine(pGroup: *const ma_sound_group) -> *mut ma_engine;
}
unsafe extern "C" {
    pub fn ma_sound_group_start(pGroup: *mut ma_sound_group) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_sound_group_stop(pGroup: *mut ma_sound_group) -> ma_result;
}
unsafe extern "C" {
    pub fn ma_sound_group_set_volume(pGroup: *mut ma_sound_group, volume: f32);
}
unsafe extern "C" {
    pub fn ma_sound_group_get_volume(pGroup: *const ma_sound_group) -> f32;
}
unsafe extern "C" {
    pub fn ma_sound_group_set_pan(pGroup: *mut ma_sound_group, pan: f32);
}
unsafe extern "C" {
    pub fn ma_sound_group_get_pan(pGroup: *const ma_sound_group) -> f32;
}
unsafe extern "C" {
    pub fn ma_sound_group_set_pan_mode(pGroup: *mut ma_sound_group, panMode: ma_pan_mode);
}
unsafe extern "C" {
    pub fn ma_sound_group_get_pan_mode(pGroup: *const ma_sound_group) -> ma_pan_mode;
}
unsafe extern "C" {
    pub fn ma_sound_group_set_pitch(pGroup: *mut ma_sound_group, pitch: f32);
}
unsafe extern "C" {
    pub fn ma_sound_group_get_pitch(pGroup: *const ma_sound_group) -> f32;
}
unsafe extern "C" {
    pub fn ma_sound_group_set_spatialization_enabled(
        pGroup: *mut ma_sound_group,
        enabled: ma_bool32,
    );
}
unsafe extern "C" {
    pub fn ma_sound_group_is_spatialization_enabled(pGroup: *const ma_sound_group) -> ma_bool32;
}
unsafe extern "C" {
    pub fn ma_sound_group_set_pinned_listener_index(
        pGroup: *mut ma_sound_group,
        listenerIndex: ma_uint32,
    );
}
unsafe extern "C" {
    pub fn ma_sound_group_get_pinned_listener_index(pGroup: *const ma_sound_group) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_sound_group_get_listener_index(pGroup: *const ma_sound_group) -> ma_uint32;
}
unsafe extern "C" {
    pub fn ma_sound_group_get_direction_to_listener(pGroup: *const ma_sound_group) -> ma_vec3f;
}
unsafe extern "C" {
    pub fn ma_sound_group_set_position(pGroup: *mut ma_sound_group, x: f32, y: f32, z: f32);
}
unsafe extern "C" {
    pub fn ma_sound_group_get_position(pGroup: *const ma_sound_group) -> ma_vec3f;
}
unsafe extern "C" {
    pub fn ma_sound_group_set_direction(pGroup: *mut ma_sound_group, x: f32, y: f32, z: f32);
}
unsafe extern "C" {
    pub fn ma_sound_group_get_direction(pGroup: *const ma_sound_group) -> ma_vec3f;
}
unsafe extern "C" {
    pub fn ma_sound_group_set_velocity(pGroup: *mut ma_sound_group, x: f32, y: f32, z: f32);
}
unsafe extern "C" {
    pub fn ma_sound_group_get_velocity(pGroup: *const ma_sound_group) -> ma_vec3f;
}
unsafe extern "C" {
    pub fn ma_sound_group_set_attenuation_model(
        pGroup: *mut ma_sound_group,
        attenuationModel: ma_attenuation_model,
    );
}
unsafe extern "C" {
    pub fn ma_sound_group_get_attenuation_model(
        pGroup: *const ma_sound_group,
    ) -> ma_attenuation_model;
}
unsafe extern "C" {
    pub fn ma_sound_group_set_positioning(pGroup: *mut ma_sound_group, positioning: ma_positioning);
}
unsafe extern "C" {
    pub fn ma_sound_group_get_positioning(pGroup: *const ma_sound_group) -> ma_positioning;
}
unsafe extern "C" {
    pub fn ma_sound_group_set_rolloff(pGroup: *mut ma_sound_group, rolloff: f32);
}
unsafe extern "C" {
    pub fn ma_sound_group_get_rolloff(pGroup: *const ma_sound_group) -> f32;
}
unsafe extern "C" {
    pub fn ma_sound_group_set_min_gain(pGroup: *mut ma_sound_group, minGain: f32);
}
unsafe extern "C" {
    pub fn ma_sound_group_get_min_gain(pGroup: *const ma_sound_group) -> f32;
}
unsafe extern "C" {
    pub fn ma_sound_group_set_max_gain(pGroup: *mut ma_sound_group, maxGain: f32);
}
unsafe extern "C" {
    pub fn ma_sound_group_get_max_gain(pGroup: *const ma_sound_group) -> f32;
}
unsafe extern "C" {
    pub fn ma_sound_group_set_min_distance(pGroup: *mut ma_sound_group, minDistance: f32);
}
unsafe extern "C" {
    pub fn ma_sound_group_get_min_distance(pGroup: *const ma_sound_group) -> f32;
}
unsafe extern "C" {
    pub fn ma_sound_group_set_max_distance(pGroup: *mut ma_sound_group, maxDistance: f32);
}
unsafe extern "C" {
    pub fn ma_sound_group_get_max_distance(pGroup: *const ma_sound_group) -> f32;
}
unsafe extern "C" {
    pub fn ma_sound_group_set_cone(
        pGroup: *mut ma_sound_group,
        innerAngleInRadians: f32,
        outerAngleInRadians: f32,
        outerGain: f32,
    );
}
unsafe extern "C" {
    pub fn ma_sound_group_get_cone(
        pGroup: *const ma_sound_group,
        pInnerAngleInRadians: *mut f32,
        pOuterAngleInRadians: *mut f32,
        pOuterGain: *mut f32,
    );
}
unsafe extern "C" {
    pub fn ma_sound_group_set_doppler_factor(pGroup: *mut ma_sound_group, dopplerFactor: f32);
}
unsafe extern "C" {
    pub fn ma_sound_group_get_doppler_factor(pGroup: *const ma_sound_group) -> f32;
}
unsafe extern "C" {
    pub fn ma_sound_group_set_directional_attenuation_factor(
        pGroup: *mut ma_sound_group,
        directionalAttenuationFactor: f32,
    );
}
unsafe extern "C" {
    pub fn ma_sound_group_get_directional_attenuation_factor(pGroup: *const ma_sound_group) -> f32;
}
unsafe extern "C" {
    pub fn ma_sound_group_set_fade_in_pcm_frames(
        pGroup: *mut ma_sound_group,
        volumeBeg: f32,
        volumeEnd: f32,
        fadeLengthInFrames: ma_uint64,
    );
}
unsafe extern "C" {
    pub fn ma_sound_group_set_fade_in_milliseconds(
        pGroup: *mut ma_sound_group,
        volumeBeg: f32,
        volumeEnd: f32,
        fadeLengthInMilliseconds: ma_uint64,
    );
}
unsafe extern "C" {
    pub fn ma_sound_group_get_current_fade_volume(pGroup: *mut ma_sound_group) -> f32;
}
unsafe extern "C" {
    pub fn ma_sound_group_set_start_time_in_pcm_frames(
        pGroup: *mut ma_sound_group,
        absoluteGlobalTimeInFrames: ma_uint64,
    );
}
unsafe extern "C" {
    pub fn ma_sound_group_set_start_time_in_milliseconds(
        pGroup: *mut ma_sound_group,
        absoluteGlobalTimeInMilliseconds: ma_uint64,
    );
}
unsafe extern "C" {
    pub fn ma_sound_group_set_stop_time_in_pcm_frames(
        pGroup: *mut ma_sound_group,
        absoluteGlobalTimeInFrames: ma_uint64,
    );
}
unsafe extern "C" {
    pub fn ma_sound_group_set_stop_time_in_milliseconds(
        pGroup: *mut ma_sound_group,
        absoluteGlobalTimeInMilliseconds: ma_uint64,
    );
}
unsafe extern "C" {
    pub fn ma_sound_group_is_playing(pGroup: *const ma_sound_group) -> ma_bool32;
}
unsafe extern "C" {
    pub fn ma_sound_group_get_time_in_pcm_frames(pGroup: *const ma_sound_group) -> ma_uint64;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
